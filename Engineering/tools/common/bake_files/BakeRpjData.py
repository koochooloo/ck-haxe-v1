##
## Copyright (C) 2015, 1st Playable Productions, LLC. All rights reserved.
##
## UNPUBLISHED -- Rights reserved under the copyright laws of the United
## States. Use of a copyright notice is precautionary only and does not
## imply publication or disclosure.
##
## THIS DOCUMENTATION CONTAINS CONFIDENTIAL AND PROPRIETARY INFORMATION
## OF 1ST PLAYABLE PRODUCTIONS, LLC. ANY DUPLICATION, MODIFICATION,
## DISTRIBUTION, OR DISCLOSURE IS STRICTLY PROHIBITED WITHOUT THE PRIOR
## EXPRESS WRITTEN PERMISSION OF 1ST PLAYABLE PRODUCTIONS, LLC.
###########################################################################
import os
import argparse
import re

MIN_ARGS = 2
INVALID_VALUE = ""
LOCAL_MAINTAINER = "daniellecerniglia@1stplayable.com"

class RpjManifestWriter( object ):
	def __init__( self ):
		self.outputFile = open( manifest_file_path, 'w' )

	def writeClassBegin( self ):
		self.outputFile.write( "package assets;\n\n" )
		
		self.outputFile.write( "import com.firstplayable.hxlib.display.SpriteBoxData;\n" )
		self.outputFile.write( "import com.firstplayable.hxlib.loader.SpriteDataManager;\n" )
		self.outputFile.write( "import openfl.geom.Point;\n" )
		self.outputFile.write( "import openfl.geom.Rectangle;\n" )
		self.outputFile.write( "\n//WARNING! THIS CLASS IS AUTO-GENERATED BY TOOLS. YOUR CHANGES WILL BE OVERWRITTEN." )
		self.outputFile.write( "\nclass RpjManifest\n{\n" )
		
		
		self.outputFile.write( "	public static function init():Void\n" )
		self.outputFile.write( "	{\n" )

	def writeDataEntry( self, resPath, refX, refY, bndsX, bndsY, bndsW, bndsH ):
		self.outputFile.write( "		SpriteDataManager.instance.add( " + resPath + ", new SpriteBoxData( new Point( " + refX + ", " + refY + " ), new Rectangle( " + bndsX + ", " + bndsY + ", " + bndsW + ", " + bndsH + " ) ) );\n" )

	def writeClassEnd( self ):
		self.outputFile.write( "	}\n" )
		self.outputFile.write( '}' )
		
	def closeOutputFile( self ):
		self.outputFile.close()


def validateData( resPath, refX, refY, bndsX, bndsY, bndsW, bndsH ):
	if (resPath == INVALID_VALUE or refX == INVALID_VALUE or refY == INVALID_VALUE or bndsX == INVALID_VALUE or bndsY == INVALID_VALUE or bndsW == INVALID_VALUE or bndsH == INVALID_VALUE):
		print( "Warning: invalid entry for " + resPath )
		return False
	return True


# 1. In RPJ, IFL path looks like:  "pathA/filename.ifl"
# 2. In IFL, each line looks like: "pathB/filename_#### #"
# 3. Code expects something like:  "pathA/pathB/filename.png"
#
# So, combine 1 and 2 to create and return 3
def getPathFromIfl( rootDir, iflPath ):
        absIflPath = os.path.abspath( rootDir + "/" + iflPath )
	resPath = INVALID_VALUE
	
	if os.path.isfile( absIflPath ) == False:
		print( "Error baking rpj data for ifl: '" + absIflPath + "'" )
		print( "Please see " + LOCAL_MAINTAINER )
		exit
	else:
		iflFile = open( absIflPath, 'r' )
		line = iflFile.readline() # assume ALL lines follow format "pathB/filename_####.png #", so just grab first line
		
		idx = line.rfind( "_" )
		if idx != -1:
                        sharedPath = iflPath[:iflPath.rfind("/") + 1]   # yields: pathA/
			line = line[:idx]                               # yields: pathB/filename
			resPath = '"' + sharedPath + line+ '.png"'

	return resPath


def parseRpj( rpjPath, baseDir ):
	try:
		rpjFile = open( rpjPath, 'r' )
	except:
		print( "Error opening '" + rpjPath + "'" )
		return

	resPath = refX = refY = bndsX = bndsY = bndsW = bndsH = INVALID_VALUE
	
	for line in rpjFile:
		if line.find( "resource name" ) != -1:
			# This line looks something like: <resource name="avatar" path="drone/avatar/avatar.png">
			# This regex assigns a symbolic group name (pathVal) to everything inside the quotes that follow path=
			p = re.compile( 'path="(?P<pathVal>.*?)"' )
			m = p.search( line )
			if m != None:
				pathVal = m.group( 'pathVal' );
				if pathVal.find( ".ifl" ) != -1:
					resPath = getPathFromIfl( baseDir, pathVal )
				else:
                                        resPath = '"' + pathVal + '"'
		elif line.find( "vector name=\"center\"" ) != -1:
			# This line looks something like: <vector name="center" x="157" y="81" />
			# Regex works similar to the above, but looks for the x and y values
			p = re.compile( 'x="(?P<xVal>\d*)"(.*)y="(?P<yVal>\d*)"' )
			m = p.search( line )
			if m != None:
				refX = m.group( 'xVal' )
				refY = m.group( 'yVal' )
		elif line.find( "box name=\"bounds\"" ) != -1:
			# This line looks something like: <box name="bounds" x="57" y="9" width="221" height="143" />
			p = re.compile( 'x="(?P<xVal>\d*)"(.*)y="(?P<yVal>\d*)"(.*)width="(?P<wVal>\d*)"(.*)height="(?P<hVal>\d*)"' )
			m = p.search( line )
			if m != None:
				bndsX = m.group( 'xVal' )
				bndsY = m.group( 'yVal' )
				bndsW = m.group( 'wVal' )
				bndsH = m.group( 'hVal' )

			if validateData( resPath, refX, refY, bndsX, bndsY, bndsW, bndsH ):
				manifest.writeDataEntry( resPath, refX, refY, bndsX, bndsY, bndsW, bndsH )
			     
			resPath = refX = refY = bndsX = bndsY = bndsW = bndsH = INVALID_VALUE



if __name__ == "__main__":
        parser = argparse.ArgumentParser( description='Runs a module on a directory of rpjs and parses out the box & ref point data to hx.' )
        parser.add_argument( 'args',nargs='*' )
        options = parser.parse_args()

        numArgs = len( options.args )

        if numArgs < MIN_ARGS:
                print( "Insufficient number of arguments. Expected: hx dest file, rpj source dir" )
                exit

        manifest_file_path = os.path.abspath( options.args.pop( 0 ) )
        rpj_source_dir = os.path.abspath( options.args.pop( 0 ) )

        manifest = RpjManifestWriter();
        manifest.writeClassBegin()

        #find all RPJ files
        for root, dirs, files in os.walk( rpj_source_dir ):
                dirs.sort();
                for curFile in sorted( files ):
                        name, ext = os.path.splitext( curFile )
                        srcRpjPath = root + '/' + curFile
                        if ext.lower() == ".rpj":
                                parseRpj( srcRpjPath, root );

        manifest.writeClassEnd()
        manifest.closeOutputFile()

