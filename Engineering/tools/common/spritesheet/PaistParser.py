##
## Copyright (C) 2015, 1st Playable Productions, LLC. All rights reserved.
##
## UNPUBLISHED -- Rights reserved under the copyright laws of the United
## States. Use of a copyright notice is precautionary only and does not
## imply publication or disclosure.
##
## THIS DOCUMENTATION CONTAINS CONFIDENTIAL AND PROPRIETARY INFORMATION
## OF 1ST PLAYABLE PRODUCTIONS, LLC. ANY DUPLICATION, MODIFICATION,
## DISTRIBUTION, OR DISCLOSURE IS STRICTLY PROHIBITED WITHOUT THE PRIOR
## EXPRESS WRITTEN PERMISSION OF 1ST PLAYABLE PRODUCTIONS, LLC.
###########################################################################

import os
import logging
import re
import sys

PAIST_RES_PROP_STR = "\"resource\" : "
PAIST_RES_PROP_PATTERN =  PAIST_RES_PROP_STR + '"(?P<resource>.+)",'  #'": \[(?P<digits>\d+)\]'


def fixResPathsAndCopy( srcDir, destDir, resMap ):
    paistFileToSpritesheetsMap = {}

    srcDir = os.path.abspath( srcDir )
    destDir = os.path.abspath( destDir )

    logging.debug( "    Looking in '" + srcDir + "'"  )

    for root, _, files in os.walk( srcDir ):
        for filename in files:
            filepath = os.path.join( root, filename )
            sheets = processJsonFile( filepath, destDir, resMap )
            paistFileToSpritesheetsMap[ filepath ] = sheets

    return paistFileToSpritesheetsMap


def processJsonFile( filepath, destDir, resMap ):
    logging.debug( "        found file '" + filepath + "'"  )

    sheets = []

    paistInFile = open( filepath, 'r' )
    paistStr = ""

    resPattern = re.compile( PAIST_RES_PROP_PATTERN )

    # Look for "resource" lines in the Paist json
    for line in paistInFile:
        match = resPattern.search( line )

        # Found one!
        if match != None:

            # Get the value that's currently used
            resource = str( match.group( "resource" ) )

            # Find what sheet this resource lives in, and save it (so that we can specify which sheets to load with which Paist files)
            sheet = resMap.findSheetByResource( resource )
            if sheet != None:
                if not sheet in sheets:
                    sheets.append( sheet )
            else:
                sys.stderr.write( "WARNING: cannot find which sheet '" + resource + "' lives in\n" )
                sys.stderr.write( "\tThis is most likely a casing issue; please verify path to this resource\n" )
                sys.stderr.write( "\tand fix any references to it in Paist menu: '" + os.path.split( filepath )[1] + "'\n" )

            # Modify the resource path to use the path format hxlib expects (rather than what Paist expects)
            newResPath = resMap.findResourceRelPath( resource )
            newResPath = newResPath.replace( "./", "" )
            newResPath = os.path.splitext( newResPath )[ 0 ]

            # If we have a button, don't bake in the _up (findResourceRelPath() is
            # guaranteed to return the _up version of the resource)
            postfixStartPos = len( newResPath ) - len( "_up" )
            if newResPath.lower().find( "_up" ) == postfixStartPos: # checks if "_up" is at the very end
                newResPath = newResPath[:postfixStartPos]

            logging.debug( "            replacing '" + resource + "' with '" + newResPath + "'"  )

            # Modify the line that will be written out
            line = line[ :match.start( "resource" )] + newResPath + "\",\n"

        paistStr += line

    paistInFile.close()

    # Now, write out the new file
    destPath = os.path.join( destDir, os.path.split( filepath )[1] )
    logging.debug( "        Writing it back out to '" + destPath + "'"  )

    paistOutFile = open( destPath, 'w' )
    paistOutFile.write( paistStr )
    paistOutFile.close()

    return sheets



def writePaistManifest( manifestDest, paistFilenameToSpritesheetsMap, paistDestDir ):
    manifest = ManifestWriter( manifestDest, paistDestDir )
    manifest.writeStart()

    for key in sorted(paistFilenameToSpritesheetsMap.keys()):
        libName = os.path.split( key )[ 1 ]
        libName = os.path.splitext( libName )[ 0 ]

        manifest.writePaistFile( libName )

        sheets = paistFilenameToSpritesheetsMap[ key ]
        for sheet in sheets:
            manifest.writeSpritesheet( sheet, libName )

    manifest.writeEnd()



class ManifestWriter(object):
    def __init__( self, manifestDest, paistDestDir ):
        self.manifest = open( os.path.abspath( manifestDest ), 'w' )
        self.paistDestDir = paistDestDir

    def writeStart( self ):
        self.manifest.write( "package assets;\n" )
        self.manifest.write( "import assets.JsonAssets;\n" )
        self.manifest.write( "import com.firstplayable.hxlib.loader.ResMan;\n" )

        self.manifest.write( "\n//WARNING! THIS CLASS IS AUTO-GENERATED BY TOOLS. YOUR CHANGES WILL BE OVERWRITTEN." )
        self.manifest.write( "\nclass PaistManifest\n{\n" )
        self.manifest.write( "\tpublic static function init():Void\n" )
        self.manifest.write( "\t{\n" )


    def writePaistFile( self, libName ):
        filepath = self.paistDestDir + "\\" + libName
        filepath = filepath.replace( "..\\assets\\", "" ) # TODO: no hard-coding "assets"...
        filepath = filepath.replace( "\\", "/" )

        logging.debug( "    writing entry for paist file: " + libName  )

        line = "\t\t"
        line += "ResMan.instance.addRes( \""
        line += libName
        line += "\", { src : \""
        line += filepath + ".json"
        line += "\", content : JsonAssets."
        line += "_" + filepath.replace( "/", "_" )
        line += " } );\n"

        self.manifest.write( line )


    def writeSpritesheet( self, spritesheet, libName ):
        sheetPath = spritesheet.relPath.replace( "..\\assets\\", "" ) # TODO: no hard-coding "assets"...
        sheetPath = sheetPath.replace( "\\", "/" )
        logging.debug( "        writing entry for sheet: " + sheetPath  )

        # sheet png
        line = "\t\t"
        line += "ResMan.instance.addRes( \""
        line += libName
        line += "\", { src : \""
        line += sheetPath + ".png\""
        line += " } );\n"

        # sheet json
        line += "\t\t"
        line += "ResMan.instance.addRes( \""
        line += libName
        line += "\", { src : \""
        line += sheetPath + ".json"
        line += "\", content : JsonAssets."
        line += "_" + sheetPath.replace( "/", "_" )
        line += " } );\n"

        self.manifest.write( line )


    def writeEnd( self ):
        self.manifest.write( "\t}\n" )
        self.manifest.write( "}" )
        self.manifest.close()

