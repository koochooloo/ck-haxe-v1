<haxe>
	<class path="Array" params="T" file="D:\Projects\haxe\std/Array.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` Array.</haxe_doc>
		</length>
		<concat public="1" set="method">
			<f a="a">
				<c path="Array"><c path="Array.T"/></c>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Returns a new Array by appending the elements of `a` to the elements of
		`this` Array.

		This operation does not modify `this` Array.

		If `a` is the empty Array `[]`, a copy of `this` Array is returned.

		The length of the returned Array is equal to the sum of `this.length`
		and `a.length`.

		If `a` is `null`, the result is unspecified.</haxe_doc>
		</concat>
		<join public="1" set="method">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representation of `this` Array, with `sep` separating
		each element.

		The result of this operation is equal to `Std.string(this[0]) + sep +
		Std.string(this[1]) + sep + ... + sep + Std.string(this[this.length-1])`

		If `this` is the empty Array `[]`, the result is the empty String `""`.
		If `this` has exactly one element, the result is equal to a call to
		`Std.string(this[0])`.

		If `sep` is null, the result is unspecified.</haxe_doc>
		</join>
		<pop public="1" set="method">
			<f a=""><t path="Null"><c path="Array.T"/></t></f>
			<haxe_doc>Removes the last element of `this` Array and returns it.

		This operation modifies `this` Array in place.

		If `this` has at least one element, `this.length` will decrease by 1.

		If `this` is the empty Array `[]`, null is returned and the length
		remains 0.</haxe_doc>
		</pop>
		<push public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Adds the element `x` at the end of `this` Array and returns the new
		length of `this` Array.

		This operation modifies `this` Array in place.

		`this.length` increases by 1.</haxe_doc>
		</push>
		<reverse public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc><![CDATA[Reverse the order of elements of `this` Array.

		This operation modifies `this` Array in place.

		If `this.length < 2`, `this` remains unchanged.]]></haxe_doc>
		</reverse>
		<shift public="1" set="method">
			<f a=""><t path="Null"><c path="Array.T"/></t></f>
			<haxe_doc>Removes the first element of `this` Array and returns it.

		This operation modifies `this` Array in place.

		If `this` has at least one element, `this`.length and the index of each
		remaining element is decreased by 1.

		If `this` is the empty Array `[]`, `null` is returned and the length
		remains 0.</haxe_doc>
		</shift>
		<slice public="1" set="method">
			<f a="pos:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Creates a shallow copy of the range of `this` Array, starting at and
		including `pos`, up to but not including `end`.

		This operation does not modify `this` Array.

		The elements are not copied and retain their identity.

		If `end` is omitted or exceeds `this.length`, it defaults to the end of
		`this` Array.

		If `pos` or `end` are negative, their offsets are calculated from the
		end	of `this` Array by `this.length + pos` and `this.length + end`
		respectively. If this yields a negative value, 0 is used instead.

		If `pos` exceeds `this.length` or if `end` exceeds or equals `pos`,
		the result is `[]`.</haxe_doc>
		</slice>
		<sort public="1" set="method">
			<f a="f">
				<f a=":">
					<c path="Array.T"/>
					<c path="Array.T"/>
					<x path="Int"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Sorts `this` Array according to the comparison function `f`, where
		`f(x,y)` returns 0 if x == y, a positive Int if x > y and a
		negative Int if x < y.

		This operation modifies `this` Array in place.

		The sort operation is not guaranteed to be stable, which means that the
		order of equal elements may not be retained. For a stable Array sorting
		algorithm, `haxe.ds.sort.MergeSort.sort()` can be used instead.

		If `f` is null, the result is unspecified.]]></haxe_doc>
		</sort>
		<splice public="1" set="method">
			<f a="pos:len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc><![CDATA[Removes `len` elements from `this` Array, starting at and including
		`pos`, an returns them.

		This operation modifies `this` Array in place.

		If `len` is < 0 or `pos` exceeds `this`.length, the result is the empty
		Array [].

		If `pos` is negative, its value is calculated from the end	of `this`
		Array by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the sum of the resulting values for `len` and `pos` exceed
		`this.length`, this operation will affect the elements from `pos` to the
		end of `this` Array.

		The length of the returned Array is equal to the new length of `this`
		Array subtracted from the original length of `this` Array. In other
		words, each element of the original `this` Array either remains in
		`this` Array or becomes an element of the returned Array.]]></haxe_doc>
		</splice>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` Array.

		The result will include the individual elements' String representations
		separated by comma. The enclosing [ ] may be missing on some platforms,
		use Std.string() to get a String representation that is consistent
		across platforms.</haxe_doc>
		</toString>
		<unshift public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds the element `x` at the start of `this` Array.

		This operation modifies `this` Array in place.

		`this.length` and the index of each Array element increases by 1.</haxe_doc>
		</unshift>
		<insert public="1" set="method">
			<f a="pos:x">
				<x path="Int"/>
				<c path="Array.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Inserts the element `x` at the position `pos`.

		This operation modifies `this` Array in place.

		The offset is calculated like so:

		- If `pos` exceeds `this.length`, the offset is `this.length`.
		- If `pos` is negative, the offset is calculated from the end of `this`
		  Array, i.e. `this.length + pos`. If this yields a negative value, the
		  offset is 0.
		- Otherwise, the offset is `pos`.

		If the resulting offset does not exceed `this.length`, all elements from
		and including that offset to the end of `this` Array are moved one index
		ahead.</haxe_doc>
		</insert>
		<remove public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the first occurence of `x` in `this` Array.

		This operation modifies `this` Array in place.

		If `x` is found by checking standard equality, it is removed from `this`
		Array and all following elements are reindexed acoordingly. The function
		then returns true.

		If `x` is not found, `this` Array is not changed and the function
		returns false.</haxe_doc>
		</remove>
		<indexOf public="1" set="method">
			<f a="x:?fromIndex">
				<c path="Array.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns position of the first occurense of `x` in `this` Array, searching front to back.

		If `x` is found by checking standard equality, the function returns its index.

		If `x` is not found, the function returns -1.

		If `fromIndex` is specified, it will be used as the starting index to search from,
		otherwise search starts with zero index. If it is negative, it will be taken as the
		offset from the end of `this` Array to compute the starting index. If given or computed
		starting index is less than 0, the whole array will be searched, if it is greater than
		or equal to the length of `this` Array, the function returns -1.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method">
			<f a="x:?fromIndex">
				<c path="Array.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns position of the last occurense of `x` in `this` Array, searching back to front.

		If `x` is found by checking standard equality, the function returns its index.

		If `x` is not found, the function returns -1.

		If `fromIndex` is specified, it will be used as the starting index to search from,
		otherwise search starts with the last element index. If it is negative, it will be
		taken as the offset from the end of `this` Array to compute the starting index. If
		given or computed starting index is greater than or equal to the length of `this` Array,
		the whole array will be searched, if it is less than 0, the function returns -1.</haxe_doc>
		</lastIndexOf>
		<copy public="1" set="method">
			<f a=""><c path="Array"><c path="Array.T"/></c></f>
			<haxe_doc>Returns a shallow copy of `this` Array.

		The elements are not copied and retain their identity, so
		`a[i] == a.copy()[i]` is true for any valid `i`. However,
		`a == a.copy()` is always false.</haxe_doc>
		</copy>
		<iterator public="1" set="method">
			<f a=""><t path="Iterator"><c path="Array.T"/></t></f>
			<haxe_doc>Returns an iterator of the Array values.</haxe_doc>
		</iterator>
		<map public="1" params="S" set="method">
			<f a="f">
				<f a="">
					<c path="Array.T"/>
					<c path="map.S"/>
				</f>
				<c path="Array"><c path="map.S"/></c>
			</f>
			<haxe_doc>Creates a new Array by applying function `f` to all elements of `this`.

		The order of elements is preserved.

		If `f` is null, the result is unspecified.</haxe_doc>
		</map>
		<filter public="1" set="method">
			<f a="f">
				<f a="">
					<c path="Array.T"/>
					<x path="Bool"/>
				</f>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Returns an Array containing those elements of `this` for which `f`
		returned true.

		The individual elements are not duplicated and retain their identity.

		If `f` is null, the result is unspecified.</haxe_doc>
		</filter>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Array.</haxe_doc>
		</new>
		<haxe_doc>An Array is a storage for values. You can access it using indexes or
	with its API.</haxe_doc>
		<meta><m n=":reallyUsed"/></meta>
	</class>
	<abstract path="Class" params="T" file="D:\Projects\haxe\std/Class.hx">
		<this><x path="Class"><c path="Class.T"/></x></this>
		<haxe_doc>An abstract type that represents a Class.

	See `Type` for the Haxe Reflection API.</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<class path="Date" params="" file="D:\Projects\haxe\std/Date.hx" extern="1">
		<now public="1" set="method" static="1">
			<f a=""><c path="Date"/></f>
			<haxe_doc>Returns a Date representing the current local time.</haxe_doc>
		</now>
		<fromTime public="1" set="method" static="1">
			<f a="t">
				<x path="Float"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Returns a Date from timestamp `t`.</haxe_doc>
		</fromTime>
		<fromString public="1" set="method" static="1">
			<f a="s">
				<c path="String"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Returns a Date from a formated string `s`, with the following accepted
		formats:

		- `"YYYY-MM-DD hh:mm:ss"`
		- `"YYYY-MM-DD"`
		- `"hh:mm:ss"`

		The first two formats are expressed in local time, the third in UTC
		Epoch.</haxe_doc>
		</fromString>
		<getTime public="1" set="method">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns the timestamp of the date. It might only have a per-second
		precision depending on the platforms.</haxe_doc>
		</getTime>
		<getHours public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the hours of `this` Date (0-23 range).</haxe_doc>
		</getHours>
		<getMinutes public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the minutes of `this` Date (0-59 range).</haxe_doc>
		</getMinutes>
		<getSeconds public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the seconds of the `this` Date (0-59 range).</haxe_doc>
		</getSeconds>
		<getFullYear public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the full year of `this` Date (4-digits).</haxe_doc>
		</getFullYear>
		<getMonth public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the month of `this` Date (0-11 range).</haxe_doc>
		</getMonth>
		<getDate public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of `this` Date (1-31 range).</haxe_doc>
		</getDate>
		<getDay public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of the week of `this` Date (0-6 range).</haxe_doc>
		</getDay>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` Date, by using the
		standard format [YYYY-MM-DD HH:MM:SS]. See `DateTools.format` for
		other formating rules.</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="year:month:day:hour:min:sec">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new date object from the given arguments.

		The behaviour of a Date instance is only consistent across platforms if
		the the arguments describe a valid date.

		- month: 0 to 11
		- day: 1 to 31
		- hour: 0 to 23
		- min: 0 to 59
		- sec: 0 to 59</haxe_doc>
		</new>
		<haxe_doc>The Date class provides a basic structure for date and time related
	information. Date instances can be created by

	- `new Date()` for a specific date,
	- `Date.now()` to obtain information about the current time,
	- `Date.fromTime()` with a given timestamp or
	- `Date.fromString()` by parsing from a String.

	There is some extra functions available in the `DateTools` class.

	In the context of haxe dates, a timestamp is defined as the number of
	milliseconds elapsed since 1st January 1970.</haxe_doc>
		<meta><m n=":reallyUsed"/></meta>
	</class>
	<class path="EReg" params="" file="D:\Projects\haxe\std/EReg.hx">
		<match public="1" set="method" line="59">
			<f a="s">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `this` regular expression matches String `s`.

		This method modifies the internal state.

		If `s` is `null`, the result is unspecified.</haxe_doc>
		</match>
		<matched public="1" set="method" line="74">
			<f a="n">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the matched sub-group `n` of `this` EReg.

		This method should only be called after `this.match` or
		`this.matchSub`, and then operates on the String of that operation.

		The index `n` corresponds to the n-th set of parentheses in the pattern
		of `this` EReg. If no such sub-group exists, an exception is thrown.

		If `n` equals 0, the whole matched substring is returned.</haxe_doc>
		</matched>
		<map public="1" set="method" line="192">
			<f a="s:f">
				<c path="String"/>
				<f a="">
					<c path="EReg"/>
					<c path="String"/>
				</f>
				<c path="String"/>
			</f>
			<haxe_doc>Calls the function `f` for the substring of `s` which `this` EReg matches
		and replaces that substring with the result of `f` call.

		The `f` function takes `this` EReg object as its first argument and should
		return a replacement string for the substring matched.

		If `this` EReg does not match any substring, the result is `s`.

		By default, this method replaces only the first matched substring. If
		the global g modifier is in place, all matched substrings are replaced.

		If `s` or `f` are null, the result is unspecified.</haxe_doc>
		</map>
		<new public="1" set="method" line="48">
			<f a="r:opt">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new regular expression with pattern `r` and modifiers `opt`.

		This is equivalent to the shorthand syntax `~/r/opt`

		If `r` or `opt` are null, the result is unspecified.</haxe_doc>
		</new>
		<haxe_doc>The EReg class represents regular expressions.

	While basic usage and patterns consistently work across platforms, some more
	complex operations may yield different results. This is a necessary trade-
	off to retain a certain level of performance.

	EReg instances can be created by calling the constructor, or with the
	special syntax ~/pattern/modifier

	EReg instances maintain an internal state, which is affected by several of
	its methods.

	A detailed explanation of the supported operations is available at
	http://haxe.org/doc/cross/regexp</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":reallyUsed"/>
		</meta>
	</class>
	<abstract path="Enum" params="T" file="D:\Projects\haxe\std/Enum.hx">
		<this><x path="Enum"><c path="Enum.T"/></x></this>
		<haxe_doc>An abstract type that represents an Enum type.

	The corresponding enum instance type is `EnumValue`.

	See `Type` for the Haxe Reflection API.</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="EnumValue" params="" file="D:\Projects\haxe\std/EnumValue.hx">
		<this><x path="EnumValue"/></this>
		<haxe_doc>An abstract type that represents any enum value.
	See `Type` for the Haxe Reflection API.</haxe_doc>
		<meta><m n=":coreType"/></meta>
	</abstract>
	<class path="Lambda" params="" file="D:\Projects\haxe\std/Lambda.hx">
		<count public="1" params="A" set="method" line="191" static="1">
			<f a="it:?pred" v=":null">
				<t path="Iterable"><c path="count.A"/></t>
				<f a="">
					<c path="count.A"/>
					<x path="Bool"/>
				</f>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the number of elements in `it` for which `pred` is true, or the
		total number of elements in `it` if `pred` is null.

		This function traverses all elements.</haxe_doc>
		</count>
		<haxe_doc>The `Lambda` class is a collection of methods to support functional
	programming. It is ideally used with 'using Lambda' and then acts as an
	extension to Iterable types.

	On static platforms, working with the Iterable structure might be slower
	than performing the operations directly on known types, such as Array and
	List.

	If the first argument to any of the methods is null, the result is
	unspecified.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":reallyUsed"/>
		</meta>
	</class>
	<class path="List" params="T" file="D:\Projects\haxe\std/List.hx">
		<h><c path="Array"><d/></c></h>
		<q><c path="Array"><d/></c></q>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` List.</haxe_doc>
		</length>
		<add public="1" set="method" line="49">
			<f a="item">
				<c path="List.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds element `item` at the end of `this` List.

		`this.length` increases by 1.</haxe_doc>
		</add>
		<new public="1" set="method" line="40">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new empty list.</haxe_doc>
		</new>
		<haxe_doc>A linked-list of elements. The list is composed of two-elements arrays
	that are chained together. It is optimized so that adding or removing an
	element does not imply copying the whole array content every time.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":reallyUsed"/>
		</meta>
	</class>
	<abstract path="Map" params="K:V" file="D:\Projects\haxe\std/Map.hx">
		<from>
			<icast field="fromStringMap"><c path="haxe.ds.StringMap"><c path="fromStringMap.V"/></c></icast>
			<icast field="fromIntMap"><c path="haxe.ds.IntMap"><c path="fromIntMap.V"/></c></icast>
			<icast field="fromObjectMap"><c path="haxe.ds.ObjectMap">
	<c path="fromObjectMap.K"/>
	<c path="fromObjectMap.V"/>
</c></icast>
		</from>
		<this><t path="IMap">
	<c path="Map.K"/>
	<c path="Map.V"/>
</t></this>
		<to>
			<icast field="toStringMap"><c path="haxe.ds.StringMap"><c path="Map.V"/></c></icast>
			<icast field="toIntMap"><c path="haxe.ds.IntMap"><c path="Map.V"/></c></icast>
			<icast field="toEnumValueMapMap"><c path="haxe.ds.EnumValueMap">
	<c path="toEnumValueMapMap.K"/>
	<c path="Map.V"/>
</c></icast>
			<icast field="toObjectMap"><c path="haxe.ds.ObjectMap">
	<c path="toObjectMap.K"/>
	<c path="Map.V"/>
</c></icast>
		</to>
		<haxe_doc><![CDATA[Map allows key to value mapping for arbitrary value types, and many key
	types.

	This is a multi-type abstract, it is instantiated as one of its
	specialization types depending on its type parameters.

	A Map can be instantiated without explicit type parameters. Type inference
	will then determine the type parameters from the usage.

	Maps can also be created with `key1 => value1, key2 => value2` syntax.

	Map is an abstract type, it is not available at runtime.]]></haxe_doc>
		<meta><m n=":multiType"><e>K</e></m></meta>
		<impl><class path="_Map.Map_Impl_" params="" file="D:\Projects\haxe\std/Map.hx" private="1" module="Map"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<typedef path="IMap" params="K:V" file="D:\Projects\haxe\std/Map.hx" module="Map">
		<c path="haxe.IMap">
			<c path="IMap.K"/>
			<c path="IMap.V"/>
		</c>
		<meta><m n=":deprecated"/></meta>
	</typedef>
	<class path="Math" params="" file="D:\Projects\haxe\std/Math.hx" extern="1">
		<PI public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>Represents the ratio of the circumference of a circle to its diameter,
		specified by the constant, π. `PI` is approximately 3.141592653589793.</haxe_doc>
		</PI>
		<NEGATIVE_INFINITY public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special Float constant which denotes negative infinity.

		For example, this is the result of -1.0 / 0.0.

		Operations with NEGATIVE_INFINITY as an operand may result in
		NEGATIVE_INFINITY, POSITIVE_INFINITY or NaN.

		If this constant is converted to an Int, e.g. through Std.int(), the
		result is unspecified.</haxe_doc>
		</NEGATIVE_INFINITY>
		<POSITIVE_INFINITY public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special Float constant which denotes negative infinity.

		For example, this is the result of 1.0 / 0.0.

		Operations with POSITIVE_INFINITY as an operand may result in
		NEGATIVE_INFINITY, POSITIVE_INFINITY or NaN.

		If this constant is converted to an Int, e.g. through Std.int(), the
		result is unspecified.</haxe_doc>
		</POSITIVE_INFINITY>
		<NaN public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special Float constant which denotes an invalid number.

		NaN stands for "Not a Number". It occurs when a mathematically incorrect
		operation is executed, such as taking the square root of a negative
		number: Math.sqrt(-1).

		All further operations with NaN as an operand will result in NaN.

		If this constant is converted to an Int, e.g. through Std.int(), the
		result is unspecified.

		In order to test if a value is NaN, you should use Math.isNaN() function.

		@php In PHP versions prior to 5.3.1 VC 9 there may be unexpected
		results when performing arithmetic operations with NaN on Windows,
		see [https://bugs.php.net/bug.php?id=42143]</haxe_doc>
		</NaN>
		<abs public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the absolute value of `v`.

		If `v` is positive or 0, the result is unchanged. Otherwise the result
		is -`v`.

		If `v` is NEGATIVE_INFINITY or POSITIVE_INFINITY, the result is
		POSITIVE_INFINITY.

		If `v` is NaN, the result is NaN.</haxe_doc>
		</abs>
		<min public="1" set="method" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the smaller of values `a` and `b`.

		If `a` or `b` are NaN, the result is NaN.
		If `a` or `b` are NEGATIVE_INFINITY, the result is NEGATIVE_INFINITY.
		If `a` and `b` are POSITIVE_INFINITY, the result is POSITIVE_INFINITY.</haxe_doc>
		</min>
		<max public="1" set="method" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the greater of values `a` and `b`.

		If `a` or `b` are NaN, the result is NaN.
		If `a` or `b` are POSITIVE_INFINITY, the result is POSITIVE_INFINITY.
		If `a` and `b` are NEGATIVE_INFINITY, the result is NEGATIVE_INFINITY.</haxe_doc>
		</max>
		<sin public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric sine of the specified angle `v`, in radians.

		If `v` is NaN or infinite, the result is NaN.</haxe_doc>
		</sin>
		<cos public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric cosine of the specified angle `v`, in radians.

		If `v` is NaN or infinite, the result is NaN.</haxe_doc>
		</cos>
		<tan public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric tangent of the specified angle `v`, in radians.

		If `v` is NaN or infinite, the result is NaN.</haxe_doc>
		</tan>
		<asin public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc of the specified angle `v`, in radians.

		If `v` is NaN or infinite, the result is NaN.</haxe_doc>
		</asin>
		<acos public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc cosine of the specified angle `v`,
		in radians.

		If `v` is NaN or infinite, the result is NaN.</haxe_doc>
		</acos>
		<atan public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc tangent of the specified angle `v`,
		in radians.

		If `v` is NaN or infinite, the result is NaN.</haxe_doc>
		</atan>
		<atan2 public="1" set="method" static="1">
			<f a="y:x">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc tangent whose tangent is the quotient of
		two specified numbers, in radians.

		If parameter `x` or `y`  is NaN, NEGATIVE_INFINITY or POSITIVE_INFINITY,
		the result is NaN.</haxe_doc>
		</atan2>
		<exp public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns Euler's number, raised to the power of `v`.

		exp(1.0) is approximately 2.718281828459.

		If `v` is POSITIVE_INFINITY, the result is POSITIVE_INFINITY.
		If `v` is NEGATIVE_INFINITY, the result is 0.0.
		If `v` is NaN, the result is NaN.</haxe_doc>
		</exp>
		<log public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the natural logarithm of `v`.

		This is the mathematical inverse operation of exp,
		i.e. `log(exp(v)) == v` always holds.

		If `v` is negative (including NEGATIVE_INFINITY) or NaN, the result
		is NaN.
		If `v` is POSITIVE_INFINITY, the result is POSITIVE_INFINITY.
		If `v` is 0.0, the result is NEGATIVE_INFINITY.</haxe_doc>
		</log>
		<pow public="1" set="method" static="1">
			<f a="v:exp">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns a specified base `v` raised to the specified power `exp`.</haxe_doc>
		</pow>
		<sqrt public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the square root of `v`.

		If `v` is negative (including NEGATIVE_INFINITY) or NaN, the result
		is NaN.
		If `v` is POSITIVE_INFINITY, the result is POSITIVE_INFINITY.
		If `v` is 0.0, the result is 0.0.</haxe_doc>
		</sqrt>
		<round public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Rounds `v` to the nearest integer value.

		If `v` is outside of the signed Int32 range, or is NaN, NEGATIVE_INFINITY
		or POSITIVE_INFINITY, the result is unspecified.</haxe_doc>
		</round>
		<floor public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the largest integer value that is not greater than `v`.

		If `v` is outside of the signed Int32 range, or is NaN, NEGATIVE_INFINITY
		or POSITIVE_INFINITY, the result is unspecified.</haxe_doc>
		</floor>
		<ceil public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the smallest integer value that is not less than `v`.

		If `v` is outside of the signed Int32 range, or is NaN, NEGATIVE_INFINITY
		or POSITIVE_INFINITY, the result is unspecified.</haxe_doc>
		</ceil>
		<random public="1" set="method" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns a pseudo-random number which is greater than or equal to 0.0,
		and less than 1.0.</haxe_doc>
		</random>
		<ffloor public="1" get="inline" set="null" line="260" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></ffloor>
		<fceil public="1" get="inline" set="null" line="264" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></fceil>
		<fround public="1" get="inline" set="null" line="268" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></fround>
		<isFinite public="1" set="method" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `f` is a finite number.

		If `f` is POSITIVE_INFINITY, NEGATIVE_INFINITY or NaN, the result
		is false, otherwise the result is true.</haxe_doc>
		</isFinite>
		<isNaN public="1" set="method" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `f` is not a valid number.

		If `f` is NaN, the result is true, otherwise the result is false.
		In particular, both POSITIVE_INFINITY and NEGATIVE_INFINITY are
		not considered NaN.</haxe_doc>
		</isNaN>
		<haxe_doc>This class defines mathematical functions and constants.</haxe_doc>
		<meta><m n=":reallyUsed"/></meta>
	</class>
	<class path="Reflect" params="" file="D:\Projects\haxe\std/Reflect.hx" extern="1">
		<hasField public="1" set="method" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if structure `o` has a field named `field`.

		This is only guaranteed to work for anonymous structures. Refer to
		`Type.getInstanceFields` for a function supporting class instances.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</hasField>
		<field public="1" set="method" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Returns the value of the field named `field` on object `o`.

		If `o` is not an object or has no field named `field`, the result is
		null.

		If the field is defined as a property, its accessors are ignored. Refer
		to `Reflect.getProperty` for a function supporting property accessors.

		If `field` is null, the result is unspecified.

		(As3) If used on a property field, the getter will be invoked. It is
		not possible to obtain the value directly.</haxe_doc>
		</field>
		<setField public="1" set="method" static="1">
			<f a="o:field:value">
				<d/>
				<c path="String"/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the field named `field` of object `o` to value `value`.

		If `o` has no field named `field`, this function is only guaranteed to
		work for anonymous structures.

		If `o` or `field` are null, the result is unspecified.

		(As3) If used on a property field, the setter will be invoked. It is
		not possible to set the value directly.</haxe_doc>
		</setField>
		<getProperty public="1" set="method" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Returns the value of the field named `field` on object `o`, taking
		property getter functions into account.

		If the field is not a property, this function behaves like
		`Reflect.field`, but might be slower.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</getProperty>
		<setProperty public="1" set="method" static="1">
			<f a="o:field:value">
				<d/>
				<c path="String"/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the field named `field` of object `o` to value `value`, taking
		property setter functions into account.

		If the field is not a property, this function behaves like
		`Reflect.setField`, but might be slower.

		If `field` is null, the result is unspecified.</haxe_doc>
		</setProperty>
		<callMethod public="1" set="method" static="1">
			<f a="o:func:args">
				<d/>
				<x path="haxe.Function"/>
				<c path="Array"><d/></c>
				<d/>
			</f>
			<haxe_doc>Call a method with the given object and arguments.</haxe_doc>
		</callMethod>
		<fields public="1" set="method" static="1">
			<f a="o">
				<d/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns the fields of structure `o`.

		This method is only guaranteed to work on anonymous structures. Refer to
		`Type.getInstanceFields` for a function supporting class instances.

		If `o` is null, the result is unspecified.</haxe_doc>
		</fields>
		<isFunction public="1" set="method" static="1">
			<f a="f">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if `f` is a function, false otherwise.

		If `f` is null, the result is false.</haxe_doc>
		</isFunction>
		<compare public="1" params="T" set="method" static="1">
			<f a="a:b">
				<c path="compare.T"/>
				<c path="compare.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Compares `a` and `b`.

		If `a` is less than `b`, the result is negative. If `b` is less than
		`a`, the result is positive. If `a` and `b` are equal, the result is 0.

		This function is only defined if `a` and `b` are of the same type.

		If that type is a function, the result is unspecified and
		`Reflect.compareMethods` should be used instead.

		For all other types, the result is 0 if `a` and `b` are equal. If they
		are not equal, the result depends on the type and is negative if:

		- Numeric types: a is less than b
		- String: a is lexicographically less than b
		- Other: unspecified

		If `a` and `b` are null, the result is 0. If only one of them is null,
		the result is unspecified.</haxe_doc>
		</compare>
		<compareMethods public="1" set="method" static="1">
			<f a="f1:f2">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Compares the functions `f1` and `f2`.

		If `f1` or `f2` are not functions, the result is unspecified.

		Otherwise the result is true if `f1` and the `f2` are physically equal,
		false otherwise.</haxe_doc>
		</compareMethods>
		<isObject public="1" set="method" static="1">
			<f a="v">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc><![CDATA[Tells if `v` is an object.

		The result is true if `v` is one of the following:

		- class instance
		- structure
		- Class<T>
		- Enum<T>

		Otherwise, including if `v` is null, the result is false.]]></haxe_doc>
		</isObject>
		<isEnumValue public="1" set="method" static="1">
			<f a="v">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `v` is an enum value.

		The result is true if `v` is of type EnumValue, i.e. an enum
		constructor.

		Otherwise, including if `v` is null, the result is false.</haxe_doc>
		</isEnumValue>
		<deleteField public="1" set="method" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the field named `field` from structure `o`.

		This method is only guaranteed to work on anonymous structures.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</deleteField>
		<copy public="1" params="T" set="method" static="1">
			<f a="o">
				<c path="copy.T"/>
				<c path="copy.T"/>
			</f>
			<haxe_doc>Copies the fields of structure `o`.

		This is only guaranteed to work on anonymous structures.

		If `o` is null, the result is unspecified.</haxe_doc>
		</copy>
		<makeVarArgs public="1" set="method" static="1">
			<f a="f">
				<f a="">
					<c path="Array"><d/></c>
					<d/>
				</f>
				<d/>
			</f>
			<haxe_doc>Transform a function taking an array of arguments into a function that can
		be called with any number of arguments.</haxe_doc>
			<overloads><makeVarArgs public="1" set="method">
	<f a="f">
		<f a="">
			<c path="Array"><d/></c>
			<x path="Void"/>
		</f>
		<d/>
	</f>
	<haxe_doc>Transform a function taking an array of arguments into a function that can
		be called with any number of arguments.</haxe_doc>
</makeVarArgs></overloads>
		</makeVarArgs>
		<haxe_doc>The Reflect API is a way to manipulate values dynamicly through an
	abstract interface in an untyped manner. Use with care.</haxe_doc>
		<meta><m n=":reallyUsed"/></meta>
	</class>
	<class path="Std" params="" file="D:\Projects\haxe\std/Std.hx" extern="1">
		<is public="1" set="method" static="1">
			<f a="v:t">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if a value v is of the type t. Returns false if v or t are null.</haxe_doc>
		</is>
		<instance public="1" params="T:S" set="method" static="1">
			<f a="value:c">
				<c path="instance.T"/>
				<x path="Class"><c path="instance.S"/></x>
				<c path="instance.S"/>
			</f>
			<haxe_doc>Checks if object `value` is an instance of class `c`.

		Compiles only if the class specified by `c` can be assigned to the type
		of `value`.

		This method checks if a downcast is possible. That is, if the runtime
		type of `value` is assignable to the class specified by `c`, `value` is
		returned. Otherwise null is returned.

		This method is not guaranteed to work with interfaces or core types such
		as String, Array and Date.

		If `value` is null, the result is null. If `c` is null, the result is
		unspecified.</haxe_doc>
		</instance>
		<string public="1" set="method" static="1">
			<f a="s">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Converts any value to a String.

		If `s` is of `String`, `Int`, `Float` or `Bool`, its value is returned.

		If `s` is an instance of a class and that class or one of its parent classes has
		a `toString` method, that method is called. If no such method is present, the result
		is unspecified.

		If `s` is an enum constructor without argument, the constructor's name is returned. If
		arguments exists, the constructor's name followed by the String representations of
		the arguments is returned.

		If `s` is a structure, the field names along with their values are returned. The field order
		and the operator separating field names and values are unspecified.

		If s is null, "null" is returned.</haxe_doc>
		</string>
		<int public="1" set="method" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Converts a `Float` to an `Int`, rounded towards 0.

		If `x` is outside of the signed Int32 range, or is NaN, NEGATIVE_INFINITY or POSITIVE_INFINITY, the result is unspecified.</haxe_doc>
		</int>
		<parseInt public="1" set="method" static="1">
			<f a="x">
				<c path="String"/>
				<t path="Null"><x path="Int"/></t>
			</f>
			<haxe_doc>Converts a `String` to an `Int`.

		Leading whitespaces are ignored.

		If `x` starts with 0x or 0X, hexadecimal notation is recognized where the following digits may
		contain 0-9 and A-F.

		Otherwise `x` is read as decimal number with 0-9 being allowed characters. `x` may also start with
		a - to denote a negative value.

		In decimal mode, parsing continues until an invalid character is detected, in which case the
		result up to that point is returned. For hexadecimal notation, the effect of invalid characters
		is unspecified.

		Leading 0s that are not part of the 0x/0X hexadecimal notation are ignored, which means octal
		notation is not supported.

		If the input cannot be recognized, the result is null.</haxe_doc>
		</parseInt>
		<parseFloat public="1" set="method" static="1">
			<f a="x">
				<c path="String"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Converts a `String` to a `Float`.

		The parsing rules for `parseInt` apply here as well, with the exception of invalid input
		resulting in a NaN value instead of null.

		Additionally, decimal notation may contain a single `.` to denote the start of the fractions.</haxe_doc>
		</parseFloat>
		<random public="1" set="method" static="1">
			<f a="x">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc><![CDATA[Return a random integer between 0 included and `x` excluded.

		If `x <= 1`, the result is always 0.]]></haxe_doc>
		</random>
		<haxe_doc>The Std class provides standard methods for manipulating basic types.</haxe_doc>
		<meta><m n=":reallyUsed"/></meta>
	</class>
	<abstract path="Void" params="" file="D:\Projects\haxe\std/StdTypes.hx" module="StdTypes">
		<this><x path="Void"/></this>
		<haxe_doc>The standard Void type. Only `null` values can be of the type `Void`.</haxe_doc>
		<meta><m n=":coreType"/></meta>
	</abstract>
	<abstract path="Float" params="" file="D:\Projects\haxe\std/StdTypes.hx" module="StdTypes">
		<this><x path="Float"/></this>
		<haxe_doc><![CDATA[The standard Float type, this is a double-precision IEEE 64bit float.

	On static targets, null cannot be assigned to Float. If this is necessary,
	`Null<Float>` can be used instead.]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Int" params="" file="D:\Projects\haxe\std/StdTypes.hx" module="StdTypes">
		<this><x path="Int"/></this>
		<to><icast><x path="Float"/></icast></to>
		<haxe_doc><![CDATA[The standard Int type. Its precision depends on the platform.

	On static targets, null cannot be assigned to Int. If this is necessary,
	`Null<Int>` can be used instead.]]></haxe_doc>
		<meta>
			<m n=":valueUsed"/>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<typedef path="Null" params="T" file="D:\Projects\haxe\std/StdTypes.hx" module="StdTypes">
		<c path="Null.T"/>
		<haxe_doc>`Null` can be useful in two cases. In order to document some methods
	that accepts or can return a `null` value, or for the Flash9 compiler and AS3
	generator to distinguish between base values that can be null and others that
	can't.</haxe_doc>
	</typedef>
	<abstract path="Bool" params="" file="D:\Projects\haxe\std/StdTypes.hx" module="StdTypes">
		<this><x path="Bool"/></this>
		<haxe_doc><![CDATA[The standard Boolean type, which can either be true or false.

	On static targets, null cannot be assigned to Bool. If this is necessary,
	`Null<Bool>` can be used instead.]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Dynamic" params="T" file="D:\Projects\haxe\std/StdTypes.hx" module="StdTypes">
		<this><x path="Dynamic"><c path="Dynamic.T"/></x></this>
		<haxe_doc>Dynamic is a special type which is compatible with all other types.

	Use of Dynamic should be minimized as it prevents several compiler
	checks and optimizations.</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<typedef path="Iterator" params="T" file="D:\Projects\haxe\std/StdTypes.hx" module="StdTypes">
		<a>
			<next set="method">
				<f a=""><c path="Iterator.T"/></f>
				<haxe_doc>Returns the current item of the Iterator and advances to the next one.

		This method is not required to check hasNext() first. A call to this
		method while hasNext() is false yields unspecified behavior.</haxe_doc>
			</next>
			<hasNext set="method">
				<f a=""><x path="Bool"/></f>
				<haxe_doc>Returns false if the iteration is complete, true otherwise.

		Usually iteration is considered to be complete if all elements of the
		underlying data structure were handled through calls to next(). However,
		in custom iterators any logic may be used to determine the completion
		state.</haxe_doc>
			</hasNext>
		</a>
		<haxe_doc>An Iterator is a structure that permits iteration over elements of type T.

	Any class with matching hasNext and next fields is considered an Iterator
	and can then be used e.g. in for-loops. This makes it easy to implement
	custom iterators.</haxe_doc>
	</typedef>
	<typedef path="Iterable" params="T" file="D:\Projects\haxe\std/StdTypes.hx" module="StdTypes">
		<a><iterator set="method"><f a=""><t path="Iterator"><c path="Iterable.T"/></t></f></iterator></a>
		<haxe_doc>An Iterable is a data structure which has an iterator() method.
	See `Lambda` for generic functions on iterable structures.</haxe_doc>
	</typedef>
	<class path="ArrayAccess" params="T" file="D:\Projects\haxe\std/StdTypes.hx" module="StdTypes" extern="1" interface="1"><haxe_doc>ArrayAccess is used to indicate a class that can be accessed using brackets.
	The type parameter represent the type of the elements stored.</haxe_doc></class>
	<class path="String" params="" file="D:\Projects\haxe\std/String.hx" extern="1">
		<fromCharCode public="1" set="method" static="1">
			<f a="code">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the String corresponding to the character code `code`.

		If `code` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
		</fromCharCode>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of characters in `this` String.</haxe_doc>
		</length>
		<toUpperCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are upper case.

		Affects the characters `a-z`. Other characters remain unchanged.</haxe_doc>
		</toUpperCase>
		<toLowerCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are lower case.

		Affects the characters `A-Z`. Other characters remain unchanged.</haxe_doc>
		</toLowerCase>
		<charAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the character at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, the empty String ""
		is returned.</haxe_doc>
		</charAt>
		<charCodeAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<t path="Null"><x path="Int"/></t>
			</f>
			<haxe_doc>Returns the character code at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, null is returned.

		To obtain the character code of a single character, "x".code can be used
		instead to inline the character code at compile time. Note that this
		only works on String literals of length 1.</haxe_doc>
		</charCodeAt>
		<indexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the leftmost occurence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String starting from `startIndex`. Otherwise the search is
		performed within `this` String. In either case, the returned position
		is relative to the beginning of `this` String.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the rightmost occurence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String from 0 to `startIndex`. Otherwise the search is
		performed within `this` String. In either case, the returned position
		is relative to the beginning of `this` String.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</lastIndexOf>
		<split public="1" set="method">
			<f a="delimiter">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Splits `this` String at each occurence of `delimiter`.

		If `this` String is the empty String "", the result is not consistent
		across targets and may either be `[]` (on Js, Cpp) or `[""]`.

		If `delimiter` is the empty String "", `this` String is split into an
		Array of `this.length` elements, where the elements correspond to the
		characters of `this` String.

		If `delimiter` is not found within `this` String, the result is an Array
		with one element, which equals `this` String.

		If `delimiter` is null, the result is unspecified.

		Otherwise, `this` String is split into parts at each occurence of
		`delimiter`. If `this` String starts (or ends) with [delimiter}, the
		result Array contains a leading (or trailing) empty String "" element.
		Two subsequent delimiters also result in an empty String "" element.</haxe_doc>
		</split>
		<substr public="1" set="method">
			<f a="pos:?len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns `len` characters of `this` String, starting at position `pos`.

		If `len` is omitted, all characters from position `pos` to the end of
		`this` String are included.

		If `pos` is negative, its value is calculated from the end of `this`
		String by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the calculated position + `len` exceeds `this.length`, the characters
		from that position to the end of `this` String are returned.

		If `len` is negative, the result is unspecified.</haxe_doc>
		</substr>
		<substring public="1" set="method">
			<f a="startIndex:?endIndex">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the part of `this` String from `startIndex` to but not including `endIndex`.

		If `startIndex` or `endIndex` are negative, 0 is used instead.

		If `startIndex` exceeds `endIndex`, they are swapped.

		If the (possibly swapped) `endIndex` is omitted or exceeds
		`this.length`, `this.length` is used instead.

		If the (possibly swapped) `startIndex` exceeds `this.length`, the empty
		String "" is returned.</haxe_doc>
		</substring>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the String itself.</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="string">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a copy from a given String.</haxe_doc>
		</new>
		<haxe_doc>The basic String class.

	A haxe String is immutable, it is not possible to modify individual
	characters. No method of this class changes the state of `this` String.

	Strings can be constructed using the string literal syntax "string value".

	String can be concatenated by using the + operator. If an operand is not a
	String, it is passed through Std.string() first.</haxe_doc>
		<meta><m n=":reallyUsed"/></meta>
	</class>
	<class path="StringBuf" params="" file="D:\Projects\haxe\std/StringBuf.hx">
		<b><c path="String"/></b>
		<length public="1" get="null" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` StringBuf in characters.</haxe_doc>
		</length>
		<new public="1" get="inline" set="null" line="47">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new StringBuf instance.

		This may involve initialization of the internal buffer.</haxe_doc>
		</new>
		<haxe_doc>A String buffer is an efficient way to build a big string by appending small
	elements together.

	Its cross-platform implementation uses String concatenation internally, but
	StringBuf may be optimized for different targets.

	Unlike String, an instance of StringBuf is not immutable in the sense that
	it can be passed as argument to functions which modify it by appending more
	values. However, the internal buffer cannot be modified.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="StringTools" params="" file="D:\Projects\haxe\std/StringTools.hx">
		<hex public="1" set="method" line="320" static="1">
			<f a="n:?digits" v=":null">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Encodes `n` into a hexadecimal representation.

		If `digits` is specified, the resulting String is padded with "0" until
		its length equals `digits`.</haxe_doc>
		</hex>
		<haxe_doc>This class provides advanced methods on Strings. It is ideally used with
	'using StringTools' and then acts as an extension to the String class.

	If the first argument to any of the methods is null, the result is
	unspecified.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":reallyUsed"/>
		</meta>
	</class>
	<enum path="ValueType" params="" file="D:\Projects\haxe\std/Type.hx" module="Type">
		<TNull/>
		<TInt/>
		<TFloat/>
		<TBool/>
		<TObject/>
		<TFunction/>
		<TClass a="c"><x path="Class"><d/></x></TClass>
		<TEnum a="e"><x path="Enum"><d/></x></TEnum>
		<TUnknown/>
		<haxe_doc>The diffent possible runtime types of a value.</haxe_doc>
	</enum>
	<class path="Type" params="" file="D:\Projects\haxe\std/Type.hx" extern="1">
		<getClass public="1" params="T" set="method" static="1">
			<f a="o">
				<c path="getClass.T"/>
				<x path="Class"><c path="getClass.T"/></x>
			</f>
			<haxe_doc>Returns the class of `o`, if `o` is a class instance.

		If `o` is null or of a different type, null is returned.

		In general, type parameter information cannot be obtained at runtime.</haxe_doc>
		</getClass>
		<getEnum public="1" set="method" static="1">
			<f a="o">
				<x path="EnumValue"/>
				<x path="Enum"><d/></x>
			</f>
			<haxe_doc><![CDATA[Returns the enum of enum instance `o`.

		An enum instance is the result of using an enum constructor. Given an
		`enum Color { Red; }`, `getEnum(Red)` returns `Enum<Color>`.

		If `o` is null, null is returned.

		In general, type parameter information cannot be obtained at runtime.]]></haxe_doc>
		</getEnum>
		<getSuperClass public="1" set="method" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<x path="Class"><d/></x>
			</f>
			<haxe_doc>Returns the super-class of class `c`.

		If `c` has no super class, null is returned.

		If `c` is null, the result is unspecified.

		In general, type parameter information cannot be obtained at runtime.</haxe_doc>
		</getSuperClass>
		<getClassName public="1" set="method" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of class `c`, including its path.

		If `c` is inside a package, the package structure is returned dot-
		separated, with another dot separating the class name:
		`pack1.pack2.(...).packN.ClassName`
		If `c` is a sub-type of a haxe module, that module is not part of the
		package structure.

		If `c` has no package, the class name is returned.

		If `c` is null, the result is unspecified.

		The class name does not include any type parameters.</haxe_doc>
		</getClassName>
		<getEnumName public="1" set="method" static="1">
			<f a="e">
				<x path="Enum"><d/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of enum `e`, including its path.

		If `e` is inside a package, the package structure is returned dot-
		separated, with another dot separating the enum name:
		`pack1.pack2.(...).packN.EnumName`
		If `e` is a sub-type of a haxe module, that module is not part of the
		package structure.

		If `e` has no package, the enum name is returned.

		If `e` is null, the result is unspecified.

		The enum name does not include any type parameters.</haxe_doc>
		</getEnumName>
		<resolveClass public="1" set="method" static="1">
			<f a="name">
				<c path="String"/>
				<x path="Class"><d/></x>
			</f>
			<haxe_doc>Resolves a class by name.

		If `name` is the path of an existing class, that class is returned.

		Otherwise null is returned.

		If `name` is null or the path to a different type, the result is
		unspecified.

		The class name must not include any type parameters.</haxe_doc>
		</resolveClass>
		<resolveEnum public="1" set="method" static="1">
			<f a="name">
				<c path="String"/>
				<x path="Enum"><d/></x>
			</f>
			<haxe_doc>Resolves an enum by name.

		If `name` is the path of an existing enum, that enum is returned.

		Otherwise null is returned.

		If `name` is null the result is unspecified.

		If `name` is the path to a different type, null is returned.

		The enum name must not include any type parameters.</haxe_doc>
		</resolveEnum>
		<createInstance public="1" params="T" set="method" static="1">
			<f a="cl:args">
				<x path="Class"><c path="createInstance.T"/></x>
				<c path="Array"><d/></c>
				<c path="createInstance.T"/>
			</f>
			<haxe_doc>Creates an instance of class `cl`, using `args` as arguments to the
		class constructor.

		This function guarantees that the class constructor is called.

		Default values of constructors arguments are not guaranteed to be
		taken into account.

		If `cl` or `args` are null, or if the number of elements in `args` does
		not match the expected number of constructor arguments, or if any
		argument has an invalid type,  or if `cl` has no own constructor, the
		result is unspecified.

		In particular, default values of constructor arguments are not
		guaranteed to be taken into account.</haxe_doc>
		</createInstance>
		<createEmptyInstance public="1" params="T" set="method" static="1">
			<f a="cl">
				<x path="Class"><c path="createEmptyInstance.T"/></x>
				<c path="createEmptyInstance.T"/>
			</f>
			<haxe_doc>Creates an instance of class `cl`.

		This function guarantees that the class constructor is not called.

		If `cl` is null, the result is unspecified.</haxe_doc>
		</createEmptyInstance>
		<createEnum public="1" params="T" set="method" static="1">
			<f a="e:constr:?params">
				<x path="Enum"><c path="createEnum.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createEnum.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor `constr` with
		arguments `params`.

		If `e` or `constr` is null, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createEnum>
		<createEnumIndex public="1" params="T" set="method" static="1">
			<f a="e:index:?params">
				<x path="Enum"><c path="createEnumIndex.T"/></x>
				<x path="Int"/>
				<c path="Array"><d/></c>
				<c path="createEnumIndex.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor number
		`index` with arguments `params`.

		The constructor indices are preserved from haxe syntax, so the first
		declared is index 0, the next index 1 etc.

		If `e` or `constr` is null, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createEnumIndex>
		<getInstanceFields public="1" set="method" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the instance fields of class `c`.

		This only includes fields which are known at compile-time. In
		particular, using getInstanceFields(getClass(obj)) will not include
		any fields which were added to obj at runtime.

		The order of the fields in the returned Array is unspecified.

		If `c` is null, the result is unspecified.

		(As3) This method only returns instance fields that are public.</haxe_doc>
		</getInstanceFields>
		<getClassFields public="1" set="method" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of static fields of class `c`.

		This does not include static fields of parent classes.

		The order of the fields in the returned Array is unspecified.

		If `c` is null, the result is unspecified.

		(As3) This method only returns class fields that are public.</haxe_doc>
		</getClassFields>
		<getEnumConstructs public="1" set="method" static="1">
			<f a="e">
				<x path="Enum"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the names of all constructors of enum `e`.

		The order of the constructor names in the returned Array is preserved
		from the original syntax.

		If `c` is null, the result is unspecified.</haxe_doc>
		</getEnumConstructs>
		<typeof public="1" set="method" static="1">
			<f a="v">
				<d/>
				<e path="ValueType"/>
			</f>
			<haxe_doc>Returns the runtime type of value `v`.

		The result corresponds to the type `v` has at runtime, which may vary
		per platform. Assumptions regarding this should be minimized to avoid
		surprises.</haxe_doc>
		</typeof>
		<enumEq public="1" params="T" set="method" static="1">
			<f a="a:b">
				<c path="enumEq.T"/>
				<c path="enumEq.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Recursively compares two enum instances `a` and `b` by value.

		Unlike `a == b`, this function performs a deep equality check on the
		arguments of the constructors, if exists.

		If `a` or `b` are null, the result is unspecified.</haxe_doc>
		</enumEq>
		<enumConstructor public="1" set="method" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the constructor name of enum instance `e`.

		The result String does not contain any constructor arguments.

		If `e` is null, the result is unspecified.</haxe_doc>
		</enumConstructor>
		<enumParameters public="1" set="method" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>Returns a list of the constructor arguments of enum instance `e`.

		If `e` has no arguments, the result is [].

		Otherwise the result are the values that were used as arguments to `e`,
		in the order of their declaration.

		If `e` is null, the result is unspecified.</haxe_doc>
		</enumParameters>
		<enumIndex public="1" set="method" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of enum instance `e`.

		This corresponds to the original syntactic position of `e`. The index of
		the first declared constructor is 0, the next one is 1 etc.

		If `e` is null, the result is unspecified.</haxe_doc>
		</enumIndex>
		<allEnums public="1" params="T" set="method" static="1">
			<f a="e">
				<x path="Enum"><c path="allEnums.T"/></x>
				<c path="Array"><c path="allEnums.T"/></c>
			</f>
			<haxe_doc>Returns a list of all constructors of enum `e` that require no
		arguments.

		This may return the empty Array [] if all constructors of `e` require
		arguments.

		Otherwise an instance of `e` constructed through each of its non-
		argument constructors is returned, in the order of the constructor
		declaration.

		If `e` is null, the result is unspecified.</haxe_doc>
		</allEnums>
		<haxe_doc>The haxe Reflection API allows retrieval of type information at runtime.

	This class complements the more lightweight Reflect class, with a focus on
	class and enum instances.</haxe_doc>
		<meta><m n=":reallyUsed"/></meta>
	</class>
	<abstract path="UInt" params="" file="D:\Projects\haxe\std/UInt.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast field="toFloat"><x path="Float"/></icast>
		</to>
		<haxe_doc>The unsigned Int type is only defined for Flash9 and C#.
	Simulate it for other platforms.</haxe_doc>
		<impl><class path="_UInt.UInt_Impl_" params="" file="D:\Projects\haxe\std/UInt.hx" private="1" module="UInt"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="Xml" params="" file="D:\Projects\haxe\std/Xml.hx" extern="1">
		<Element public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>A type of Xml node.</haxe_doc>
		</Element>
		<PCData public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>A type of Xml node.</haxe_doc>
		</PCData>
		<CData public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>A type of Xml node.</haxe_doc>
		</CData>
		<Comment public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>A type of Xml node.</haxe_doc>
		</Comment>
		<DocType public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>A type of Xml node.</haxe_doc>
		</DocType>
		<ProcessingInstruction public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>A type of Xml node.</haxe_doc>
		</ProcessingInstruction>
		<Document public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>A type of Xml node.</haxe_doc>
		</Document>
		<parse public="1" set="method" static="1">
			<f a="str">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Parse a String into an Xml object.</haxe_doc>
		</parse>
		<createElement public="1" set="method" static="1">
			<f a="name">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createElement>
		<createPCData public="1" set="method" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createPCData>
		<createCData public="1" set="method" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createCData>
		<createComment public="1" set="method" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createComment>
		<createDocType public="1" set="method" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createDocType>
		<createProcessingInstruction public="1" set="method" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createProcessingInstruction>
		<createDocument public="1" set="method" static="1">
			<f a=""><c path="Xml"/></f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createDocument>
		<nodeType public="1" set="null">
			<e path="XmlType"/>
			<haxe_doc>Returns the type of the Xml Node. This should be used before
		accessing other functions since some might raise an exception
		if the node type is not correct.</haxe_doc>
		</nodeType>
		<nodeName public="1" get="null" set="null">
			<c path="String"/>
			<haxe_doc>Returns the node name of an Element.</haxe_doc>
		</nodeName>
		<nodeValue public="1" get="null" set="null">
			<c path="String"/>
			<haxe_doc>Returns the node value. Only works if the Xml node is not an Element or a Document.</haxe_doc>
		</nodeValue>
		<get public="1" set="method">
			<f a="att">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Get the given attribute of an Element node. Returns [null] if not found.
		Attributes are case-sensitive.</haxe_doc>
		</get>
		<set public="1" set="method">
			<f a="att:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set the given attribute value for an Element node.
		Attributes are case-sensitive.</haxe_doc>
		</set>
		<remove public="1" set="method">
			<f a="att">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes an attribute for an Element node.
		Attributes are case-sensitive.</haxe_doc>
		</remove>
		<exists public="1" set="method">
			<f a="att">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the Element node has a given attribute.
		Attributes are case-sensitive.</haxe_doc>
		</exists>
		<attributes public="1" set="method">
			<f a=""><t path="Iterator"><c path="String"/></t></f>
			<haxe_doc>Returns an [Iterator] on all the attribute names.</haxe_doc>
		</attributes>
		<parent public="1" get="null" set="null">
			<c path="Xml"/>
			<haxe_doc>Returns the parent object in the Xml hierarchy.
		The parent can be [null], an Element or a Document.</haxe_doc>
		</parent>
		<iterator public="1" set="method">
			<f a=""><t path="Iterator"><c path="Xml"/></t></f>
			<haxe_doc>Returns an iterator of all child nodes.
		Only works if the current node is an Element or a Document.</haxe_doc>
		</iterator>
		<elements public="1" set="method">
			<f a=""><t path="Iterator"><c path="Xml"/></t></f>
			<haxe_doc>Returns an iterator of all child nodes which are Elements.
		Only works if the current node is an Element or a Document.</haxe_doc>
		</elements>
		<elementsNamed public="1" set="method">
			<f a="name">
				<c path="String"/>
				<t path="Iterator"><c path="Xml"/></t>
			</f>
			<haxe_doc>Returns an iterator of all child nodes which are Elements with the given nodeName.
		Only works if the current node is an Element or a Document.</haxe_doc>
		</elementsNamed>
		<firstChild public="1" set="method">
			<f a=""><c path="Xml"/></f>
			<haxe_doc>Returns the first child node.</haxe_doc>
		</firstChild>
		<firstElement public="1" set="method">
			<f a=""><c path="Xml"/></f>
			<haxe_doc>Returns the first child node which is an Element.</haxe_doc>
		</firstElement>
		<addChild public="1" set="method">
			<f a="x">
				<c path="Xml"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds a child node to the Document or Element.
		One node can only be inside one given node which is indicated by the [parent] property.</haxe_doc>
		</addChild>
		<removeChild public="1" set="method">
			<f a="x">
				<c path="Xml"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes a child from the Document or Element.
		Returns true if the child was successfuly removed.</haxe_doc>
		</removeChild>
		<insertChild public="1" set="method">
			<f a="x:pos">
				<c path="Xml"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Inserts a child at the given position among the other childs.</haxe_doc>
		</insertChild>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String representation of the Xml node.</haxe_doc>
		</toString>
		<haxe_doc>The standard Xml class and parsing.
	More API to manipulate XML are available in the [haxe.xml] package.</haxe_doc>
		<meta><m n=":reallyUsed"/></meta>
	</class>
	<class path="haxe.io.Output" params="" file="D:\Projects\haxe\std/haxe/io/Output.hx">
		<LN2 line="31" static="1"><x path="Float"/></LN2>
		<bigEndian public="1" set="accessor">
			<x path="Bool"/>
			<haxe_doc>Endianness (word byte order) used when writing numbers.

		If `true`, big-endian is used, otherwise `little-endian` is used.</haxe_doc>
		</bigEndian>
		<writeByte public="1" set="method" line="47">
			<f a="c">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write one byte.</haxe_doc>
		</writeByte>
		<writeBytes public="1" set="method" line="58">
			<f a="s:pos:len">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Write `len` bytes from `s` starting by position specified by `pos`.

		Returns the actual length of written data that can differ from `len`.

		See `writeFullBytes` that tries to write the exact amount of specified bytes.</haxe_doc>
		</writeBytes>
		<close public="1" set="method" line="92">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Close the output.

		Behaviour while writing after calling this method is unspecified.</haxe_doc>
		</close>
		<set_bigEndian set="method" line="95"><f a="b">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_bigEndian>
		<write public="1" set="method" line="105">
			<f a="s">
				<c path="haxe.io.Bytes"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write all bytes stored in `s`.</haxe_doc>
		</write>
		<writeFullBytes public="1" set="method" line="121">
			<f a="s:pos:len">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `len` bytes from `s` starting by position specified by `pos`.

		Unlike `writeBytes`, this method tries to write the exact `len` amount of bytes.</haxe_doc>
		</writeFullBytes>
		<writeFloat public="1" set="method" line="134">
			<f a="x">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 32-bit floating point number.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeFloat>
		<writeDouble public="1" set="method" line="193">
			<f a="x">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 64-bit double-precision floating point number.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeDouble>
		<writeInt8 public="1" set="method" line="273">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 8-bit signed integer.</haxe_doc>
		</writeInt8>
		<writeInt16 public="1" set="method" line="284">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 16-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeInt16>
		<writeUInt16 public="1" set="method" line="294">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 16-bit unsigned integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeUInt16>
		<writeInt24 public="1" set="method" line="310">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 24-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeInt24>
		<writeUInt24 public="1" set="method" line="320">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 24-bit unsigned integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeUInt24>
		<writeInt32 public="1" set="method" line="338">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 32-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeInt32>
		<prepare public="1" set="method" line="359">
			<f a="nbytes">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Inform that we are about to write at least `nbytes` bytes.

		The underlying implementation can allocate proper working space depending
		on this information, or simply ignore it. This is not a mandatory call
		but a tip and is only used in some specific cases.</haxe_doc>
		</prepare>
		<writeString public="1" set="method" line="393">
			<f a="s">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `s` string.</haxe_doc>
		</writeString>
		<haxe_doc>An Output is an abstract write. A specific output implementation will only
	have to override the [writeByte] and maybe the [write], [flush] and [close]
	methods. See [File.write] and [String.write] for two ways of creating an
	Output.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":reallyUsed"/>
		</meta>
	</class>
	<class path="format.abc._Context.NullOutput" params="" file="format/abc/Context.hx" private="1" module="format.abc.Context">
		<extends path="haxe.io.Output"/>
		<n public="1"><x path="Int"/></n>
		<writeByte public="1" set="method" line="39" override="1"><f a="c">
	<x path="Int"/>
	<x path="Void"/>
</f></writeByte>
		<writeBytes public="1" set="method" line="43" override="1"><f a="b:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></writeBytes>
		<new public="1" set="method" line="35"><f a=""><x path="Void"/></f></new>
		<meta><m n=":reallyUsed"/></meta>
	</class>
	<class path="format.abc.Context" params="" file="format/abc/Context.hx">
		<data><c path="format.abc.ABCData"/></data>
		<hstrings><x path="Map">
	<c path="String"/>
	<x path="Int"/>
</x></hstrings>
		<curClass><t path="format.abc.ClassDef"/></curClass>
		<curFunction><a>
	<ops><c path="Array"><e path="format.abc.OpCode"/></c></ops>
	<f><t path="format.abc.Function"/></f>
</a></curFunction>
		<classes><c path="Array"><t path="format.abc.Field"/></c></classes>
		<init><a>
	<ops><c path="Array"><e path="format.abc.OpCode"/></c></ops>
	<f><t path="format.abc.Function"/></f>
</a></init>
		<fieldSlot><x path="Int"/></fieldSlot>
		<registers><c path="Array"><x path="Bool"/></c></registers>
		<bytepos><c path="format.abc._Context.NullOutput"/></bytepos>
		<opw><c path="format.abc.OpWriter"/></opw>
		<emptyString public="1" set="null"><e path="format.abc.Index"><c path="String"/></e></emptyString>
		<nsPublic public="1" set="null"><e path="format.abc.Index"><e path="format.abc.Namespace"/></e></nsPublic>
		<arrayProp public="1" set="null"><e path="format.abc.Index"><e path="format.abc.Name"/></e></arrayProp>
		<int public="1" set="method" line="95"><f a="i">
	<x path="Int"/>
	<e path="format.abc.Index"><x path="Int"/></e>
</f></int>
		<uint public="1" set="method" line="99"><f a="i">
	<x path="Int"/>
	<e path="format.abc.Index"><x path="Int"/></e>
</f></uint>
		<float public="1" set="method" line="103"><f a="f">
	<x path="Float"/>
	<e path="format.abc.Index"><x path="Float"/></e>
</f></float>
		<string public="1" set="method" line="107"><f a="s">
	<c path="String"/>
	<e path="format.abc.Index"><c path="String"/></e>
</f></string>
		<namespace public="1" set="method" line="117"><f a="n">
	<e path="format.abc.Namespace"/>
	<e path="format.abc.Index"><e path="format.abc.Namespace"/></e>
</f></namespace>
		<nsset public="1" set="method" line="121"><f a="ns">
	<t path="format.abc.NamespaceSet"/>
	<e path="format.abc.Index"><t path="format.abc.NamespaceSet"/></e>
</f></nsset>
		<name public="1" set="method" line="139"><f a="n">
	<e path="format.abc.Name"/>
	<e path="format.abc.Index"><e path="format.abc.Name"/></e>
</f></name>
		<type public="1" set="method" line="143"><f a="path">
	<c path="String"/>
	<t path="Null"><e path="format.abc.Index"><e path="format.abc.Name"/></e></t>
</f></type>
		<property public="1" set="method" line="155"><f a="pname:?ns" v=":null">
	<c path="String"/>
	<e path="format.abc.Index"><e path="format.abc.Namespace"/></e>
	<e path="format.abc.Index"><e path="format.abc.Name"/></e>
</f></property>
		<methodType public="1" set="method" line="163"><f a="m">
	<t path="format.abc.MethodType"/>
	<e path="format.abc.Index"><t path="format.abc.MethodType"/></e>
</f></methodType>
		<lookup params="T" set="method" line="168"><f a="arr:n">
	<c path="Array"><c path="lookup.T"/></c>
	<c path="lookup.T"/>
	<e path="format.abc.Index"><c path="lookup.T"/></e>
</f></lookup>
		<elookup params="T" set="method" line="176"><f a="arr:n">
	<c path="Array"><c path="elookup.T"/></c>
	<c path="elookup.T"/>
	<e path="format.abc.Index"><c path="elookup.T"/></e>
</f></elookup>
		<getData public="1" set="method" line="184"><f a=""><c path="format.abc.ABCData"/></f></getData>
		<beginFunction set="method" line="188"><f a="args:ret:?extra" v="::null">
	<c path="Array"><t path="Null"><t path="format.abc.IName"/></t></c>
	<t path="Null"><t path="format.abc.IName"/></t>
	<t path="format.abc.MethodTypeExtra"/>
	<e path="format.abc.Index"><t path="format.abc.Function"/></e>
</f></beginFunction>
		<endFunction set="method" line="208"><f a=""><x path="Void"/></f></endFunction>
		<allocRegister public="1" set="method" line="221"><f a=""><x path="Int"/></f></allocRegister>
		<freeRegister public="1" set="method" line="232"><f a="i">
	<x path="Int"/>
	<x path="Void"/>
</f></freeRegister>
		<beginClass public="1" set="method" line="236"><f a="path">
	<c path="String"/>
	<t path="format.abc.ClassDef"/>
</f></beginClass>
		<endClass public="1" set="method" line="275"><f a=""><x path="Void"/></f></endClass>
		<beginMethod public="1" set="method" line="293"><f a="mname:targs:tret:?isStatic:?isOverride:?isFinal" v=":::null:null:null">
	<c path="String"/>
	<c path="Array"><t path="Null"><t path="format.abc.IName"/></t></c>
	<t path="Null"><t path="format.abc.IName"/></t>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<t path="format.abc.Function"/>
</f></beginMethod>
		<beginConstructor public="1" set="method" line="305"><f a="args">
	<c path="Array"><t path="Null"><t path="format.abc.IName"/></t></c>
	<t path="format.abc.Function"/>
</f></beginConstructor>
		<endMethod public="1" set="method" line="311"><f a=""><x path="Void"/></f></endMethod>
		<defineField public="1" set="method" line="315"><f a="fname:t:?isStatic" v="::null">
	<c path="String"/>
	<t path="Null"><t path="format.abc.IName"/></t>
	<x path="Bool"/>
	<t path="format.abc.Slot"/>
</f></defineField>
		<op public="1" set="method" line="327"><f a="o">
	<e path="format.abc.OpCode"/>
	<x path="Void"/>
</f></op>
		<ops public="1" set="method" line="332"><f a="ops">
	<c path="Array"><e path="format.abc.OpCode"/></c>
	<x path="Void"/>
</f></ops>
		<backwardJump public="1" set="method" line="337"><f a=""><f a="jcond">
	<e path="format.abc.JumpStyle"/>
	<x path="Void"/>
</f></f></backwardJump>
		<jump public="1" set="method" line="346"><f a="jcond">
	<e path="format.abc.JumpStyle"/>
	<f a=""><x path="Void"/></f>
</f></jump>
		<finalize public="1" set="method" line="357"><f a=""><x path="Void"/></f></finalize>
		<new public="1" set="method" line="67"><f a=""><x path="Void"/></f></new>
	</class>
	<enum path="format.abc.Index" params="T" file="format/abc/Data.hx" module="format.abc.Data"><Idx a="v"><x path="Int"/></Idx></enum>
	<enum path="format.abc.Namespace" params="" file="format/abc/Data.hx" module="format.abc.Data">
		<NPrivate a="ns"><e path="format.abc.Index"><c path="String"/></e></NPrivate>
		<NNamespace a="ns"><e path="format.abc.Index"><c path="String"/></e></NNamespace>
		<NPublic a="ns"><e path="format.abc.Index"><c path="String"/></e></NPublic>
		<NInternal a="ns"><e path="format.abc.Index"><c path="String"/></e></NInternal>
		<NProtected a="ns"><e path="format.abc.Index"><c path="String"/></e></NProtected>
		<NExplicit a="ns"><e path="format.abc.Index"><c path="String"/></e></NExplicit>
		<NStaticProtected a="ns"><e path="format.abc.Index"><c path="String"/></e></NStaticProtected>
	</enum>
	<typedef path="format.abc.NamespaceSet" params="" file="format/abc/Data.hx" module="format.abc.Data"><c path="Array"><e path="format.abc.Index"><e path="format.abc.Namespace"/></e></c></typedef>
	<enum path="format.abc.Name" params="" file="format/abc/Data.hx" module="format.abc.Data">
		<NName a="name:ns">
			<e path="format.abc.Index"><c path="String"/></e>
			<e path="format.abc.Index"><e path="format.abc.Namespace"/></e>
		</NName>
		<NMulti a="name:ns">
			<e path="format.abc.Index"><c path="String"/></e>
			<e path="format.abc.Index"><t path="format.abc.NamespaceSet"/></e>
		</NMulti>
		<NRuntime a="name"><e path="format.abc.Index"><c path="String"/></e></NRuntime>
		<NRuntimeLate/>
		<NMultiLate a="nset"><e path="format.abc.Index"><t path="format.abc.NamespaceSet"/></e></NMultiLate>
		<NAttrib a="n"><e path="format.abc.Name"/></NAttrib>
		<NParams a="n:params">
			<t path="format.abc.IName"/>
			<c path="Array"><t path="format.abc.IName"/></c>
		</NParams>
	</enum>
	<typedef path="format.abc.MethodType" params="" file="format/abc/Data.hx" module="format.abc.Data"><a>
	<ret><t path="Null"><t path="format.abc.IName"/></t></ret>
	<extra><t path="Null"><t path="format.abc.MethodTypeExtra"/></t></extra>
	<args><c path="Array"><t path="Null"><t path="format.abc.IName"/></t></c></args>
</a></typedef>
	<typedef path="format.abc.MethodTypeExtra" params="" file="format/abc/Data.hx" module="format.abc.Data"><a>
	<variableArgs><x path="Bool"/></variableArgs>
	<usesDXNS><x path="Bool"/></usesDXNS>
	<unused><x path="Bool"/></unused>
	<paramNames><t path="Null"><c path="Array"><t path="Null"><e path="format.abc.Index"><c path="String"/></e></t></c></t></paramNames>
	<newBlock><x path="Bool"/></newBlock>
	<native><x path="Bool"/></native>
	<defaultParameters><t path="Null"><c path="Array"><e path="format.abc.Value"/></c></t></defaultParameters>
	<debugName><t path="Null"><e path="format.abc.Index"><c path="String"/></e></t></debugName>
	<argumentsDefined><x path="Bool"/></argumentsDefined>
</a></typedef>
	<enum path="format.abc.Value" params="" file="format/abc/Data.hx" module="format.abc.Data">
		<VNull/>
		<VBool a="b"><x path="Bool"/></VBool>
		<VString a="i"><e path="format.abc.Index"><c path="String"/></e></VString>
		<VInt a="i"><e path="format.abc.Index"><x path="Int"/></e></VInt>
		<VUInt a="i"><e path="format.abc.Index"><x path="Int"/></e></VUInt>
		<VFloat a="f"><e path="format.abc.Index"><x path="Float"/></e></VFloat>
		<VNamespace a="kind:ns">
			<x path="Int"/>
			<e path="format.abc.Index"><e path="format.abc.Namespace"/></e>
		</VNamespace>
	</enum>
	<typedef path="format.abc.TryCatch" params="" file="format/abc/Data.hx" module="format.abc.Data"><a>
	<variable><t path="Null"><t path="format.abc.IName"/></t></variable>
	<type><t path="Null"><t path="format.abc.IName"/></t></type>
	<start><x path="Int"/></start>
	<handle><x path="Int"/></handle>
	<end><x path="Int"/></end>
</a></typedef>
	<typedef path="format.abc.Function" params="" file="format/abc/Data.hx" module="format.abc.Data"><a>
	<type><e path="format.abc.Index"><t path="format.abc.MethodType"/></e></type>
	<trys><c path="Array"><t path="format.abc.TryCatch"/></c></trys>
	<nRegs><x path="Int"/></nRegs>
	<maxStack><x path="Int"/></maxStack>
	<maxScope><x path="Int"/></maxScope>
	<locals><c path="Array"><t path="format.abc.Field"/></c></locals>
	<initScope><x path="Int"/></initScope>
	<code><c path="haxe.io.Bytes"/></code>
</a></typedef>
	<typedef path="format.abc.Field" params="" file="format/abc/Data.hx" module="format.abc.Data"><a>
	<slot><t path="format.abc.Slot"/></slot>
	<name><t path="format.abc.IName"/></name>
	<metadatas><t path="Null"><c path="Array"><e path="format.abc.Index"><t path="format.abc.Metadata"/></e></c></t></metadatas>
	<kind><e path="format.abc.FieldKind"/></kind>
</a></typedef>
	<enum path="format.abc.MethodKind" params="" file="format/abc/Data.hx" module="format.abc.Data">
		<KNormal/>
		<KGetter/>
		<KSetter/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<enum path="format.abc.FieldKind" params="" file="format/abc/Data.hx" module="format.abc.Data">
		<FVar a="?type:?value:?const">
			<t path="format.abc.IName"/>
			<e path="format.abc.Value"/>
			<x path="Bool"/>
		</FVar>
		<FMethod a="type:k:?isFinal:?isOverride">
			<e path="format.abc.Index"><t path="format.abc.MethodType"/></e>
			<e path="format.abc.MethodKind"/>
			<x path="Bool"/>
			<x path="Bool"/>
		</FMethod>
		<FClass a="c"><e path="format.abc.Index"><t path="format.abc.ClassDef"/></e></FClass>
		<FFunction a="f"><e path="format.abc.Index"><t path="format.abc.MethodType"/></e></FFunction>
	</enum>
	<typedef path="format.abc.ClassDef" params="" file="format/abc/Data.hx" module="format.abc.Data"><a>
	<superclass><t path="Null"><t path="format.abc.IName"/></t></superclass>
	<statics><e path="format.abc.Index"><t path="format.abc.MethodType"/></e></statics>
	<staticFields><c path="Array"><t path="format.abc.Field"/></c></staticFields>
	<namespace><t path="Null"><e path="format.abc.Index"><e path="format.abc.Namespace"/></e></t></namespace>
	<name><t path="format.abc.IName"/></name>
	<isSealed><x path="Bool"/></isSealed>
	<isInterface><x path="Bool"/></isInterface>
	<isFinal><x path="Bool"/></isFinal>
	<interfaces><c path="Array"><t path="format.abc.IName"/></c></interfaces>
	<fields><c path="Array"><t path="format.abc.Field"/></c></fields>
	<constructor><e path="format.abc.Index"><t path="format.abc.MethodType"/></e></constructor>
</a></typedef>
	<typedef path="format.abc.Metadata" params="" file="format/abc/Data.hx" module="format.abc.Data"><a>
	<name><e path="format.abc.Index"><c path="String"/></e></name>
	<data><c path="Array"><a>
	<v><e path="format.abc.Index"><c path="String"/></e></v>
	<n><t path="Null"><e path="format.abc.Index"><c path="String"/></e></t></n>
</a></c></data>
</a></typedef>
	<typedef path="format.abc.Init" params="" file="format/abc/Data.hx" module="format.abc.Data"><a>
	<method><e path="format.abc.Index"><t path="format.abc.MethodType"/></e></method>
	<fields><c path="Array"><t path="format.abc.Field"/></c></fields>
</a></typedef>
	<class path="format.abc.ABCData" params="" file="format/abc/Data.hx" module="format.abc.Data">
		<ints public="1"><c path="Array"><x path="Int"/></c></ints>
		<uints public="1"><c path="Array"><x path="Int"/></c></uints>
		<floats public="1"><c path="Array"><x path="Float"/></c></floats>
		<strings public="1"><c path="Array"><c path="String"/></c></strings>
		<namespaces public="1"><c path="Array"><e path="format.abc.Namespace"/></c></namespaces>
		<nssets public="1"><c path="Array"><t path="format.abc.NamespaceSet"/></c></nssets>
		<names public="1"><c path="Array"><e path="format.abc.Name"/></c></names>
		<methodTypes public="1"><c path="Array"><t path="format.abc.MethodType"/></c></methodTypes>
		<metadatas public="1"><c path="Array"><t path="format.abc.Metadata"/></c></metadatas>
		<classes public="1"><c path="Array"><t path="format.abc.ClassDef"/></c></classes>
		<inits public="1"><c path="Array"><t path="format.abc.Init"/></c></inits>
		<functions public="1"><c path="Array"><t path="format.abc.Function"/></c></functions>
		<get public="1" params="T" set="method" line="161"><f a="t:i">
	<c path="Array"><c path="get.T"/></c>
	<e path="format.abc.Index"><c path="get.T"/></e>
	<c path="get.T"/>
</f></get>
		<new public="1" set="method" line="165"><f a=""><x path="Void"/></f></new>
		<meta><m n=":reallyUsed"/></meta>
	</class>
	<typedef path="format.abc.IName" params="" file="format/abc/Data.hx" module="format.abc.Data"><e path="format.abc.Index"><e path="format.abc.Name"/></e></typedef>
	<typedef path="format.abc.Slot" params="" file="format/abc/Data.hx" module="format.abc.Data"><x path="Int"/></typedef>
	<typedef path="format.abc.Register" params="" file="format/abc/Data.hx" module="format.abc.Data"><x path="Int"/></typedef>
	<enum path="format.abc.OpCode" params="" file="format/abc/Data.hx" module="format.abc.Data">
		<OBreakPoint/>
		<ONop/>
		<OThrow/>
		<OGetSuper a="v"><t path="format.abc.IName"/></OGetSuper>
		<OSetSuper a="v"><t path="format.abc.IName"/></OSetSuper>
		<ODxNs a="v"><e path="format.abc.Index"><c path="String"/></e></ODxNs>
		<ODxNsLate/>
		<ORegKill a="r"><t path="format.abc.Register"/></ORegKill>
		<OLabel/>
		<OJump a="j:delta">
			<e path="format.abc.JumpStyle"/>
			<x path="Int"/>
		</OJump>
		<OSwitch a="def:deltas">
			<x path="Int"/>
			<c path="Array"><x path="Int"/></c>
		</OSwitch>
		<OPushWith/>
		<OPopScope/>
		<OForIn/>
		<OHasNext/>
		<ONull/>
		<OUndefined/>
		<OForEach/>
		<OSmallInt a="v"><x path="Int"/></OSmallInt>
		<OInt a="v"><x path="Int"/></OInt>
		<OTrue/>
		<OFalse/>
		<ONaN/>
		<OPop/>
		<ODup/>
		<OSwap/>
		<OString a="v"><e path="format.abc.Index"><c path="String"/></e></OString>
		<OIntRef a="v"><e path="format.abc.Index"><x path="Int"/></e></OIntRef>
		<OUIntRef a="v"><e path="format.abc.Index"><x path="Int"/></e></OUIntRef>
		<OFloat a="v"><e path="format.abc.Index"><x path="Float"/></e></OFloat>
		<OScope/>
		<ONamespace a="v"><e path="format.abc.Index"><e path="format.abc.Namespace"/></e></ONamespace>
		<ONext a="r1:r2">
			<t path="format.abc.Register"/>
			<t path="format.abc.Register"/>
		</ONext>
		<OFunction a="f"><e path="format.abc.Index"><t path="format.abc.MethodType"/></e></OFunction>
		<OCallStack a="nargs"><x path="Int"/></OCallStack>
		<OConstruct a="nargs"><x path="Int"/></OConstruct>
		<OCallMethod a="slot:nargs">
			<t path="format.abc.Slot"/>
			<x path="Int"/>
		</OCallMethod>
		<OCallStatic a="meth:nargs">
			<e path="format.abc.Index"><t path="format.abc.MethodType"/></e>
			<x path="Int"/>
		</OCallStatic>
		<OCallSuper a="name:nargs">
			<t path="format.abc.IName"/>
			<x path="Int"/>
		</OCallSuper>
		<OCallProperty a="name:nargs">
			<t path="format.abc.IName"/>
			<x path="Int"/>
		</OCallProperty>
		<ORetVoid/>
		<ORet/>
		<OConstructSuper a="nargs"><x path="Int"/></OConstructSuper>
		<OConstructProperty a="name:nargs">
			<t path="format.abc.IName"/>
			<x path="Int"/>
		</OConstructProperty>
		<OCallPropLex a="name:nargs">
			<t path="format.abc.IName"/>
			<x path="Int"/>
		</OCallPropLex>
		<OCallSuperVoid a="name:nargs">
			<t path="format.abc.IName"/>
			<x path="Int"/>
		</OCallSuperVoid>
		<OCallPropVoid a="name:nargs">
			<t path="format.abc.IName"/>
			<x path="Int"/>
		</OCallPropVoid>
		<OApplyType a="nargs"><x path="Int"/></OApplyType>
		<OObject a="nfields"><x path="Int"/></OObject>
		<OArray a="nvalues"><x path="Int"/></OArray>
		<ONewBlock/>
		<OClassDef a="c"><e path="format.abc.Index"><t path="format.abc.ClassDef"/></e></OClassDef>
		<OGetDescendants a="c"><t path="format.abc.IName"/></OGetDescendants>
		<OCatch a="c"><x path="Int"/></OCatch>
		<OFindPropStrict a="p"><t path="format.abc.IName"/></OFindPropStrict>
		<OFindProp a="p"><t path="format.abc.IName"/></OFindProp>
		<OFindDefinition a="d"><t path="format.abc.IName"/></OFindDefinition>
		<OGetLex a="p"><t path="format.abc.IName"/></OGetLex>
		<OSetProp a="p"><t path="format.abc.IName"/></OSetProp>
		<OReg a="r"><t path="format.abc.Register"/></OReg>
		<OSetReg a="r"><t path="format.abc.Register"/></OSetReg>
		<OGetGlobalScope/>
		<OGetScope a="n"><x path="Int"/></OGetScope>
		<OGetProp a="p"><t path="format.abc.IName"/></OGetProp>
		<OInitProp a="p"><t path="format.abc.IName"/></OInitProp>
		<ODeleteProp a="p"><t path="format.abc.IName"/></ODeleteProp>
		<OGetSlot a="s"><t path="format.abc.Slot"/></OGetSlot>
		<OSetSlot a="s"><t path="format.abc.Slot"/></OSetSlot>
		<OToString/>
		<OToXml/>
		<OToXmlAttr/>
		<OToInt/>
		<OToUInt/>
		<OToNumber/>
		<OToBool/>
		<OToObject/>
		<OCheckIsXml/>
		<OCast a="t"><t path="format.abc.IName"/></OCast>
		<OAsAny/>
		<OAsString/>
		<OAsType a="t"><t path="format.abc.IName"/></OAsType>
		<OAsObject/>
		<OIncrReg a="r"><t path="format.abc.Register"/></OIncrReg>
		<ODecrReg a="r"><t path="format.abc.Register"/></ODecrReg>
		<OTypeof/>
		<OInstanceOf/>
		<OIsType a="t"><t path="format.abc.IName"/></OIsType>
		<OIncrIReg a="r"><t path="format.abc.Register"/></OIncrIReg>
		<ODecrIReg a="r"><t path="format.abc.Register"/></ODecrIReg>
		<OThis/>
		<OSetThis/>
		<ODebugReg a="name:r:line">
			<e path="format.abc.Index"><c path="String"/></e>
			<t path="format.abc.Register"/>
			<x path="Int"/>
		</ODebugReg>
		<ODebugLine a="line"><x path="Int"/></ODebugLine>
		<ODebugFile a="file"><e path="format.abc.Index"><c path="String"/></e></ODebugFile>
		<OBreakPointLine a="n"><x path="Int"/></OBreakPointLine>
		<OTimestamp/>
		<OOp a="op"><e path="format.abc.Operation"/></OOp>
		<OUnknown a="byte"><x path="Int"/></OUnknown>
	</enum>
	<enum path="format.abc.JumpStyle" params="" file="format/abc/Data.hx" module="format.abc.Data">
		<JNotLt/>
		<JNotLte/>
		<JNotGt/>
		<JNotGte/>
		<JAlways/>
		<JTrue/>
		<JFalse/>
		<JEq/>
		<JNeq/>
		<JLt/>
		<JLte/>
		<JGt/>
		<JGte/>
		<JPhysEq/>
		<JPhysNeq/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<enum path="format.abc.Operation" params="" file="format/abc/Data.hx" module="format.abc.Data">
		<OpAs/>
		<OpNeg/>
		<OpIncr/>
		<OpDecr/>
		<OpNot/>
		<OpBitNot/>
		<OpAdd/>
		<OpSub/>
		<OpMul/>
		<OpDiv/>
		<OpMod/>
		<OpShl/>
		<OpShr/>
		<OpUShr/>
		<OpAnd/>
		<OpOr/>
		<OpXor/>
		<OpEq/>
		<OpPhysEq/>
		<OpLt/>
		<OpLte/>
		<OpGt/>
		<OpGte/>
		<OpIs/>
		<OpIn/>
		<OpIIncr/>
		<OpIDecr/>
		<OpINeg/>
		<OpIAdd/>
		<OpISub/>
		<OpIMul/>
		<OpMemGet8/>
		<OpMemGet16/>
		<OpMemGet32/>
		<OpMemGetFloat/>
		<OpMemGetDouble/>
		<OpMemSet8/>
		<OpMemSet16/>
		<OpMemSet32/>
		<OpMemSetFloat/>
		<OpMemSetDouble/>
		<OpSign1/>
		<OpSign8/>
		<OpSign16/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<class path="format.abc.OpReader" params="" file="format/abc/OpReader.hx">
		<decode public="1" set="method" line="478" static="1"><f a="i">
	<c path="haxe.io.Input"/>
	<c path="Array"><e path="format.abc.OpCode"/></c>
</f></decode>
		<i public="1"><c path="haxe.io.Input"/></i>
		<readInt public="1" set="method" line="42"><f a=""><x path="Int"/></f></readInt>
		<readIndex params="T" get="inline" set="null" line="65"><f a=""><e path="format.abc.Index"><c path="readIndex.T"/></e></f></readIndex>
		<readInt32 public="1" set="method" line="70"><f a=""><x path="Int"/></f></readInt32>
		<reg get="inline" set="null" line="117"><f a=""><x path="Int"/></f></reg>
		<jmp get="inline" set="null" line="121"><f a="j">
	<e path="format.abc.JumpStyle"/>
	<e path="format.abc.OpCode"/>
</f></jmp>
		<readOp public="1" set="method" line="125"><f a="op">
	<x path="Int"/>
	<e path="format.abc.OpCode"/>
</f></readOp>
		<new public="1" set="method" line="38"><f a="i">
	<c path="haxe.io.Input"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":reallyUsed"/></meta>
	</class>
	<class path="format.abc.OpWriter" params="" file="format/abc/OpWriter.hx">
		<o public="1"><c path="haxe.io.Output"/></o>
		<writeInt public="1" set="method" line="39"><f a="n">
	<x path="Int"/>
	<x path="Void"/>
</f></writeInt>
		<writeInt32 public="1" set="method" line="65"><f a="n">
	<x path="Int"/>
	<x path="Void"/>
</f></writeInt32>
		<int set="method" line="117"><f a="i">
	<x path="Int"/>
	<x path="Void"/>
</f></int>
		<b get="inline" set="null" line="121"><f a="v">
	<x path="Int"/>
	<x path="Void"/>
</f></b>
		<reg set="method" line="125"><f a="v">
	<x path="Int"/>
	<x path="Void"/>
</f></reg>
		<idx set="method" line="129"><f a="i">
	<e path="format.abc.Index"><d/></e>
	<x path="Void"/>
</f></idx>
		<jumpCode set="method" line="135"><f a="j">
	<e path="format.abc.JumpStyle"/>
	<x path="Int"/>
</f></jumpCode>
		<operationCode set="method" line="155"><f a="o">
	<e path="format.abc.Operation"/>
	<x path="Int"/>
</f></operationCode>
		<write public="1" set="method" line="204"><f a="op">
	<e path="format.abc.OpCode"/>
	<x path="Void"/>
</f></write>
		<new public="1" set="method" line="35"><f a="o">
	<c path="haxe.io.Output"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":reallyUsed"/></meta>
	</class>
	<class path="format.abc.Reader" params="" file="format/abc/Reader.hx">
		<i><c path="haxe.io.Input"/></i>
		<opr><c path="format.abc.OpReader"/></opr>
		<readInt get="inline" set="null" line="41"><f a=""><x path="Int"/></f></readInt>
		<readIndex params="T" get="inline" set="null" line="45"><f a=""><e path="format.abc.Index"><c path="readIndex.T"/></e></f></readIndex>
		<readIndexOpt params="T" set="method" line="49"><f a=""><t path="Null"><e path="format.abc.Index"><c path="readIndexOpt.T"/></e></t></f></readIndexOpt>
		<readList params="T" set="method" line="54"><f a="f">
	<f a=""><c path="readList.T"/></f>
	<c path="Array"><c path="readList.T"/></c>
</f></readList>
		<readList2 params="T" set="method" line="64"><f a="f">
	<f a=""><c path="readList2.T"/></f>
	<c path="Array"><c path="readList2.T"/></c>
</f></readList2>
		<readString set="method" line="72"><f a=""><c path="String"/></f></readString>
		<readNamespace set="method" line="76"><f a=""><e path="format.abc.Namespace"/></f></readNamespace>
		<readNsSet set="method" line="91"><f a=""><t path="format.abc.NamespaceSet"/></f></readNsSet>
		<readName set="method" line="98"><f a="?k" v="-1">
	<x path="Int"/>
	<e path="format.abc.Name"/>
</f></readName>
		<readValue set="method" line="132"><f a="extra">
	<x path="Bool"/>
	<e path="format.abc.Value"/>
</f></readValue>
		<readMethodType set="method" line="152"><f a=""><t path="format.abc.MethodType"/></f></readMethodType>
		<readMetadata set="method" line="191"><f a=""><a>
	<name><e path="format.abc.Index"><c path="String"/></e></name>
	<data><c path="Array"><a>
	<v><e path="format.abc.Index"><c path="String"/></e></v>
	<n><t path="Null"><e path="format.abc.Index"><c path="String"/></e></t></n>
</a></c></data>
</a></f></readMetadata>
		<readField set="method" line="203"><f a=""><t path="format.abc.Field"/></f></readField>
		<readClass set="method" line="242"><f a=""><t path="format.abc.ClassDef"/></f></readClass>
		<readInit set="method" line="266"><f a=""><t path="format.abc.Init"/></f></readInit>
		<readTryCatch set="method" line="273"><f a=""><t path="format.abc.TryCatch"/></f></readTryCatch>
		<readFunction set="method" line="283"><f a=""><t path="format.abc.Function"/></f></readFunction>
		<read public="1" set="method" line="305"><f a=""><c path="format.abc.ABCData"/></f></read>
		<new public="1" set="method" line="36"><f a="i">
	<c path="haxe.io.Input"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="format.abc.Writer" params="" file="format/abc/Writer.hx">
		<o><c path="haxe.io.Output"/></o>
		<opw><c path="format.abc.OpWriter"/></opw>
		<beginTag set="method" line="41"><f a="id:len">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></beginTag>
		<writeInt get="inline" set="null" line="53"><f a="n">
	<x path="Int"/>
	<x path="Void"/>
</f></writeInt>
		<writeUInt get="inline" set="null" line="57"><f a="n">
	<x path="Int"/>
	<x path="Void"/>
</f></writeUInt>
		<writeList params="T" set="method" line="61"><f a="a:write">
	<c path="Array"><c path="writeList.T"/></c>
	<f a="">
		<c path="writeList.T"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></writeList>
		<writeList2 params="T" set="method" line="71"><f a="a:write">
	<c path="Array"><c path="writeList2.T"/></c>
	<f a="">
		<c path="writeList2.T"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></writeList2>
		<writeString set="method" line="77"><f a="s">
	<c path="String"/>
	<x path="Void"/>
</f></writeString>
		<writeIndex set="method" line="82"><f a="i">
	<e path="format.abc.Index"><d/></e>
	<x path="Void"/>
</f></writeIndex>
		<writeIndexOpt set="method" line="88"><f a="i">
	<e path="format.abc.Index"><d/></e>
	<x path="Void"/>
</f></writeIndexOpt>
		<writeNamespace set="method" line="96"><f a="n">
	<e path="format.abc.Namespace"/>
	<x path="Void"/>
</f></writeNamespace>
		<writeNsSet set="method" line="122"><f a="n">
	<t path="format.abc.NamespaceSet"/>
	<x path="Void"/>
</f></writeNsSet>
		<writeNameByte get="inline" set="null" line="128"><f a="k:n">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></writeNameByte>
		<writeName set="method" line="132"><f a="?k:n" v="-1:">
	<x path="Int"/>
	<e path="format.abc.Name"/>
	<x path="Void"/>
</f></writeName>
		<writeValue set="method" line="168"><f a="extra:v">
	<x path="Bool"/>
	<e path="format.abc.Value"/>
	<x path="Void"/>
</f></writeValue>
		<writeField set="method" line="200"><f a="f">
	<t path="format.abc.Field"/>
	<x path="Void"/>
</f></writeField>
		<writeMethodType set="method" line="234"><f a="m">
	<t path="format.abc.MethodType"/>
	<x path="Void"/>
</f></writeMethodType>
		<writeMetadata set="method" line="268"><f a="m">
	<t path="format.abc.Metadata"/>
	<x path="Void"/>
</f></writeMetadata>
		<writeClass set="method" line="277"><f a="c">
	<t path="format.abc.ClassDef"/>
	<x path="Void"/>
</f></writeClass>
		<writeInit set="method" line="293"><f a="i">
	<t path="format.abc.Init"/>
	<x path="Void"/>
</f></writeInit>
		<writeTryCatch set="method" line="298"><f a="t">
	<t path="format.abc.TryCatch"/>
	<x path="Void"/>
</f></writeTryCatch>
		<writeFunction set="method" line="306"><f a="f">
	<t path="format.abc.Function"/>
	<x path="Void"/>
</f></writeFunction>
		<write public="1" set="method" line="318"><f a="d">
	<c path="format.abc.ABCData"/>
	<x path="Void"/>
</f></write>
		<new public="1" set="method" line="36"><f a="o">
	<c path="haxe.io.Output"/>
	<x path="Void"/>
</f></new>
	</class>
	<enum path="format.agal.Opcode" params="" file="format/agal/Data.hx" module="format.agal.Data">
		<OMov a="dst:v">
			<t path="format.agal.Reg"/>
			<t path="format.agal.Reg"/>
		</OMov>
		<OAdd a="dst:a:b">
			<t path="format.agal.Reg"/>
			<t path="format.agal.Reg"/>
			<t path="format.agal.Reg"/>
		</OAdd>
		<OSub a="dst:a:b">
			<t path="format.agal.Reg"/>
			<t path="format.agal.Reg"/>
			<t path="format.agal.Reg"/>
		</OSub>
		<OMul a="dst:a:b">
			<t path="format.agal.Reg"/>
			<t path="format.agal.Reg"/>
			<t path="format.agal.Reg"/>
		</OMul>
		<ODiv a="dst:a:b">
			<t path="format.agal.Reg"/>
			<t path="format.agal.Reg"/>
			<t path="format.agal.Reg"/>
		</ODiv>
		<ORcp a="dst:v">
			<t path="format.agal.Reg"/>
			<t path="format.agal.Reg"/>
		</ORcp>
		<OMin a="dst:a:b">
			<t path="format.agal.Reg"/>
			<t path="format.agal.Reg"/>
			<t path="format.agal.Reg"/>
		</OMin>
		<OMax a="dst:a:b">
			<t path="format.agal.Reg"/>
			<t path="format.agal.Reg"/>
			<t path="format.agal.Reg"/>
		</OMax>
		<OFrc a="dst:v">
			<t path="format.agal.Reg"/>
			<t path="format.agal.Reg"/>
		</OFrc>
		<OSqt a="dst:v">
			<t path="format.agal.Reg"/>
			<t path="format.agal.Reg"/>
		</OSqt>
		<ORsq a="dst:v">
			<t path="format.agal.Reg"/>
			<t path="format.agal.Reg"/>
		</ORsq>
		<OPow a="dst:a:b">
			<t path="format.agal.Reg"/>
			<t path="format.agal.Reg"/>
			<t path="format.agal.Reg"/>
		</OPow>
		<OLog a="dst:v">
			<t path="format.agal.Reg"/>
			<t path="format.agal.Reg"/>
		</OLog>
		<OExp a="dst:v">
			<t path="format.agal.Reg"/>
			<t path="format.agal.Reg"/>
		</OExp>
		<ONrm a="dst:v">
			<t path="format.agal.Reg"/>
			<t path="format.agal.Reg"/>
		</ONrm>
		<OSin a="dst:v">
			<t path="format.agal.Reg"/>
			<t path="format.agal.Reg"/>
		</OSin>
		<OCos a="dst:v">
			<t path="format.agal.Reg"/>
			<t path="format.agal.Reg"/>
		</OCos>
		<OCrs a="dst:a:b">
			<t path="format.agal.Reg"/>
			<t path="format.agal.Reg"/>
			<t path="format.agal.Reg"/>
		</OCrs>
		<ODp3 a="dst:a:b">
			<t path="format.agal.Reg"/>
			<t path="format.agal.Reg"/>
			<t path="format.agal.Reg"/>
		</ODp3>
		<ODp4 a="dst:a:b">
			<t path="format.agal.Reg"/>
			<t path="format.agal.Reg"/>
			<t path="format.agal.Reg"/>
		</ODp4>
		<OAbs a="dst:v">
			<t path="format.agal.Reg"/>
			<t path="format.agal.Reg"/>
		</OAbs>
		<ONeg a="dst:v">
			<t path="format.agal.Reg"/>
			<t path="format.agal.Reg"/>
		</ONeg>
		<OSat a="dst:v">
			<t path="format.agal.Reg"/>
			<t path="format.agal.Reg"/>
		</OSat>
		<OM33 a="dst:a:b">
			<t path="format.agal.Reg"/>
			<t path="format.agal.Reg"/>
			<t path="format.agal.Reg"/>
		</OM33>
		<OM44 a="dst:a:b">
			<t path="format.agal.Reg"/>
			<t path="format.agal.Reg"/>
			<t path="format.agal.Reg"/>
		</OM44>
		<OM34 a="dst:a:b">
			<t path="format.agal.Reg"/>
			<t path="format.agal.Reg"/>
			<t path="format.agal.Reg"/>
		</OM34>
		<ODdx a="dst:v">
			<t path="format.agal.Reg"/>
			<t path="format.agal.Reg"/>
		</ODdx>
		<ODdy a="dst:v">
			<t path="format.agal.Reg"/>
			<t path="format.agal.Reg"/>
		</ODdy>
		<OIfe a="a:b">
			<t path="format.agal.Reg"/>
			<t path="format.agal.Reg"/>
		</OIfe>
		<OIne a="a:b">
			<t path="format.agal.Reg"/>
			<t path="format.agal.Reg"/>
		</OIne>
		<OIfg a="a:b">
			<t path="format.agal.Reg"/>
			<t path="format.agal.Reg"/>
		</OIfg>
		<OIfl a="a:b">
			<t path="format.agal.Reg"/>
			<t path="format.agal.Reg"/>
		</OIfl>
		<OEls/>
		<OEif/>
		<OUnused/>
		<OKil a="v"><t path="format.agal.Reg"/></OKil>
		<OTex a="dst:pt:tex">
			<t path="format.agal.Reg"/>
			<t path="format.agal.Reg"/>
			<t path="format.agal.Tex"/>
		</OTex>
		<OSge a="dst:a:b">
			<t path="format.agal.Reg"/>
			<t path="format.agal.Reg"/>
			<t path="format.agal.Reg"/>
		</OSge>
		<OSlt a="dst:a:b">
			<t path="format.agal.Reg"/>
			<t path="format.agal.Reg"/>
			<t path="format.agal.Reg"/>
		</OSlt>
		<OSgn a="dst:v">
			<t path="format.agal.Reg"/>
			<t path="format.agal.Reg"/>
		</OSgn>
		<OSeq a="dst:a:b">
			<t path="format.agal.Reg"/>
			<t path="format.agal.Reg"/>
			<t path="format.agal.Reg"/>
		</OSeq>
		<OSne a="dst:a:b">
			<t path="format.agal.Reg"/>
			<t path="format.agal.Reg"/>
			<t path="format.agal.Reg"/>
		</OSne>
	</enum>
	<typedef path="format.agal.Reg" params="" file="format/agal/Data.hx" module="format.agal.Data"><a>
	<t><e path="format.agal.RegType"/></t>
	<swiz><t path="format.agal.Swizzle"/></swiz>
	<index><x path="Int"/></index>
	<access><t path="Null"><a>
	<t><e path="format.agal.RegType"/></t>
	<offset><x path="Int"/></offset>
	<comp><e path="format.agal.C"/></comp>
</a></t></access>
</a></typedef>
	<typedef path="format.agal.Swizzle" params="" file="format/agal/Data.hx" module="format.agal.Data"><t path="Null"><c path="Array"><e path="format.agal.C"/></c></t></typedef>
	<enum path="format.agal.C" params="" file="format/agal/Data.hx" module="format.agal.Data">
		<X/>
		<Y/>
		<Z/>
		<W/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<enum path="format.agal.RegType" params="" file="format/agal/Data.hx" module="format.agal.Data">
		<RAttr/>
		<RConst/>
		<RTemp/>
		<ROut/>
		<RVar/>
		<RTexture/>
		<RDepth/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<typedef path="format.agal.Tex" params="" file="format/agal/Data.hx" module="format.agal.Data"><a>
	<index><x path="Int"/></index>
	<flags><t path="Null"><c path="Array"><e path="format.agal.TexFlag"/></c></t></flags>
</a></typedef>
	<enum path="format.agal.TexFlag" params="" file="format/agal/Data.hx" module="format.agal.Data">
		<T2D/>
		<TCube/>
		<T3D/>
		<TMipMapDisable/>
		<TMipMapNearest/>
		<TMipMapLinear/>
		<TWrap/>
		<TClamp/>
		<TClampURepeatV/>
		<TRepeatUClampV/>
		<TFilterNearest/>
		<TFilterLinear/>
		<TFilterAnisotropic2x/>
		<TFilterAnisotropic4x/>
		<TFilterAnisotropic8x/>
		<TFilterAnisotropic16x/>
		<TRgba/>
		<TDxt1/>
		<TDxt5/>
		<TVideo/>
		<TCentroid/>
		<TSingle/>
		<TIgnoreSampler/>
		<TLodBias a="v"><x path="Float"/></TLodBias>
	</enum>
	<typedef path="format.agal.Data" params="" file="format/agal/Data.hx"><a>
	<version>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</version>
	<fragmentShader><x path="Bool"/></fragmentShader>
	<code><c path="Array"><e path="format.agal.Opcode"/></c></code>
</a></typedef>
	<class path="format.agal.Tools" params="" file="format/agal/Tools.hx">
		<getMaxTextures public="1" set="method" line="31" static="1"><f a=""><x path="Int"/></f></getMaxTextures>
		<getMaxOps public="1" set="method" line="35" static="1"><f a="fragment:?version" v=":1">
	<x path="Bool"/>
	<x path="Int"/>
	<x path="Int"/>
</f></getMaxOps>
		<getProps public="1" set="method" line="39" static="1"><f a="r:fragment:?version" v="::1">
	<e path="format.agal.RegType"/>
	<x path="Bool"/>
	<x path="Int"/>
	<a>
		<write><x path="Bool"/></write>
		<read><x path="Bool"/></read>
		<count><x path="Int"/></count>
	</a>
</f></getProps>
		<ofString public="1" set="method" line="51" static="1"><f a="str">
	<c path="String"/>
	<c path="haxe.io.Bytes"/>
</f></ofString>
		<regStr public="1" set="method" line="60" static="1"><f a="r">
	<t path="format.agal.Reg"/>
	<c path="String"/>
</f></regStr>
		<opStr public="1" set="method" line="76" static="1"><f a="op">
	<e path="format.agal.Opcode"/>
	<c path="String"/>
</f></opStr>
		<toString public="1" set="method" line="92" static="1"><f a="d">
	<t path="format.agal.Data"/>
	<c path="String"/>
</f></toString>
		<meta><m n=":reallyUsed"/></meta>
	</class>
	<class path="format.agal.Writer" params="" file="format/agal/Writer.hx">
		<o><c path="haxe.io.Output"/></o>
		<writeInt get="inline" set="null" line="39"><f a="v">
	<x path="Int"/>
	<x path="Void"/>
</f></writeInt>
		<write public="1" set="method" line="47"><f a="data">
	<t path="format.agal.Data"/>
	<x path="Void"/>
</f></write>
		<regType get="inline" set="null" line="75"><f a="r">
	<e path="format.agal.RegType"/>
	<x path="Int"/>
</f></regType>
		<maskBits set="method" line="79"><f a="m">
	<t path="format.agal.Swizzle"/>
	<x path="Int"/>
</f></maskBits>
		<swizzleBits set="method" line="87"><f a="s">
	<t path="format.agal.Swizzle"/>
	<x path="Int"/>
</f></swizzleBits>
		<texFlagsBits set="method" line="105"><f a="a">
	<c path="Array"><e path="format.agal.TexFlag"/></c>
	<a>
		<flags><x path="Int"/></flags>
		<bias><x path="Int"/></bias>
	</a>
</f></texFlagsBits>
		<writeSrc set="method" line="142"><f a="s">
	<t path="format.agal.Reg"/>
	<x path="Void"/>
</f></writeSrc>
		<writeTex set="method" line="165"><f a="t">
	<t path="format.agal.Tex"/>
	<x path="Void"/>
</f></writeTex>
		<new public="1" set="method" line="34"><f a="o">
	<c path="haxe.io.Output"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="format.amf.Reader" params="" file="format/amf/Reader.hx">
		<i><c path="haxe.io.Input"/></i>
		<readObject set="method" line="39"><f a=""><x path="Map">
	<c path="String"/>
	<e path="format.amf.Value"/>
</x></f></readObject>
		<readArray set="method" line="53"><f a="n">
	<x path="Int"/>
	<c path="Array"><e path="format.amf.Value"/></c>
</f></readArray>
		<readInt get="inline" set="null" line="60"><f a=""><x path="Int"/></f></readInt>
		<readWithCode public="1" set="method" line="68"><f a="id">
	<x path="Int"/>
	<e path="format.amf.Value"/>
</f></readWithCode>
		<read public="1" set="method" line="106"><f a=""><e path="format.amf.Value"/></f></read>
		<new public="1" set="method" line="34"><f a="i">
	<c path="haxe.io.Input"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="format.amf.Tools" params="" file="format/amf/Tools.hx">
		<encode public="1" set="method" line="32" static="1"><f a="o">
	<d/>
	<e path="format.amf.Value"/>
</f></encode>
		<number public="1" set="method" line="67" static="1"><f a="a">
	<e path="format.amf.Value"/>
	<t path="Null"><x path="Float"/></t>
</f></number>
		<string public="1" set="method" line="75" static="1"><f a="a">
	<e path="format.amf.Value"/>
	<t path="Null"><c path="String"/></t>
</f></string>
		<object public="1" set="method" line="83" static="1"><f a="a">
	<e path="format.amf.Value"/>
	<t path="Null"><x path="Map">
	<c path="String"/>
	<e path="format.amf.Value"/>
</x></t>
</f></object>
		<abool public="1" set="method" line="91" static="1"><f a="a">
	<e path="format.amf.Value"/>
	<t path="Null"><x path="Bool"/></t>
</f></abool>
		<array public="1" set="method" line="99" static="1"><f a="a">
	<e path="format.amf.Value"/>
	<t path="Null"><c path="Array"><e path="format.amf.Value"/></c></t>
</f></array>
		<meta><m n=":reallyUsed"/></meta>
	</class>
	<enum path="format.amf.Value" params="" file="format/amf/Value.hx">
		<ANumber a="f"><x path="Float"/></ANumber>
		<ABool a="b"><x path="Bool"/></ABool>
		<AString a="s"><c path="String"/></AString>
		<AObject a="fields:?size">
			<x path="Map">
				<c path="String"/>
				<e path="format.amf.Value"/>
			</x>
			<x path="Int"/>
		</AObject>
		<ADate a="d"><c path="Date"/></ADate>
		<AUndefined/>
		<ANull/>
		<AArray a="values"><c path="Array"><e path="format.amf.Value"/></c></AArray>
	</enum>
	<class path="format.amf.Writer" params="" file="format/amf/Writer.hx">
		<o><c path="haxe.io.Output"/></o>
		<write public="1" set="method" line="38"><f a="v">
	<e path="format.amf.Value"/>
	<x path="Void"/>
</f></write>
		<new public="1" set="method" line="33"><f a="o">
	<c path="haxe.io.Output"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="format.amf3.Reader" params="" file="format/amf3/Reader.hx">
		<i><c path="haxe.io.Input"/></i>
		<readObject set="method" line="39"><f a=""><x path="Map">
	<c path="String"/>
	<e path="format.amf3.Value"/>
</x></f></readObject>
		<readMap set="method" line="63"><f a="n">
	<x path="Int"/>
	<x path="Map">
		<e path="format.amf3.Value"/>
		<e path="format.amf3.Value"/>
	</x>
</f></readMap>
		<readArray set="method" line="71"><f a="n">
	<x path="Int"/>
	<c path="Array"><e path="format.amf3.Value"/></c>
</f></readArray>
		<readBytes set="method" line="79"><f a="n">
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></readBytes>
		<readInt set="method" line="86"><f a="?preShift" v="0">
	<x path="Int"/>
	<x path="UInt"/>
</f></readInt>
		<readString set="method" line="101"><f a=""><c path="String"/></f></readString>
		<readWithCode public="1" set="method" line="134"><f a="id">
	<x path="Int"/>
	<e path="format.amf3.Value"/>
</f></readWithCode>
		<read public="1" set="method" line="177"><f a=""><e path="format.amf3.Value"/></f></read>
		<new public="1" set="method" line="34"><f a="i">
	<c path="haxe.io.Input"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="format.amf3.Tools" params="" file="format/amf3/Tools.hx">
		<encode public="1" set="method" line="32" static="1"><f a="o">
	<d/>
	<e path="format.amf3.Value"/>
</f></encode>
		<decode public="1" set="method" line="80" static="1"><f a="a">
	<e path="format.amf3.Value"/>
	<d/>
</f></decode>
		<undefined public="1" set="method" line="97" static="1"><f a="a">
	<e path="format.amf3.Value"/>
	<unknown/>
</f></undefined>
		<anull public="1" set="method" line="101" static="1"><f a="a">
	<e path="format.amf3.Value"/>
	<unknown/>
</f></anull>
		<bool public="1" set="method" line="105" static="1"><f a="a">
	<e path="format.amf3.Value"/>
	<t path="Null"><x path="Bool"/></t>
</f></bool>
		<int public="1" set="method" line="113" static="1"><f a="a">
	<e path="format.amf3.Value"/>
	<t path="Null"><x path="Int"/></t>
</f></int>
		<number public="1" set="method" line="121" static="1"><f a="a">
	<e path="format.amf3.Value"/>
	<t path="Null"><x path="Float"/></t>
</f></number>
		<string public="1" set="method" line="129" static="1"><f a="a">
	<e path="format.amf3.Value"/>
	<t path="Null"><c path="String"/></t>
</f></string>
		<date public="1" set="method" line="137" static="1"><f a="a">
	<e path="format.amf3.Value"/>
	<t path="Null"><c path="Date"/></t>
</f></date>
		<array public="1" set="method" line="145" static="1"><f a="a">
	<e path="format.amf3.Value"/>
	<t path="Null"><c path="Array"><unknown/></c></t>
</f></array>
		<object public="1" set="method" line="157" static="1"><f a="a">
	<e path="format.amf3.Value"/>
	<t path="Null"><x path="Map">
	<c path="String"/>
	<unknown/>
</x></t>
</f></object>
		<xml public="1" set="method" line="169" static="1"><f a="a">
	<e path="format.amf3.Value"/>
	<t path="Null"><c path="Xml"/></t>
</f></xml>
		<bytes public="1" set="method" line="177" static="1"><f a="a">
	<e path="format.amf3.Value"/>
	<t path="Null"><c path="haxe.io.Bytes"/></t>
</f></bytes>
		<map public="1" set="method" line="185" static="1"><f a="a">
	<e path="format.amf3.Value"/>
	<t path="Null"><x path="Map">
	<c path="String"/>
	<unknown/>
</x></t>
</f></map>
		<meta><m n=":reallyUsed"/></meta>
	</class>
	<enum path="format.amf3.Value" params="" file="format/amf3/Value.hx">
		<AUndefined/>
		<ANull/>
		<ABool a="b"><x path="Bool"/></ABool>
		<AInt a="i"><x path="Int"/></AInt>
		<ANumber a="f"><x path="Float"/></ANumber>
		<AString a="s"><c path="String"/></AString>
		<ADate a="d"><c path="Date"/></ADate>
		<AObject a="fields:?size">
			<x path="Map">
				<c path="String"/>
				<e path="format.amf3.Value"/>
			</x>
			<x path="Int"/>
		</AObject>
		<AArray a="values"><c path="Array"><e path="format.amf3.Value"/></c></AArray>
		<AXml a="x"><c path="Xml"/></AXml>
		<ABytes a="b"><c path="haxe.io.Bytes"/></ABytes>
		<AMap a="m"><x path="Map">
	<e path="format.amf3.Value"/>
	<e path="format.amf3.Value"/>
</x></AMap>
	</enum>
	<class path="format.amf3.Writer" params="" file="format/amf3/Writer.hx">
		<o><c path="haxe.io.Output"/></o>
		<writeInt set="method" line="39"><f a="i">
	<x path="Int"/>
	<x path="Void"/>
</f></writeInt>
		<writeUInt set="method" line="50"><f a="u:?shiftLeft" v=":false">
	<x path="UInt"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></writeUInt>
		<writeString set="method" line="79"><f a="s">
	<c path="String"/>
	<x path="Void"/>
</f></writeString>
		<writeObject set="method" line="108"><f a="h:?size" v=":null">
	<x path="Map">
		<c path="String"/>
		<e path="format.amf3.Value"/>
	</x>
	<x path="Int"/>
	<x path="Void"/>
</f></writeObject>
		<write public="1" set="method" line="130"><f a="v">
	<e path="format.amf3.Value"/>
	<x path="Void"/>
</f></write>
		<new public="1" set="method" line="34"><f a="o">
	<c path="haxe.io.Output"/>
	<x path="Void"/>
</f></new>
	</class>
	<enum path="format.as1.Action" params="" file="format/as1/Data.hx" module="format.as1.Data">
		<AEnd/>
		<ANextFrame/>
		<APrevFrame/>
		<APlay/>
		<AStop/>
		<AToggleHighQuality/>
		<AStopSounds/>
		<AAddNum/>
		<ASubtract/>
		<AMultiply/>
		<ADivide/>
		<ACompareNum/>
		<AEqualNum/>
		<ALogicalAnd/>
		<ALogicalOr/>
		<ANot/>
		<AStringEqual/>
		<AStringLength/>
		<ASubString/>
		<APop/>
		<AToInt/>
		<AEval/>
		<ASet/>
		<ATellTarget/>
		<AStringAdd/>
		<AGetProperty/>
		<ASetProperty/>
		<ADuplicateMC/>
		<ARemoveMC/>
		<ATrace/>
		<AStartDrag/>
		<AStopDrag/>
		<AThrow/>
		<ACast/>
		<AImplements/>
		<AFSCommand2/>
		<ARandom/>
		<AMBStringLength/>
		<AOrd/>
		<AChr/>
		<AGetTimer/>
		<AMBStringSub/>
		<AMBOrd/>
		<AMBChr/>
		<ADeleteObj/>
		<ADelete/>
		<ALocalAssign/>
		<ACall/>
		<AReturn/>
		<AMod/>
		<ANew/>
		<ALocalVar/>
		<AInitArray/>
		<AObject/>
		<ATypeOf/>
		<ATargetPath/>
		<AEnum/>
		<AAdd/>
		<ACompare/>
		<AEqual/>
		<AToNumber/>
		<AToString/>
		<ADup/>
		<ASwap/>
		<AObjGet/>
		<AObjSet/>
		<AIncrement/>
		<ADecrement/>
		<AObjCall/>
		<ANewMethod/>
		<AInstanceOf/>
		<AEnum2/>
		<AAnd/>
		<AOr/>
		<AXor/>
		<AShl/>
		<AShr/>
		<AAsr/>
		<APhysEqual/>
		<AGreater/>
		<AStringGreater/>
		<AExtends/>
		<AGotoFrame a="f"><x path="Int"/></AGotoFrame>
		<AGetURL a="url:target">
			<c path="String"/>
			<c path="String"/>
		</AGetURL>
		<ASetReg a="reg"><x path="Int"/></ASetReg>
		<AStringPool a="strings"><c path="Array"><c path="String"/></c></AStringPool>
		<AWaitForFrame a="frame:skip">
			<x path="Int"/>
			<x path="Int"/>
		</AWaitForFrame>
		<ASetTarget a="target"><c path="String"/></ASetTarget>
		<AGotoLabel a="frame"><c path="String"/></AGotoLabel>
		<AWaitForFrame2 a="frame"><x path="Int"/></AWaitForFrame2>
		<AFunction2 a="infos"><t path="format.as1.Function2Infos"/></AFunction2>
		<ATry a="infos"><t path="format.as1.TryInfos"/></ATry>
		<AWith a="value"><x path="Int"/></AWith>
		<APush a="items"><c path="Array"><e path="format.as1.PushItem"/></c></APush>
		<AJump a="delta"><x path="Int"/></AJump>
		<AGetURL2 a="v"><x path="Int"/></AGetURL2>
		<AFunction a="infos"><t path="format.as1.FunctionInfos"/></AFunction>
		<ACondJump a="delta"><x path="Int"/></ACondJump>
		<ACallFrame/>
		<AGotoFrame2 a="play:delta">
			<x path="Bool"/>
			<t path="Null"><x path="Int"/></t>
		</AGotoFrame2>
		<AUnknown a="id:data">
			<x path="Int"/>
			<c path="haxe.io.Bytes"/>
		</AUnknown>
	</enum>
	<enum path="format.as1.PushItem" params="" file="format/as1/Data.hx" module="format.as1.Data">
		<PString a="s"><c path="String"/></PString>
		<PFloat a="f"><x path="Float"/></PFloat>
		<PNull/>
		<PUndefined/>
		<PReg a="r"><x path="Int"/></PReg>
		<PBool a="b"><x path="Bool"/></PBool>
		<PDouble a="f"><x path="Float"/></PDouble>
		<PInt a="i"><x path="Int"/></PInt>
		<PStack a="p"><x path="Int"/></PStack>
		<PStack2 a="p"><x path="Int"/></PStack2>
	</enum>
	<typedef path="format.as1.FunctionInfos" params="" file="format/as1/Data.hx" module="format.as1.Data"><a>
	<name><c path="String"/></name>
	<codeLength><x path="Int"/></codeLength>
	<args><c path="Array"><c path="String"/></c></args>
</a></typedef>
	<typedef path="format.as1.Function2Infos" params="" file="format/as1/Data.hx" module="format.as1.Data"><a>
	<name><c path="String"/></name>
	<nRegisters><x path="Int"/></nRegisters>
	<flags><x path="Int"/></flags>
	<codeLength><x path="Int"/></codeLength>
	<args><c path="Array"><a>
	<reg><x path="Int"/></reg>
	<name><c path="String"/></name>
</a></c></args>
</a></typedef>
	<enum path="format.as1.TryStyle" params="" file="format/as1/Data.hx" module="format.as1.Data">
		<TryVariable a="s"><c path="String"/></TryVariable>
		<TryRegister a="r"><x path="Int"/></TryRegister>
	</enum>
	<typedef path="format.as1.TryInfos" params="" file="format/as1/Data.hx" module="format.as1.Data"><a>
	<tryLength><x path="Int"/></tryLength>
	<style><e path="format.as1.TryStyle"/></style>
	<finallyLength><t path="Null"><x path="Int"/></t></finallyLength>
	<catchLength><t path="Null"><x path="Int"/></t></catchLength>
</a></typedef>
	<typedef path="format.as1.AS1" params="" file="format/as1/Data.hx" module="format.as1.Data"><c path="Array"><e path="format.as1.Action"/></c></typedef>
	<class path="format.as1.Reader" params="" file="format/as1/Reader.hx">
		<i><c path="haxe.io.Input"/></i>
		<tmp><c path="haxe.io.Bytes"/></tmp>
		<read public="1" set="method" line="40"><f a=""><t path="format.as1.AS1"/></f></read>
		<readString get="inline" set="null" line="51"><f a=""><c path="String"/></f></readString>
		<readUTF8String set="method" line="55"><f a=""><c path="String"/></f></readUTF8String>
		<readDouble set="method" line="65"><f a=""><x path="Float"/></f></readDouble>
		<parsePushItems set="method" line="77"><f a="data">
	<c path="haxe.io.Bytes"/>
	<c path="Array"><e path="format.as1.PushItem"/></c>
</f></parsePushItems>
		<readAction set="method" line="106"><f a=""><e path="format.as1.Action"/></f></readAction>
		<new public="1" set="method" line="35"><f a="i">
	<c path="haxe.io.Input"/>
	<x path="Void"/>
</f></new>
	</class>
	<typedef path="format.bmp.Data" params="" file="format/bmp/Data.hx"><a>
	<pixels><c path="haxe.io.Bytes"/></pixels>
	<header><t path="format.bmp.Header"/></header>
</a></typedef>
	<typedef path="format.bmp.Header" params="" file="format/bmp/Data.hx" module="format.bmp.Data"><a>
	<width><x path="Int"/></width>
	<height><x path="Int"/></height>
</a></typedef>
	<class path="format.bmp.Reader" params="" file="format/bmp/Reader.hx">
		<input><c path="haxe.io.Input"/></input>
		<readInt get="inline" set="null" line="46"><f a=""><x path="Int"/></f></readInt>
		<read public="1" set="method" line="54"><f a=""><t path="format.bmp.Data"/></f></read>
		<new public="1" set="method" line="42"><f a="i">
	<c path="haxe.io.Input"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="format.bmp.Tools" params="" file="format/bmp/Tools.hx"/>
	<class path="format.bmp.Writer" params="" file="format/bmp/Writer.hx">
		<DATA_OFFSET line="40" static="1"><x path="Int"/></DATA_OFFSET>
		<output><c path="haxe.io.Output"/></output>
		<writeInt get="inline" set="null" line="51"><f a="o:v">
	<c path="haxe.io.Output"/>
	<x path="Int"/>
	<x path="Void"/>
</f></writeInt>
		<write public="1" set="method" line="59"><f a="b">
	<t path="format.bmp.Data"/>
	<x path="Void"/>
</f></write>
		<new public="1" set="method" line="47">
			<f a="o">
				<c path="haxe.io.Output"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Specs: http://s223767089.online.de/en/file-format-bmp</haxe_doc>
		</new>
		<meta><m n=":reallyUsed"/></meta>
	</class>
	<typedef path="format.flv.Header" params="" file="format/flv/Data.hx" module="format.flv.Data"><a>
	<hasVideo><x path="Bool"/></hasVideo>
	<hasMeta><x path="Bool"/></hasMeta>
	<hasAudio><x path="Bool"/></hasAudio>
</a></typedef>
	<enum path="format.flv.Data" params="" file="format/flv/Data.hx">
		<FLVAudio a="data:time">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
		</FLVAudio>
		<FLVVideo a="data:time">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
		</FLVVideo>
		<FLVMeta a="data:time">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
		</FLVMeta>
	</enum>
	<class path="format.flv.Reader" params="" file="format/flv/Reader.hx">
		<ch><c path="haxe.io.Input"/></ch>
		<close public="1" set="method" line="39"><f a=""><x path="Void"/></f></close>
		<readInt get="inline" set="null" line="43"><f a=""><x path="Int"/></f></readInt>
		<readHeader public="1" set="method" line="51"><f a=""><t path="format.flv.Header"/></f></readHeader>
		<readChunk public="1" set="method" line="72"><f a=""><t path="Null"><e path="format.flv.Data"/></t></f></readChunk>
		<new public="1" set="method" line="34"><f a="i">
	<c path="haxe.io.Input"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="format.flv.Tools" params="" file="format/flv/Tools.hx"><isVideoKeyFrame public="1" set="method" line="31" static="1"><f a="data">
	<c path="haxe.io.Bytes"/>
	<x path="Bool"/>
</f></isVideoKeyFrame></class>
	<class path="format.flv.Writer" params="" file="format/flv/Writer.hx">
		<ch><c path="haxe.io.Output"/></ch>
		<close public="1" set="method" line="39"><f a=""><x path="Void"/></f></close>
		<writeHeader public="1" set="method" line="43"><f a="h">
	<t path="format.flv.Header"/>
	<x path="Void"/>
</f></writeHeader>
		<writeChunk public="1" set="method" line="56"><f a="chunk">
	<e path="format.flv.Data"/>
	<x path="Void"/>
</f></writeChunk>
		<new public="1" set="method" line="34"><f a="o">
	<c path="haxe.io.Output"/>
	<x path="Void"/>
</f></new>
	</class>
	<typedef path="format.gz.Header" params="" file="format/gz/Data.hx" module="format.gz.Data"><a>
	<fileName><c path="String"/></fileName>
	<extraData><c path="haxe.io.Bytes"/></extraData>
	<comments><c path="String"/></comments>
</a></typedef>
	<class path="format.gz.Reader" params="" file="format/gz/Reader.hx">
		<i><c path="haxe.io.Input"/></i>
		<read public="1" set="method" line="38"><f a=""><a>
	<file><c path="String"/></file>
	<data><c path="haxe.io.Bytes"/></data>
</a></f></read>
		<readHeader public="1" set="method" line="45"><f a=""><t path="format.gz.Header"/></f></readHeader>
		<readData public="1" set="method" line="76"><f a="o:?bufsize" v=":null">
	<c path="haxe.io.Output"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readData>
		<refill set="method" line="119"><f a="buf:pos">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></refill>
		<new public="1" set="method" line="34"><f a="i">
	<c path="haxe.io.Input"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":reallyUsed"/></meta>
	</class>
	<typedef path="format.jpg.Data" params="" file="format/jpg/Data.hx"><a>
	<width><x path="Int"/></width>
	<quality><x path="Float"/></quality>
	<pixels><c path="haxe.io.Bytes"/></pixels>
	<height><x path="Int"/></height>
</a></typedef>
	<class path="format.jpg.Writer" params="" file="format/jpg/Writer.hx">
		<ZigZag><c path="Array"><x path="Int"/></c></ZigZag>
		<initZigZag set="method" line="36"><f a=""><x path="Void"/></f></initZigZag>
		<YTable><c path="Array"><x path="Int"/></c></YTable>
		<UVTable><c path="Array"><x path="Int"/></c></UVTable>
		<fdtbl_Y><c path="Array"><x path="Float"/></c></fdtbl_Y>
		<fdtbl_UV><c path="Array"><x path="Float"/></c></fdtbl_UV>
		<initQuantTables set="method" line="54"><f a="sf">
	<x path="Int"/>
	<x path="Void"/>
</f></initQuantTables>
		<std_dc_luminance_nrcodes><c path="Array"><x path="Int"/></c></std_dc_luminance_nrcodes>
		<std_dc_luminance_values><c path="haxe.io.Bytes"/></std_dc_luminance_values>
		<std_ac_luminance_nrcodes><c path="Array"><x path="Int"/></c></std_ac_luminance_nrcodes>
		<std_ac_luminance_values><c path="haxe.io.Bytes"/></std_ac_luminance_values>
		<initLuminance set="method" line="106"><f a=""><x path="Void"/></f></initLuminance>
		<strIntsToBytes set="method" line="135"><f a="s">
	<c path="String"/>
	<c path="haxe.io.Bytes"/>
</f></strIntsToBytes>
		<std_dc_chrominance_nrcodes><c path="Array"><x path="Int"/></c></std_dc_chrominance_nrcodes>
		<std_dc_chrominance_values><c path="haxe.io.Bytes"/></std_dc_chrominance_values>
		<std_ac_chrominance_nrcodes><c path="Array"><x path="Int"/></c></std_ac_chrominance_nrcodes>
		<std_ac_chrominance_values><c path="haxe.io.Bytes"/></std_ac_chrominance_values>
		<initChrominance set="method" line="159"><f a=""><x path="Void"/></f></initChrominance>
		<YDC_HT><x path="Map">
	<x path="Int"/>
	<c path="format.jpg._Writer.BitString"/>
</x></YDC_HT>
		<UVDC_HT><x path="Map">
	<x path="Int"/>
	<c path="format.jpg._Writer.BitString"/>
</x></UVDC_HT>
		<YAC_HT><x path="Map">
	<x path="Int"/>
	<c path="format.jpg._Writer.BitString"/>
</x></YAC_HT>
		<UVAC_HT><x path="Map">
	<x path="Int"/>
	<c path="format.jpg._Writer.BitString"/>
</x></UVAC_HT>
		<initHuffmanTbl set="method" line="193"><f a=""><x path="Void"/></f></initHuffmanTbl>
		<computeHuffmanTbl set="method" line="200"><f a="nrcodes:std_table">
	<c path="Array"><x path="Int"/></c>
	<c path="haxe.io.Bytes"/>
	<x path="Map">
		<x path="Int"/>
		<c path="format.jpg._Writer.BitString"/>
	</x>
</f></computeHuffmanTbl>
		<bitcode><x path="Map">
	<x path="Int"/>
	<c path="format.jpg._Writer.BitString"/>
</x></bitcode>
		<category><x path="Map">
	<x path="Int"/>
	<x path="Int"/>
</x></category>
		<initCategoryNumber set="method" line="220"><f a=""><x path="Void"/></f></initCategoryNumber>
		<byteout><c path="haxe.io.Output"/></byteout>
		<bytenew><x path="Int"/></bytenew>
		<bytepos><x path="Int"/></bytepos>
		<writeBits set="method" line="249"><f a="bs">
	<c path="format.jpg._Writer.BitString"/>
	<x path="Void"/>
</f></writeBits>
		<writeWord set="method" line="274"><f a="val">
	<x path="Int"/>
	<x path="Void"/>
</f></writeWord>
		<fDCTQuant set="method" line="281"><f a="data:fdtbl">
	<c path="Array"><x path="Float"/></c>
	<c path="Array"><x path="Float"/></c>
	<c path="Array"><x path="Float"/></c>
</f></fDCTQuant>
		<b get="inline" set="null" line="386"><f a="v">
	<x path="Int"/>
	<x path="Void"/>
</f></b>
		<writeAPP0 set="method" line="390"><f a=""><x path="Void"/></f></writeAPP0>
		<writeDQT set="method" line="406"><f a=""><x path="Void"/></f></writeDQT>
		<writeSOF0 set="method" line="416"><f a="width:height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></writeSOF0>
		<writeDHT set="method" line="436"><f a=""><x path="Void"/></f></writeDHT>
		<writeSOS set="method" line="460"><f a=""><x path="Void"/></f></writeSOS>
		<DU><c path="Array"><x path="Float"/></c></DU>
		<processDU set="method" line="478"><f a="CDU:fdtbl:DC:HTDC:HTAC">
	<c path="Array"><x path="Float"/></c>
	<c path="Array"><x path="Float"/></c>
	<x path="Float"/>
	<x path="Map">
		<x path="Int"/>
		<c path="format.jpg._Writer.BitString"/>
	</x>
	<x path="Map">
		<x path="Int"/>
		<c path="format.jpg._Writer.BitString"/>
	</x>
	<x path="Float"/>
</f></processDU>
		<YDU><c path="Array"><x path="Float"/></c></YDU>
		<UDU><c path="Array"><x path="Float"/></c></UDU>
		<VDU><c path="Array"><x path="Float"/></c></VDU>
		<RGB2YUV set="method" line="534"><f a="img:width:xpos:ypos">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></RGB2YUV>
		<write public="1" set="method" line="590"><f a="image">
	<t path="format.jpg.Data"/>
	<x path="Void"/>
</f></write>
		<new public="1" set="method" line="551"><f a="out">
	<c path="haxe.io.Output"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="format.jpg._Writer.BitString" params="" file="format/jpg/Writer.hx" private="1" module="format.jpg.Writer">
		<len public="1"><x path="Int"/></len>
		<val public="1"><x path="Int"/></val>
		<new public="1" set="method" line="647"><f a="l:v">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":reallyUsed"/></meta>
	</class>
	<class path="format.lz4.Reader" params="" file="format/lz4/Reader.hx">
		<bytes><c path="haxe.io.Bytes"/></bytes>
		<pos><x path="Int"/></pos>
		<b get="inline" set="null" line="11"><f a=""><x path="Int"/></f></b>
		<grow set="method" line="15"><f a="out:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></grow>
		<read public="1" set="method" line="25"><f a="bytes">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></read>
		<new public="1" set="method" line="8"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="format.lz4.Uncompress" params="" file="format/lz4/Uncompress.hx">
		<run public="1" set="method" line="5" static="1"><f a="src:srcPos:srcLen:out:outPos">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
</f></run>
		<meta><m n=":reallyUsed"/></meta>
	</class>
	<enum path="format.mp3.SamplingRate" params="" file="format/mp3/Data.hx" module="format.mp3.Data">
		<SR_8000/>
		<SR_11025/>
		<SR_12000/>
		<SR_22050/>
		<SR_24000/>
		<SR_32000/>
		<SR_44100/>
		<SR_48000/>
		<SR_Bad/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<enum path="format.mp3.Bitrate" params="" file="format/mp3/Data.hx" module="format.mp3.Data">
		<BR_8/>
		<BR_16/>
		<BR_24/>
		<BR_32/>
		<BR_40/>
		<BR_48/>
		<BR_56/>
		<BR_64/>
		<BR_80/>
		<BR_96/>
		<BR_112/>
		<BR_128/>
		<BR_144/>
		<BR_160/>
		<BR_176/>
		<BR_192/>
		<BR_224/>
		<BR_256/>
		<BR_288/>
		<BR_320/>
		<BR_352/>
		<BR_384/>
		<BR_416/>
		<BR_448/>
		<BR_Free/>
		<BR_Bad/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<class path="format.mp3.MPEG" params="" file="format/mp3/Constants.hx" module="format.mp3.Constants">
		<V1 public="1" get="inline" set="null" line="11" static="1"><x path="Int"/></V1>
		<V2 public="1" get="inline" set="null" line="12" static="1"><x path="Int"/></V2>
		<V25 public="1" get="inline" set="null" line="13" static="1"><x path="Int"/></V25>
		<Reserved public="1" line="14" static="1"><x path="Int"/></Reserved>
		<enum2Num public="1" set="method" line="16" static="1"><f a="m">
	<e path="format.mp3.MPEGVersion"/>
	<x path="Int"/>
</f></enum2Num>
		<num2Enum public="1" set="method" line="25" static="1"><f a="m">
	<x path="Int"/>
	<e path="format.mp3.MPEGVersion"/>
</f></num2Enum>
		<V1_Bitrates public="1" line="35" static="1"><c path="Array"><c path="Array"><e path="format.mp3.Bitrate"/></c></c></V1_Bitrates>
		<V2_Bitrates public="1" line="43" static="1"><c path="Array"><c path="Array"><e path="format.mp3.Bitrate"/></c></c></V2_Bitrates>
		<SamplingRates public="1" line="51" static="1"><c path="Array"><c path="Array"><e path="format.mp3.SamplingRate"/></c></c></SamplingRates>
		<srNum2Enum public="1" set="method" line="58" static="1"><f a="sr">
	<x path="Int"/>
	<e path="format.mp3.SamplingRate"/>
</f></srNum2Enum>
		<srEnum2Num public="1" set="method" line="72" static="1"><f a="sr">
	<e path="format.mp3.SamplingRate"/>
	<x path="Int"/>
</f></srEnum2Num>
		<getBitrateIdx public="1" set="method" line="87" static="1"><f a="br:mpeg:layer">
	<e path="format.mp3.Bitrate"/>
	<e path="format.mp3.MPEGVersion"/>
	<e path="format.mp3.Layer"/>
	<x path="Int"/>
</f></getBitrateIdx>
		<getSamplingRateIdx public="1" set="method" line="96" static="1"><f a="sr:mpeg">
	<e path="format.mp3.SamplingRate"/>
	<e path="format.mp3.MPEGVersion"/>
	<x path="Int"/>
</f></getSamplingRateIdx>
		<bitrateEnum2Num public="1" set="method" line="105" static="1"><f a="br">
	<e path="format.mp3.Bitrate"/>
	<x path="Int"/>
</f></bitrateEnum2Num>
		<bitrateNum2Enum public="1" set="method" line="136" static="1"><f a="br">
	<x path="Int"/>
	<e path="format.mp3.Bitrate"/>
</f></bitrateNum2Enum>
		<haxe_doc>* MPEG Version
 *
 * sored on 2 bits in the file,
 * values represent bit values</haxe_doc>
		<meta><m n=":reallyUsed"/></meta>
	</class>
	<class path="format.mp3.CLayer" params="" file="format/mp3/Constants.hx" module="format.mp3.Constants">
		<LReserved public="1" line="177" static="1"><x path="Int"/></LReserved>
		<LLayer3 public="1" line="178" static="1"><x path="Int"/></LLayer3>
		<LLayer2 public="1" line="179" static="1"><x path="Int"/></LLayer2>
		<LLayer1 public="1" line="180" static="1"><x path="Int"/></LLayer1>
		<enum2Num public="1" set="method" line="182" static="1"><f a="l">
	<e path="format.mp3.Layer"/>
	<x path="Int"/>
</f></enum2Num>
		<num2Enum public="1" set="method" line="191" static="1"><f a="l">
	<x path="Int"/>
	<e path="format.mp3.Layer"/>
</f></num2Enum>
		<haxe_doc>* Layer
 *
 * stored on 2 bits in the file,
 * values represent bit values</haxe_doc>
		<meta><m n=":reallyUsed"/></meta>
	</class>
	<class path="format.mp3.CChannelMode" params="" file="format/mp3/Constants.hx" module="format.mp3.Constants">
		<CStereo public="1" get="inline" set="null" line="209" static="1"><x path="Int"/></CStereo>
		<CJointStereo public="1" get="inline" set="null" line="210" static="1"><x path="Int"/></CJointStereo>
		<CDualChannel public="1" get="inline" set="null" line="211" static="1"><x path="Int"/></CDualChannel>
		<CMono public="1" get="inline" set="null" line="212" static="1"><x path="Int"/></CMono>
		<enum2Num public="1" set="method" line="214" static="1"><f a="c">
	<e path="format.mp3.ChannelMode"/>
	<x path="Int"/>
</f></enum2Num>
		<num2Enum public="1" set="method" line="223" static="1"><f a="c">
	<x path="Int"/>
	<e path="format.mp3.ChannelMode"/>
</f></num2Enum>
		<haxe_doc>* Sound channel mode
 *
 * stored on 2 bits in the file,
 * values represent bit values</haxe_doc>
		<meta><m n=":reallyUsed"/></meta>
	</class>
	<class path="format.mp3.CEmphasis" params="" file="format/mp3/Constants.hx" module="format.mp3.Constants">
		<ENone public="1" get="inline" set="null" line="240" static="1"><x path="Int"/></ENone>
		<EMs50_15 public="1" get="inline" set="null" line="241" static="1"><x path="Int"/></EMs50_15>
		<EReserved public="1" get="inline" set="null" line="242" static="1"><x path="Int"/></EReserved>
		<ECCIT_J17 public="1" get="inline" set="null" line="243" static="1"><x path="Int"/></ECCIT_J17>
		<enum2Num public="1" set="method" line="245" static="1"><f a="c">
	<e path="format.mp3.Emphasis"/>
	<x path="Int"/>
</f></enum2Num>
		<num2Enum public="1" set="method" line="254" static="1"><f a="c">
	<x path="Int"/>
	<e path="format.mp3.Emphasis"/>
</f></num2Enum>
		<haxe_doc>* Emphasis
 *
 * 2 bits</haxe_doc>
		<meta><m n=":reallyUsed"/></meta>
	</class>
	<typedef path="format.mp3.MP3" params="" file="format/mp3/Data.hx" module="format.mp3.Data"><a>
	<sampleSize><x path="Int"/></sampleSize>
	<sampleCount><x path="Int"/></sampleCount>
	<id3v2><t path="format.mp3.ID3v2Info"/></id3v2>
	<frames><c path="Array"><t path="format.mp3.MP3Frame"/></c></frames>
</a></typedef>
	<typedef path="format.mp3.ID3v2Info" params="" file="format/mp3/Data.hx" module="format.mp3.Data"><a>
	<versionBytes><x path="Int"/></versionBytes>
	<flagByte><x path="Int"/></flagByte>
	<data><c path="haxe.io.Bytes"/></data>
</a></typedef>
	<typedef path="format.mp3.MP3Frame" params="" file="format/mp3/Data.hx" module="format.mp3.Data"><a>
	<header><t path="format.mp3.MP3Header"/></header>
	<data><c path="haxe.io.Bytes"/></data>
</a></typedef>
	<typedef path="format.mp3.MP3Header" params="" file="format/mp3/Data.hx" module="format.mp3.Data"><a>
	<version><e path="format.mp3.MPEGVersion"/></version>
	<samplingRate><e path="format.mp3.SamplingRate"/></samplingRate>
	<privateBit><x path="Bool"/></privateBit>
	<layer><e path="format.mp3.Layer"/></layer>
	<isPadded><x path="Bool"/></isPadded>
	<isOriginal><x path="Bool"/></isOriginal>
	<isMSStereo><x path="Bool"/></isMSStereo>
	<isIntensityStereo><x path="Bool"/></isIntensityStereo>
	<isCopyrighted><x path="Bool"/></isCopyrighted>
	<hasCrc><x path="Bool"/></hasCrc>
	<emphasis><e path="format.mp3.Emphasis"/></emphasis>
	<crc16><x path="Int"/></crc16>
	<channelMode><e path="format.mp3.ChannelMode"/></channelMode>
	<bitrate><e path="format.mp3.Bitrate"/></bitrate>
</a></typedef>
	<enum path="format.mp3.MPEGVersion" params="" file="format/mp3/Data.hx" module="format.mp3.Data">
		<MPEG_V1/>
		<MPEG_V2/>
		<MPEG_V25/>
		<MPEG_Reserved/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<enum path="format.mp3.Layer" params="" file="format/mp3/Data.hx" module="format.mp3.Data">
		<LayerReserved/>
		<Layer3/>
		<Layer2/>
		<Layer1/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<enum path="format.mp3.ChannelMode" params="" file="format/mp3/Data.hx" module="format.mp3.Data">
		<Stereo/>
		<JointStereo/>
		<DualChannel/>
		<Mono/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<enum path="format.mp3.Emphasis" params="" file="format/mp3/Data.hx" module="format.mp3.Data">
		<NoEmphasis/>
		<Ms50_15/>
		<CCIT_J17/>
		<InvalidEmphasis/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<enum path="format.mp3.FrameType" params="" file="format/mp3/Reader.hx" module="format.mp3.Reader">
		<FT_MP3/>
		<FT_NONE/>
		<haxe_doc>* Used by seekFrame to retrun the type
 * of frame (possibly) found.</haxe_doc>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<class path="format.mp3.Reader" params="" file="format/mp3/Reader.hx">
		<i><c path="haxe.io.Input"/></i>
		<bits><c path="format.tools.BitsInput"/></bits>
		<version><x path="Int"/></version>
		<samples><x path="Int"/></samples>
		<sampleSize><x path="Int"/></sampleSize>
		<any_read><x path="Bool"/></any_read>
		<id3v2_data><c path="haxe.io.Bytes"/></id3v2_data>
		<id3v2_version><x path="Int"/></id3v2_version>
		<id3v2_flags><x path="Int"/></id3v2_flags>
		<skipID3v2 public="1" set="method" line="78">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Called after found 'ID3' signature
    * at the beginning of the file.
    *
    * Records the raw tag data.</haxe_doc>
		</skipID3v2>
		<seekFrame public="1" set="method" line="101">
			<f a=""><e path="format.mp3.FrameType"/></f>
			<haxe_doc>* Winds the input stream until the 11-bit
    * syncword is found.
    *
    * @returns Bool false if not found (this should happen at eof).</haxe_doc>
		</seekFrame>
		<readFrames public="1" set="method" line="150">
			<f a=""><c path="Array"><t path="format.mp3.MP3Frame"/></c></f>
			<haxe_doc>* Returns all valid frames. Invalid frames
    * are discarded.</haxe_doc>
		</readFrames>
		<readFrameHeader public="1" set="method" line="170">
			<f a=""><t path="format.mp3.MP3Header"/></f>
			<haxe_doc>* Returns null if header proves to be invalid.</haxe_doc>
		</readFrameHeader>
		<readFrame public="1" set="method" line="250">
			<f a=""><t path="format.mp3.MP3Frame"/></f>
			<haxe_doc>* Reads a frame from the input.
    *
    * The input position should already be just past the
    * 11 bit syncword.
    *
    * Returns null if the header is invalid or the frame was incomplete.</haxe_doc>
		</readFrame>
		<read public="1" set="method" line="280">
			<f a=""><t path="format.mp3.MP3"/></f>
			<haxe_doc>* Reads the MP3 data.
    *
    * Currently returns all valid frames.</haxe_doc>
		</read>
		<new public="1" set="method" line="62"><f a="i">
	<c path="haxe.io.Input"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="format.mp3.Tools" params="" file="format/mp3/Tools.hx">
		<getBitrate public="1" set="method" line="40" static="1">
			<f a="mpegVersion:layerIdx:bitrateIdx">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<e path="format.mp3.Bitrate"/>
			</f>
			<haxe_doc>* Returns kbps</haxe_doc>
		</getBitrate>
		<getSamplingRate public="1" set="method" line="50" static="1">
			<f a="mpegVersion:samplingRateIdx">
				<x path="Int"/>
				<x path="Int"/>
				<e path="format.mp3.SamplingRate"/>
			</f>
			<haxe_doc>* Returns Hz</haxe_doc>
		</getSamplingRate>
		<isInvalidFrameHeader public="1" set="method" line="57" static="1">
			<f a="hdr">
				<t path="format.mp3.MP3Header"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Tells whether the header is invalid.</haxe_doc>
		</isInvalidFrameHeader>
		<getSampleDataSize public="1" set="method" line="74" static="1">
			<f a="mpegVersion:bitrate:samplingRate:isPadded:hasCrc">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Return sample data size. Note that
    * the 4 bytes subtracted is the size of the header,
    * so this 4 bytes less the frame size.
    *
    * Also, 2 bytes are subtracted for CRC too, if present</haxe_doc>
		</getSampleDataSize>
		<getSampleDataSizeHdr public="1" set="method" line="78" static="1"><f a="hdr">
	<t path="format.mp3.MP3Header"/>
	<x path="Int"/>
</f></getSampleDataSizeHdr>
		<getSampleCount public="1" set="method" line="89" static="1">
			<f a="mpegVersion">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Returns the number of samples in the frame.</haxe_doc>
		</getSampleCount>
		<getSampleCountHdr public="1" set="method" line="94" static="1"><f a="hdr">
	<t path="format.mp3.MP3Header"/>
	<x path="Int"/>
</f></getSampleCountHdr>
		<getFrameInfo public="1" set="method" line="102" static="1">
			<f a="fr">
				<t path="format.mp3.MP3Frame"/>
				<c path="String"/>
			</f>
			<haxe_doc>* Displays frame info in human-readable format.
    * Subject to change, do not use for programmatical parsing!</haxe_doc>
		</getFrameInfo>
		<meta><m n=":reallyUsed"/></meta>
	</class>
	<class path="format.mp3.Writer" params="" file="format/mp3/Writer.hx">
		<WRITE_ID3V2 public="1" get="inline" set="null" line="37" static="1"><x path="Bool"/></WRITE_ID3V2>
		<DONT_WRITE_ID3V2 public="1" get="inline" set="null" line="38" static="1"><x path="Bool"/></DONT_WRITE_ID3V2>
		<o><c path="haxe.io.Output"/></o>
		<bits><c path="format.tools.BitsOutput"/></bits>
		<write public="1" set="method" line="53">
			<f a="mp3:?writeId3v2" v=":true">
				<t path="format.mp3.MP3"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Pass DONT_WRITE_ID3V2 (false) as second parameter to
    * write the mpeg stream without id3v2</haxe_doc>
		</write>
		<writeID3v2 public="1" set="method" line="61"><f a="id3v2">
	<t path="format.mp3.ID3v2Info"/>
	<x path="Void"/>
</f></writeID3v2>
		<writeFrame public="1" set="method" line="81"><f a="f">
	<t path="format.mp3.MP3Frame"/>
	<x path="Void"/>
</f></writeFrame>
		<new public="1" set="method" line="43"><f a="output">
	<c path="haxe.io.Output"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="format.neko.Builtins" params="" file="format/neko/Builtins.hx">
		<CINVALID public="1" get="inline" set="null" line="33" static="1"><x path="Int"/></CINVALID>
		<vm><c path="format.neko.VM"/></vm>
		<table public="1"><x path="Map">
	<c path="String"/>
	<e path="format.neko.Value"/>
</x></table>
		<b set="method" line="49"><f a="name:f">
	<c path="String"/>
	<e path="format.neko.ValueFunction"/>
	<x path="Void"/>
</f></b>
		<_nargs public="1" set="method" line="53"><f a="f">
	<e path="format.neko.ValueFunction"/>
	<x path="Int"/>
</f></_nargs>
		<_compare public="1" set="method" line="65"><f a="a:b">
	<e path="format.neko.Value"/>
	<e path="format.neko.Value"/>
	<x path="Int"/>
</f></_compare>
		<_string public="1" set="method" line="132"><f a="v">
	<e path="format.neko.Value"/>
	<c path="String"/>
</f></_string>
		<typeof public="1" set="method" line="162"><f a="o">
	<e path="format.neko.Value"/>
	<e path="format.neko.Value"/>
</f></typeof>
		<print set="method" line="170"><f a="vl">
	<c path="Array"><e path="format.neko.Value"/></c>
	<e path="format.neko.Value"/>
</f></print>
		<string set="method" line="178"><f a="v">
	<e path="format.neko.Value"/>
	<e path="format.neko.Value"/>
</f></string>
		<objsetproto set="method" line="182"><f a="o:p">
	<e path="format.neko.Value"/>
	<e path="format.neko.Value"/>
	<e path="format.neko.Value"/>
</f></objsetproto>
		<new public="1" set="method" line="38"><f a="vm">
	<c path="format.neko.VM"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":reallyUsed"/></meta>
	</class>
	<enum path="format.neko.Opcode" params="" file="format/neko/Data.hx" module="format.neko.Data">
		<OAccNull/>
		<OAccTrue/>
		<OAccFalse/>
		<OAccThis/>
		<OAccInt/>
		<OAccStack/>
		<OAccGlobal/>
		<OAccEnv/>
		<OAccField/>
		<OAccArray/>
		<OAccIndex/>
		<OAccBuiltin/>
		<OSetStack/>
		<OSetGlobal/>
		<OSetEnv/>
		<OSetField/>
		<OSetArray/>
		<OSetIndex/>
		<OSetThis/>
		<OPush/>
		<OPop/>
		<OCall/>
		<OObjCall/>
		<OJump/>
		<OJumpIf/>
		<OJumpIfNot/>
		<OTrap/>
		<OEndTrap/>
		<ORet/>
		<OMakeEnv/>
		<OMakeArray/>
		<OBool/>
		<OIsNull/>
		<OIsNotNull/>
		<OAdd/>
		<OSub/>
		<OMult/>
		<ODiv/>
		<OMod/>
		<OShl/>
		<OShr/>
		<OUShr/>
		<OOr/>
		<OAnd/>
		<OXor/>
		<OEq/>
		<ONeq/>
		<OGt/>
		<OGte/>
		<OLt/>
		<OLte/>
		<ONot/>
		<OTypeOf/>
		<OCompare/>
		<OHash/>
		<ONew/>
		<OJumpTable/>
		<OApply/>
		<OAccStack0/>
		<OAccStack1/>
		<OAccIndex0/>
		<OAccIndex1/>
		<OPhysCompare/>
		<OTailCall/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<typedef path="format.neko.DebugInfos" params="" file="format/neko/Data.hx" module="format.neko.Data"><c path="Array"><t path="Null"><a>
	<line><x path="Int"/></line>
	<file><c path="String"/></file>
</a></t></c></typedef>
	<enum path="format.neko.Global" params="" file="format/neko/Data.hx" module="format.neko.Data">
		<GlobalVar a="v"><c path="String"/></GlobalVar>
		<GlobalFunction a="pos:nargs">
			<x path="Int"/>
			<x path="Int"/>
		</GlobalFunction>
		<GlobalString a="v"><c path="String"/></GlobalString>
		<GlobalFloat a="v"><c path="String"/></GlobalFloat>
		<GlobalDebug a="debug"><t path="format.neko.DebugInfos"/></GlobalDebug>
	</enum>
	<typedef path="format.neko.Data" params="" file="format/neko/Data.hx"><a>
	<globals><c path="Array"><e path="format.neko.Global"/></c></globals>
	<fields><c path="Array"><c path="String"/></c></fields>
	<code><c path="Array"><x path="Int"/></c></code>
</a></typedef>
	<class path="format.neko.Reader" params="" file="format/neko/Reader.hx">
		<i><c path="haxe.io.Input"/></i>
		<error set="method" line="39"><f a=""><d/></f></error>
		<readInt get="inline" set="null" line="44"><f a=""><x path="Int"/></f></readInt>
		<readDebugInfos set="method" line="52"><f a=""><t path="format.neko.DebugInfos"/></f></readDebugInfos>
		<alloc params="T" set="method" line="102"><f a="size">
	<x path="Int"/>
	<c path="Array"><c path="alloc.T"/></c>
</f></alloc>
		<read public="1" set="method" line="108"><f a=""><t path="format.neko.Data"/></f></read>
		<new public="1" set="method" line="35"><f a="i">
	<c path="haxe.io.Input"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="format.neko.ValueAbstract" params="" file="format/neko/Value.hx" module="format.neko.Value" interface="1"/>
	<class path="format.neko.ABuffer" params="" file="format/neko/Templo.hx" module="format.neko.Templo">
		<extends path="StringBuf"/>
		<implements path="format.neko.ValueAbstract"/>
		<new public="1" get="inline" set="null" line="5"><f a=""><x path="Void"/></f></new>
		<meta><m n=":reallyUsed"/></meta>
	</class>
	<class path="format.neko._Templo.Iter" params="" file="format/neko/Templo.hx" private="1" module="format.neko.Templo">
		<__it public="1"><t path="Iterator"><d/></t></__it>
		<current public="1"><d/></current>
		<index public="1"><x path="Int"/></index>
		<number public="1"><x path="Int"/></number>
		<first public="1"><x path="Bool"/></first>
		<last public="1"><x path="Bool"/></last>
		<odd public="1"><x path="Bool"/></odd>
		<even public="1"><x path="Bool"/></even>
		<size public="1"><t path="Null"><x path="Int"/></t></size>
		<new public="1" set="method" line="18"><f a="it:size">
	<t path="Iterator"><d/></t>
	<t path="Null"><x path="Int"/></t>
	<x path="Void"/>
</f></new>
		<meta><m n=":reallyUsed"/></meta>
	</class>
	<class path="format.neko.Templo" params="" file="format/neko/Templo.hx">
		<makeLoader public="1" set="method" line="157" static="1"><f a="vm">
	<c path="format.neko.VM"/>
	<c path="format.neko.ValueObject"/>
</f></makeLoader>
		<execute public="1" set="method" line="177" static="1"><f a="vm:data:ctx">
	<c path="format.neko.VM"/>
	<t path="format.neko.Data"/>
	<a/>
	<c path="String"/>
</f></execute>
		<_String><e path="format.neko.Value"/></_String>
		<_Array><e path="format.neko.Value"/></_Array>
		<vm><c path="format.neko.VM"/></vm>
		<open set="method" line="65"><f a=""><e path="format.neko.Value"/></f></open>
		<add set="method" line="69"><f a="b:v">
	<e path="format.neko.Value"/>
	<e path="format.neko.Value"/>
	<e path="format.neko.Value"/>
</f></add>
		<close set="method" line="74"><f a="b">
	<e path="format.neko.Value"/>
	<e path="format.neko.Value"/>
</f></close>
		<split set="method" line="78"><f a="s:sep">
	<e path="format.neko.Value"/>
	<e path="format.neko.Value"/>
	<e path="format.neko.Value"/>
</f></split>
		<iter set="method" line="102"><f a="v">
	<e path="format.neko.Value"/>
	<e path="format.neko.Value"/>
</f></iter>
		<loop set="method" line="121"><f a="vi:callb:b:ctx">
	<e path="format.neko.Value"/>
	<e path="format.neko.Value"/>
	<e path="format.neko.Value"/>
	<e path="format.neko.Value"/>
	<e path="format.neko.Value"/>
</f></loop>
		<use set="method" line="147"><f a="file:buf:ctx:content">
	<e path="format.neko.Value"/>
	<e path="format.neko.Value"/>
	<e path="format.neko.Value"/>
	<e path="format.neko.Value"/>
	<e path="format.neko.Value"/>
</f></use>
		<macros set="method" line="152"><f a="file:m">
	<e path="format.neko.Value"/>
	<e path="format.neko.Value"/>
	<e path="format.neko.Value"/>
</f></macros>
		<new public="1" set="method" line="37"><f a="ivm">
	<c path="format.neko.VM"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":reallyUsed"/></meta>
	</class>
	<class path="format.neko.VM" params="" file="format/neko/VM.hx">
		<opcodes><c path="Array"><e path="format.neko.Opcode"/></c></opcodes>
		<builtins><c path="format.neko.Builtins"/></builtins>
		<hfields><x path="Map">
	<x path="Int"/>
	<c path="String"/>
</x></hfields>
		<hbuiltins><x path="Map">
	<x path="Int"/>
	<e path="format.neko.Value"/>
</x></hbuiltins>
		<hloader><x path="Int"/></hloader>
		<hexports><x path="Int"/></hexports>
		<vthis><e path="format.neko.Value"/></vthis>
		<env><c path="Array"><e path="format.neko.Value"/></c></env>
		<stack><c path="haxe.ds.GenericStack"><e path="format.neko.Value"/></c></stack>
		<module><c path="format.neko.Module"/></module>
		<hash set="method" line="64"><f a="s">
	<c path="String"/>
	<x path="Int"/>
</f></hash>
		<doPrint public="1" set="dynamic" line="77"><f a="s">
	<c path="String"/>
	<x path="Void"/>
</f></doPrint>
		<hashField public="1" set="method" line="81"><f a="f">
	<c path="String"/>
	<x path="Int"/>
</f></hashField>
		<_abstract public="1" params="T" set="method" line="92"><f a="b:t">
	<e path="format.neko.Value"/>
	<x path="Class"><c path="_abstract.T"/></x>
	<c path="_abstract.T"/>
</f></_abstract>
		<valueToString public="1" set="method" line="103"><f a="v">
	<e path="format.neko.Value"/>
	<c path="String"/>
</f></valueToString>
		<exc set="method" line="107"><f a="v">
	<e path="format.neko.Value"/>
	<x path="Void"/>
</f></exc>
		<loadPrim set="method" line="111"><f a="vprim:vargs">
	<e path="format.neko.Value"/>
	<e path="format.neko.Value"/>
	<e path="format.neko.Value"/>
</f></loadPrim>
		<defaultLoader public="1" set="method" line="125"><f a=""><c path="format.neko.ValueObject"/></f></defaultLoader>
		<load public="1" set="method" line="131"><f a="m:?loader" v=":null">
	<t path="format.neko.Data"/>
	<c path="format.neko.ValueObject"/>
	<c path="format.neko.Module"/>
</f></load>
		<error set="method" line="188"><f a="pc:msg">
	<x path="Int"/>
	<c path="String"/>
	<x path="Void"/>
</f></error>
		<fieldName set="method" line="201"><f a="fid">
	<x path="Int"/>
	<c path="String"/>
</f></fieldName>
		<call public="1" set="method" line="206"><f a="vthis:vfun:args">
	<e path="format.neko.Value"/>
	<e path="format.neko.Value"/>
	<c path="Array"><e path="format.neko.Value"/></c>
	<e path="format.neko.Value"/>
</f></call>
		<fcall set="method" line="212"><f a="m:pc">
	<c path="format.neko.Module"/>
	<x path="Int"/>
	<e path="format.neko.Value"/>
</f></fcall>
		<mcall set="method" line="220"><f a="pc:obj:f:nargs">
	<x path="Int"/>
	<e path="format.neko.Value"/>
	<e path="format.neko.Value"/>
	<x path="Int"/>
	<e path="format.neko.Value"/>
</f></mcall>
		<compare get="inline" set="null" line="280"><f a="pc:a:b">
	<x path="Int"/>
	<e path="format.neko.Value"/>
	<e path="format.neko.Value"/>
	<x path="Int"/>
</f></compare>
		<accIndex get="inline" set="null" line="284"><f a="pc:acc:index">
	<x path="Int"/>
	<e path="format.neko.Value"/>
	<x path="Int"/>
	<e path="format.neko.Value"/>
</f></accIndex>
		<wrap public="1" set="method" line="297"><f a="v">
	<d/>
	<t path="Null"><e path="format.neko.Value"/></t>
</f></wrap>
		<unwrap public="1" set="method" line="317"><f a="v">
	<e path="format.neko.Value"/>
	<d/>
</f></unwrap>
		<getField public="1" set="method" line="355"><f a="v:fid">
	<e path="format.neko.Value"/>
	<x path="Int"/>
	<e path="format.neko.Value"/>
</f></getField>
		<loop set="method" line="376"><f a="pc">
	<x path="Int"/>
	<e path="format.neko.Value"/>
</f></loop>
		<new public="1" set="method" line="50"><f a=""><x path="Void"/></f></new>
	</class>
	<enum path="format.neko.Value" params="" file="format/neko/Value.hx">
		<VNull/>
		<VInt a="i"><x path="Int"/></VInt>
		<VFloat a="f"><x path="Float"/></VFloat>
		<VBool a="b"><x path="Bool"/></VBool>
		<VString a="s"><c path="String"/></VString>
		<VObject a="o"><c path="format.neko.ValueObject"/></VObject>
		<VArray a="a"><c path="Array"><e path="format.neko.Value"/></c></VArray>
		<VFunction a="f"><e path="format.neko.ValueFunction"/></VFunction>
		<VAbstract a="v"><c path="format.neko.ValueAbstract"/></VAbstract>
		<VProxy a="o"><d/></VProxy>
		<VProxyFunction a="f"><d/></VProxyFunction>
	</enum>
	<class path="format.neko.ValueObject" params="" file="format/neko/Value.hx" module="format.neko.Value">
		<fields public="1"><x path="Map">
	<x path="Int"/>
	<e path="format.neko.Value"/>
</x></fields>
		<proto public="1"><t path="Null"><c path="format.neko.ValueObject"/></t></proto>
		<new public="1" set="method" line="48"><f a="?p" v="null">
	<c path="format.neko.ValueObject"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":reallyUsed"/></meta>
	</class>
	<enum path="format.neko.ValueFunction" params="" file="format/neko/Value.hx" module="format.neko.Value">
		<VFun0 a="f"><f a=""><e path="format.neko.Value"/></f></VFun0>
		<VFun1 a="f"><f a="">
	<e path="format.neko.Value"/>
	<e path="format.neko.Value"/>
</f></VFun1>
		<VFun2 a="f"><f a=":">
	<e path="format.neko.Value"/>
	<e path="format.neko.Value"/>
	<e path="format.neko.Value"/>
</f></VFun2>
		<VFun3 a="f"><f a="::">
	<e path="format.neko.Value"/>
	<e path="format.neko.Value"/>
	<e path="format.neko.Value"/>
	<e path="format.neko.Value"/>
</f></VFun3>
		<VFun4 a="f"><f a=":::">
	<e path="format.neko.Value"/>
	<e path="format.neko.Value"/>
	<e path="format.neko.Value"/>
	<e path="format.neko.Value"/>
	<e path="format.neko.Value"/>
</f></VFun4>
		<VFun5 a="f"><f a="::::">
	<e path="format.neko.Value"/>
	<e path="format.neko.Value"/>
	<e path="format.neko.Value"/>
	<e path="format.neko.Value"/>
	<e path="format.neko.Value"/>
	<e path="format.neko.Value"/>
</f></VFun5>
		<VFunVar a="f"><f a="">
	<c path="Array"><e path="format.neko.Value"/></c>
	<e path="format.neko.Value"/>
</f></VFunVar>
	</enum>
	<class path="format.neko.Module" params="" file="format/neko/Value.hx" module="format.neko.Value">
		<code public="1"><t path="format.neko.Data"/></code>
		<gtable public="1"><c path="Array"><e path="format.neko.Value"/></c></gtable>
		<debug public="1"><t path="Null"><t path="format.neko.DebugInfos"/></t></debug>
		<exports public="1"><c path="format.neko.ValueObject"/></exports>
		<loader public="1"><c path="format.neko.ValueObject"/></loader>
		<new public="1" set="method" line="73"><f a="code:loader">
	<t path="format.neko.Data"/>
	<c path="format.neko.ValueObject"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":reallyUsed"/></meta>
	</class>
	<enum path="format.pbj.PBJChannel" params="" file="format/pbj/Data.hx" module="format.pbj.Data">
		<R/>
		<G/>
		<B/>
		<A/>
		<M2x2/>
		<M3x3/>
		<M4x4/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<enum path="format.pbj.PBJReg" params="" file="format/pbj/Data.hx" module="format.pbj.Data">
		<RInt a="n:?s">
			<x path="Int"/>
			<c path="Array"><e path="format.pbj.PBJChannel"/></c>
		</RInt>
		<RFloat a="n:?s">
			<x path="Int"/>
			<c path="Array"><e path="format.pbj.PBJChannel"/></c>
		</RFloat>
	</enum>
	<enum path="format.pbj.PBJType" params="" file="format/pbj/Data.hx" module="format.pbj.Data">
		<TFloat/>
		<TFloat2/>
		<TFloat3/>
		<TFloat4/>
		<TFloat2x2/>
		<TFloat3x3/>
		<TFloat4x4/>
		<TInt/>
		<TInt2/>
		<TInt3/>
		<TInt4/>
		<TString/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<enum path="format.pbj.PBJConst" params="" file="format/pbj/Data.hx" module="format.pbj.Data">
		<PFloat a="f"><x path="Float"/></PFloat>
		<PFloat2 a="f1:f2">
			<x path="Float"/>
			<x path="Float"/>
		</PFloat2>
		<PFloat3 a="f1:f2:f3">
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
		</PFloat3>
		<PFloat4 a="f1:f2:f3:f4">
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
		</PFloat4>
		<PFloat2x2 a="f"><c path="Array"><x path="Float"/></c></PFloat2x2>
		<PFloat3x3 a="f"><c path="Array"><x path="Float"/></c></PFloat3x3>
		<PFloat4x4 a="f"><c path="Array"><x path="Float"/></c></PFloat4x4>
		<PInt a="i"><x path="Int"/></PInt>
		<PInt2 a="i1:i2">
			<x path="Int"/>
			<x path="Int"/>
		</PInt2>
		<PInt3 a="i1:i2:i3">
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</PInt3>
		<PInt4 a="i1:i2:i3:i4">
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</PInt4>
		<PString a="s"><c path="String"/></PString>
	</enum>
	<typedef path="format.pbj._Data.R" params="" file="format/pbj/Data.hx" private="1" module="format.pbj.Data"><e path="format.pbj.PBJReg"/></typedef>
	<enum path="format.pbj.PBJOpcode" params="" file="format/pbj/Data.hx" module="format.pbj.Data">
		<OpNop/>
		<OpAdd a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpAdd>
		<OpSub a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpSub>
		<OpMul a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpMul>
		<OpRcp a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpRcp>
		<OpDiv a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpDiv>
		<OpAtan2 a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpAtan2>
		<OpPow a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpPow>
		<OpMod a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpMod>
		<OpMin a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpMin>
		<OpMax a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpMax>
		<OpStep a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpStep>
		<OpSin a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpSin>
		<OpCos a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpCos>
		<OpTan a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpTan>
		<OpASin a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpASin>
		<OpACos a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpACos>
		<OpATan a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpATan>
		<OpExp a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpExp>
		<OpExp2 a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpExp2>
		<OpLog a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpLog>
		<OpLog2 a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpLog2>
		<OpSqrt a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpSqrt>
		<OpRSqrt a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpRSqrt>
		<OpAbs a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpAbs>
		<OpSign a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpSign>
		<OpFloor a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpFloor>
		<OpCeil a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpCeil>
		<OpFract a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpFract>
		<OpMov a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpMov>
		<OpFloatToInt a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpFloatToInt>
		<OpIntToFloat a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpIntToFloat>
		<OpMatrixMatrixMult a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpMatrixMatrixMult>
		<OpVectorMatrixMult a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpVectorMatrixMult>
		<OpMatrixVectorMult a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpMatrixVectorMult>
		<OpNormalize a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpNormalize>
		<OpLength a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpLength>
		<OpDistance a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpDistance>
		<OpDotProduct a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpDotProduct>
		<OpCrossProduct a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpCrossProduct>
		<OpEqual a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpEqual>
		<OpNotEqual a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpNotEqual>
		<OpLessThan a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpLessThan>
		<OpLessThanEqual a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpLessThanEqual>
		<OpLogicalNot a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpLogicalNot>
		<OpLogicalAnd a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpLogicalAnd>
		<OpLogicalOr a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpLogicalOr>
		<OpLogicalXor a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpLogicalXor>
		<OpSampleNearest a="dst:src:srcTexture">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
			<x path="Int"/>
		</OpSampleNearest>
		<OpSampleLinear a="dst:src:srcTexture">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
			<x path="Int"/>
		</OpSampleLinear>
		<OpLoadInt a="dst:v">
			<t path="format.pbj._Data.R"/>
			<x path="Int"/>
		</OpLoadInt>
		<OpLoadFloat a="dst:v">
			<t path="format.pbj._Data.R"/>
			<x path="Float"/>
		</OpLoadFloat>
		<OpIf a="cond"><t path="format.pbj._Data.R"/></OpIf>
		<OpElse/>
		<OpEndIf/>
		<OpFloatToBool a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpFloatToBool>
		<OpBoolToFloat a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpBoolToFloat>
		<OpIntToBool a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpIntToBool>
		<OpBoolToInt a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpBoolToInt>
		<OpVectorEqual a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpVectorEqual>
		<OpVectorNotEqual a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpVectorNotEqual>
		<OpBoolAny a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpBoolAny>
		<OpBoolAll a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpBoolAll>
	</enum>
	<typedef path="format.pbj.PBJMeta" params="" file="format/pbj/Data.hx" module="format.pbj.Data"><a>
	<value><e path="format.pbj.PBJConst"/></value>
	<key><c path="String"/></key>
</a></typedef>
	<enum path="format.pbj.PBJParam" params="" file="format/pbj/Data.hx" module="format.pbj.Data">
		<Parameter a="type:out:reg">
			<e path="format.pbj.PBJType"/>
			<x path="Bool"/>
			<e path="format.pbj.PBJReg"/>
		</Parameter>
		<Texture a="channels:index">
			<x path="Int"/>
			<x path="Int"/>
		</Texture>
	</enum>
	<typedef path="format.pbj.PBJ" params="" file="format/pbj/Data.hx" module="format.pbj.Data"><a>
	<version><x path="Int"/></version>
	<parameters><c path="Array"><a>
	<p><e path="format.pbj.PBJParam"/></p>
	<name><c path="String"/></name>
	<metas><c path="Array"><t path="format.pbj.PBJMeta"/></c></metas>
</a></c></parameters>
	<name><c path="String"/></name>
	<metadatas><c path="Array"><t path="format.pbj.PBJMeta"/></c></metadatas>
	<code><c path="Array"><e path="format.pbj.PBJOpcode"/></c></code>
</a></typedef>
	<class path="format.pbj.Reader" params="" file="format/pbj/Reader.hx">
		<i><c path="haxe.io.Input"/></i>
		<chans><c path="Array"><e path="format.pbj.PBJChannel"/></c></chans>
		<getType set="method" line="40"><f a="t">
	<x path="Int"/>
	<e path="format.pbj.PBJType"/>
</f></getType>
		<srcReg set="method" line="58"><f a="src:size">
	<x path="Int"/>
	<x path="Int"/>
	<e path="format.pbj.PBJReg"/>
</f></srcReg>
		<dstReg set="method" line="70"><f a="dst:mask">
	<x path="Int"/>
	<x path="Int"/>
	<e path="format.pbj.PBJReg"/>
</f></dstReg>
		<mReg set="method" line="82"><f a="r:matrix">
	<x path="Int"/>
	<x path="Int"/>
	<e path="format.pbj.PBJReg"/>
</f></mReg>
		<reg set="method" line="86"><f a="t:s">
	<x path="Int"/>
	<t path="Null"><c path="Array"><e path="format.pbj.PBJChannel"/></c></t>
	<e path="format.pbj.PBJReg"/>
</f></reg>
		<readFloat set="method" line="92"><f a=""><x path="Float"/></f></readFloat>
		<readInt get="inline" set="null" line="99"><f a=""><x path="Int"/></f></readInt>
		<readValue set="method" line="107"><f a="t">
	<e path="format.pbj.PBJType"/>
	<e path="format.pbj.PBJConst"/>
</f></readValue>
		<assert set="method" line="145"><f a="v1:v2">
	<d/>
	<d/>
	<x path="Void"/>
</f></assert>
		<readOp set="method" line="149"><f a="op">
	<f a=":">
		<e path="format.pbj.PBJReg"/>
		<e path="format.pbj.PBJReg"/>
		<e path="format.pbj.PBJOpcode"/>
	</f>
	<e path="format.pbj.PBJOpcode"/>
</f></readOp>
		<read public="1" set="method" line="166"><f a=""><t path="format.pbj.PBJ"/></f></read>
		<new public="1" set="method" line="35"><f a="i">
	<c path="haxe.io.Input"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="format.pbj.Tools" params="" file="format/pbj/Tools.hx">
		<ext set="method" line="32" static="1"><f a="e">
	<c path="Array"><e path="format.pbj.PBJChannel"/></c>
	<c path="String"/>
</f></ext>
		<dumpReg public="1" set="method" line="49" static="1"><f a="r">
	<e path="format.pbj.PBJReg"/>
	<c path="String"/>
</f></dumpReg>
		<call set="method" line="56" static="1"><f a="p:vl">
	<c path="String"/>
	<c path="Array"><d/></c>
	<c path="String"/>
</f></call>
		<dumpValue public="1" set="method" line="60" static="1"><f a="v">
	<e path="format.pbj.PBJConst"/>
	<c path="String"/>
</f></dumpValue>
		<getValueType public="1" set="method" line="77" static="1"><f a="v">
	<e path="format.pbj.PBJConst"/>
	<e path="format.pbj.PBJType"/>
</f></getValueType>
		<getMatrixMaskBits public="1" set="method" line="94" static="1"><f a="n">
	<x path="Int"/>
	<x path="Int"/>
</f></getMatrixMaskBits>
		<dumpType public="1" set="method" line="103" static="1"><f a="t">
	<x path="EnumValue"/>
	<c path="String"/>
</f></dumpType>
		<dumpOpCode public="1" set="method" line="107" static="1"><f a="c">
	<e path="format.pbj.PBJOpcode"/>
	<c path="String"/>
</f></dumpOpCode>
		<dump public="1" set="method" line="124" static="1"><f a="p">
	<t path="format.pbj.PBJ"/>
	<c path="String"/>
</f></dump>
		<meta><m n=":reallyUsed"/></meta>
	</class>
	<class path="format.pbj.Writer" params="" file="format/pbj/Writer.hx">
		<o><c path="haxe.io.Output"/></o>
		<getTypeCode set="method" line="38"><f a="t">
	<e path="format.pbj.PBJType"/>
	<x path="Int"/>
</f></getTypeCode>
		<regCode set="method" line="55"><f a="r">
	<e path="format.pbj.PBJReg"/>
	<x path="Int"/>
</f></regCode>
		<getMatrixBits set="method" line="62"><f a="t">
	<e path="format.pbj.PBJType"/>
	<x path="Int"/>
</f></getMatrixBits>
		<getSizeBits set="method" line="71"><f a="t">
	<e path="format.pbj.PBJType"/>
	<x path="Int"/>
</f></getSizeBits>
		<assert set="method" line="82"><f a="v1:v2">
	<d/>
	<d/>
	<x path="Void"/>
</f></assert>
		<writeFloat set="method" line="86"><f a="v">
	<x path="Float"/>
	<x path="Void"/>
</f></writeFloat>
		<writeValue set="method" line="92"><f a="v">
	<e path="format.pbj.PBJConst"/>
	<x path="Void"/>
</f></writeValue>
		<writeMeta set="method" line="140"><f a="m">
	<t path="format.pbj.PBJMeta"/>
	<x path="Void"/>
</f></writeMeta>
		<destMask set="method" line="148"><f a="e">
	<c path="Array"><e path="format.pbj.PBJChannel"/></c>
	<x path="Int"/>
</f></destMask>
		<srcSwizzle set="method" line="171"><f a="e:size">
	<c path="Array"><e path="format.pbj.PBJChannel"/></c>
	<x path="Int"/>
	<x path="Int"/>
</f></srcSwizzle>
		<writeDest set="method" line="188"><f a="dst:size">
	<e path="format.pbj.PBJReg"/>
	<x path="Int"/>
	<x path="Void"/>
</f></writeDest>
		<writeSrc set="method" line="194"><f a="src:size">
	<e path="format.pbj.PBJReg"/>
	<x path="Int"/>
	<x path="Void"/>
</f></writeSrc>
		<writeOp set="method" line="199"><f a="code:dst:src">
	<x path="Int"/>
	<e path="format.pbj.PBJReg"/>
	<e path="format.pbj.PBJReg"/>
	<x path="Void"/>
</f></writeOp>
		<writeCode set="method" line="219"><f a="c">
	<e path="format.pbj.PBJOpcode"/>
	<x path="Void"/>
</f></writeCode>
		<writeInt get="inline" set="null" line="316"><f a="v">
	<x path="Int"/>
	<x path="Void"/>
</f></writeInt>
		<write public="1" set="method" line="324"><f a="p">
	<t path="format.pbj.PBJ"/>
	<x path="Void"/>
</f></write>
		<new public="1" set="method" line="34"><f a="o">
	<c path="haxe.io.Output"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.io.Bytes" params="" file="D:\Projects\haxe\std/haxe/io/Bytes.hx">
		<alloc public="1" set="method" line="367" static="1"><f a="length">
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></alloc>
		<ofString public="1" set="method" line="394" static="1"><f a="s">
	<c path="String"/>
	<c path="haxe.io.Bytes"/>
</f></ofString>
		<length public="1" set="null"><x path="Int"/></length>
		<b><t path="haxe.io.BytesData"/></b>
		<blit public="1" set="method" line="79"><f a="pos:src:srcpos:len">
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></blit>
		<fill public="1" set="method" line="114"><f a="pos:len:value">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></fill>
		<sub public="1" set="method" line="133"><f a="pos:len">
	<x path="Int"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></sub>
		<getString public="1" set="method" line="269"><f a="pos:len">
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
</f></getString>
		<toString public="1" set="method" line="328"><f a=""><c path="String"/></f></toString>
		<new set="method" line="33"><f a="length:b">
	<x path="Int"/>
	<t path="haxe.io.BytesData"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":keep"/>
			<m n=":reallyUsed"/>
		</meta>
	</class>
	<class path="format.pdf.Crypt" params="" file="format/pdf/Crypt.hx">
		<PAD_BYTES line="32" static="1"><c path="haxe.io.Bytes"/></PAD_BYTES>
		<initPadBytes set="method" line="33" static="1"><f a=""><c path="haxe.io.Bytes"/></f></initPadBytes>
		<version><x path="Int"/></version>
		<revision><x path="Int"/></revision>
		<fileKey><c path="haxe.io.Bytes"/></fileKey>
		<userPassword><c path="String"/></userPassword>
		<decrypt public="1" set="method" line="50"><f a="data">
	<c path="Array"><e path="format.pdf.Data"/></c>
	<c path="Array"><e path="format.pdf.Data"/></c>
</f></decrypt>
		<decryptObject set="method" line="86"><f a="key:o">
	<c path="haxe.io.Bytes"/>
	<e path="format.pdf.Data"/>
	<e path="format.pdf.Data"/>
</f></decryptObject>
		<decryptString set="method" line="115"><f a="s:k">
	<c path="String"/>
	<c path="haxe.io.Bytes"/>
	<c path="String"/>
</f></decryptString>
		<decryptBytes set="method" line="119"><f a="b:k">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></decryptBytes>
		<buildFileKey set="method" line="126"><f a="fileId:h">
	<e path="format.pdf.Data"/>
	<x path="Map">
		<c path="String"/>
		<e path="format.pdf.Data"/>
	</x>
	<c path="haxe.io.Bytes"/>
</f></buildFileKey>
		<buildObjectKey set="method" line="167"><f a="id:rev">
	<x path="Int"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></buildObjectKey>
		<new public="1" set="method" line="46"><f a="?pass" v="null">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":reallyUsed"/></meta>
	</class>
	<enum path="format.pdf.Data" params="" file="format/pdf/Data.hx">
		<DNull/>
		<DBool a="b"><x path="Bool"/></DBool>
		<DNumber a="n"><x path="Float"/></DNumber>
		<DString a="s"><c path="String"/></DString>
		<DHexString a="s"><c path="String"/></DHexString>
		<DName a="s"><c path="String"/></DName>
		<DArray a="a"><c path="Array"><e path="format.pdf.Data"/></c></DArray>
		<DDict a="h"><x path="Map">
	<c path="String"/>
	<e path="format.pdf.Data"/>
</x></DDict>
		<DIndirect a="id:rev:v">
			<x path="Int"/>
			<x path="Int"/>
			<e path="format.pdf.Data"/>
		</DIndirect>
		<DStream a="b:props">
			<c path="haxe.io.Bytes"/>
			<x path="Map">
				<c path="String"/>
				<e path="format.pdf.Data"/>
			</x>
		</DStream>
		<DRef a="id:rev">
			<x path="Int"/>
			<x path="Int"/>
		</DRef>
		<DXRefTable a="t"><c path="Array"><a>
	<start><x path="Int"/></start>
	<entries><c path="Array"><a>
	<used><x path="Bool"/></used>
	<offset><x path="Int"/></offset>
	<gen><x path="Int"/></gen>
</a></c></entries>
</a></c></DXRefTable>
		<DTrailer a="o"><e path="format.pdf.Data"/></DTrailer>
		<DStartXRef a="pos"><x path="Int"/></DStartXRef>
		<DComment a="s"><c path="String"/></DComment>
	</enum>
	<class path="format.pdf.Extract" params="" file="format/pdf/Extract.hx">
		<expect set="method" line="31" static="1"><f a="kind:o">
	<c path="String"/>
	<e path="format.pdf.Data"/>
	<d/>
</f></expect>
		<int public="1" set="method" line="35" static="1"><f a="o">
	<e path="format.pdf.Data"/>
	<x path="Int"/>
</f></int>
		<string public="1" set="method" line="47" static="1"><f a="o">
	<e path="format.pdf.Data"/>
	<c path="String"/>
</f></string>
		<bool public="1" set="method" line="55" static="1"><f a="o:?def" v=":null">
	<e path="format.pdf.Data"/>
	<x path="Bool"/>
	<t path="Null"><x path="Bool"/></t>
</f></bool>
		<meta><m n=":reallyUsed"/></meta>
	</class>
	<class path="format.pdf.Filter" params="" file="format/pdf/Filter.hx">
		<unfilter public="1" set="method" line="35"><f a="data">
	<c path="Array"><e path="format.pdf.Data"/></c>
	<c path="Array"><e path="format.pdf.Data"/></c>
</f></unfilter>
		<unfilterObject public="1" set="method" line="42"><f a="o">
	<e path="format.pdf.Data"/>
	<e path="format.pdf.Data"/>
</f></unfilterObject>
		<runFilter set="method" line="72"><f a="b:filter:props">
	<c path="haxe.io.Bytes"/>
	<e path="format.pdf.Data"/>
	<x path="Map">
		<c path="String"/>
		<e path="format.pdf.Data"/>
	</x>
	<c path="haxe.io.Bytes"/>
</f></runFilter>
		<new public="1" set="method" line="32"><f a=""><x path="Void"/></f></new>
	</class>
	<enum path="format.pdf._Reader.Break" params="" file="format/pdf/Reader.hx" private="1" module="format.pdf.Reader">
		<BDictEnd/>
		<BEndObj/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<class path="format.pdf.Reader" params="" file="format/pdf/Reader.hx">
		<char><t path="Null"><x path="Int"/></t></char>
		<objects><c path="Array"><e path="format.pdf.Data"/></c></objects>
		<readEOL set="method" line="47"><f a="i">
	<c path="haxe.io.Input"/>
	<x path="Void"/>
</f></readEOL>
		<invalidChar set="method" line="57"><f a="c">
	<x path="Int"/>
	<unknown/>
</f></invalidChar>
		<invalidBreak set="method" line="61"><f a="e">
	<e path="format.pdf._Reader.Break"/>
	<unknown/>
</f></invalidBreak>
		<readObjectEof set="method" line="65"><f a="i">
	<c path="haxe.io.Input"/>
	<e path="format.pdf.Data"/>
</f></readObjectEof>
		<readObject set="method" line="82"><f a="i">
	<c path="haxe.io.Input"/>
	<e path="format.pdf.Data"/>
</f></readObject>
		<readDictionnary set="method" line="275"><f a="i">
	<c path="haxe.io.Input"/>
	<e path="format.pdf.Data"/>
</f></readDictionnary>
		<readIndirect set="method" line="301"><f a="i">
	<c path="haxe.io.Input"/>
	<e path="format.pdf.Data"/>
</f></readIndirect>
		<readStream set="method" line="319"><f a="i">
	<c path="haxe.io.Input"/>
	<e path="format.pdf.Data"/>
</f></readStream>
		<readXRefTable set="method" line="375"><f a="i">
	<c path="haxe.io.Input"/>
	<e path="format.pdf.Data"/>
</f></readXRefTable>
		<read public="1" set="method" line="404"><f a="i">
	<c path="haxe.io.Input"/>
	<c path="Array"><e path="format.pdf.Data"/></c>
</f></read>
		<new public="1" set="method" line="44"><f a=""><x path="Void"/></f></new>
	</class>
	<enum path="format.png.Color" params="" file="format/png/Data.hx" module="format.png.Data">
		<ColGrey a="alpha"><x path="Bool"/></ColGrey>
		<ColTrue a="alpha"><x path="Bool"/></ColTrue>
		<ColIndexed/>
	</enum>
	<typedef path="format.png.Header" params="" file="format/png/Data.hx" module="format.png.Data"><a>
	<width><x path="Int"/></width>
	<interlaced><x path="Bool"/></interlaced>
	<height><x path="Int"/></height>
	<color><e path="format.png.Color"/></color>
	<colbits><x path="Int"/></colbits>
</a></typedef>
	<enum path="format.png.Chunk" params="" file="format/png/Data.hx" module="format.png.Data">
		<CEnd/>
		<CHeader a="h"><t path="format.png.Header"/></CHeader>
		<CData a="b"><c path="haxe.io.Bytes"/></CData>
		<CPalette a="b"><c path="haxe.io.Bytes"/></CPalette>
		<CUnknown a="id:data">
			<c path="String"/>
			<c path="haxe.io.Bytes"/>
		</CUnknown>
	</enum>
	<typedef path="format.png.Data" params="" file="format/png/Data.hx"><c path="List"><e path="format.png.Chunk"/></c></typedef>
	<class path="format.png.Reader" params="" file="format/png/Reader.hx">
		<i><c path="haxe.io.Input"/></i>
		<checkCRC public="1"><x path="Bool"/></checkCRC>
		<read public="1" set="method" line="41"><f a=""><t path="format.png.Data"/></f></read>
		<readHeader set="method" line="56"><f a="i">
	<c path="haxe.io.Input"/>
	<t path="format.png.Header"/>
</f></readHeader>
		<readChunk set="method" line="91"><f a=""><e path="format.png.Chunk"/></f></readChunk>
		<new public="1" set="method" line="35"><f a="i">
	<c path="haxe.io.Input"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="format.png.Tools" params="" file="format/png/Tools.hx">
		<getHeader public="1" set="method" line="35" static="1">
			<f a="d">
				<t path="format.png.Data"/>
				<t path="format.png.Header"/>
			</f>
			<haxe_doc>Returns the PNG header informations. Throws an exception if no header found.</haxe_doc>
		</getHeader>
		<getPalette public="1" set="method" line="47" static="1">
			<f a="d">
				<t path="format.png.Data"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Return the PNG palette colors, or null if no palette chunk was found</haxe_doc>
		</getPalette>
		<filter get="inline" set="null" line="56" static="1"><f a="data:x:y:stride:prev:p:?numChannels" v="::::::4">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></filter>
		<reverseBytes public="1" set="method" line="69" static="1">
			<f a="b">
				<c path="haxe.io.Bytes"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Converts from BGRA to ARGB and the other way by reversing bytes.</haxe_doc>
		</reverseBytes>
		<extractGrey public="1" set="method" line="106" static="1">
			<f a="d">
				<t path="format.png.Data"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":noDebug"/></meta>
			<haxe_doc>Decode the greyscale PNG data and apply filters, extracting only the grey channel if alpha is present.</haxe_doc>
		</extractGrey>
		<extract32 public="1" set="method" line="205" static="1">
			<f a="d:?bytes" v=":null">
				<t path="format.png.Data"/>
				<c path="haxe.io.Bytes"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":noDebug"/></meta>
			<haxe_doc>Decode the PNG data and apply filters. By default this will output BGRA low-endian format. You can use the [reverseBytes] function to inverse the bytes to ARGB big-endian format.</haxe_doc>
		</extract32>
		<buildGrey public="1" set="method" line="617" static="1">
			<f a="width:height:data">
				<x path="Int"/>
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
				<t path="format.png.Data"/>
			</f>
			<haxe_doc>Creates PNG data from bytes that contains one bytes (grey values) for each pixel.</haxe_doc>
		</buildGrey>
		<buildRGB public="1" set="method" line="636" static="1">
			<f a="width:height:data">
				<x path="Int"/>
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
				<t path="format.png.Data"/>
			</f>
			<haxe_doc>Creates PNG data from bytes that contains three bytes (R,G and B values) for each pixel.</haxe_doc>
		</buildRGB>
		<build32ARGB public="1" set="method" line="659" static="1">
			<f a="width:height:data">
				<x path="Int"/>
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
				<t path="format.png.Data"/>
			</f>
			<haxe_doc>Creates PNG data from bytes that contains four bytes in ARGB format for each pixel.</haxe_doc>
		</build32ARGB>
		<build32BGRA public="1" set="method" line="683" static="1">
			<f a="width:height:data">
				<x path="Int"/>
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
				<t path="format.png.Data"/>
			</f>
			<haxe_doc>Creates PNG data from bytes that contains four bytes in BGRA format for each pixel.</haxe_doc>
		</build32BGRA>
		<meta><m n=":reallyUsed"/></meta>
	</class>
	<class path="format.png.Writer" params="" file="format/png/Writer.hx">
		<o><c path="haxe.io.Output"/></o>
		<write public="1" set="method" line="39"><f a="png">
	<t path="format.png.Data"/>
	<x path="Void"/>
</f></write>
		<writeChunk set="method" line="75"><f a="id:data">
	<c path="String"/>
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></writeChunk>
		<new public="1" set="method" line="34"><f a="o">
	<c path="haxe.io.Output"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="format.swf.TagId" params="" file="format/swf/Constants.hx" module="format.swf.Constants">
		<End public="1" get="inline" set="null" line="37" static="1"><x path="Int"/></End>
		<ShowFrame public="1" get="inline" set="null" line="38" static="1"><x path="Int"/></ShowFrame>
		<DefineShape public="1" get="inline" set="null" line="39" static="1"><x path="Int"/></DefineShape>
		<PlaceObject public="1" get="inline" set="null" line="40" static="1"><x path="Int"/></PlaceObject>
		<RemoveObject public="1" get="inline" set="null" line="41" static="1"><x path="Int"/></RemoveObject>
		<DefineBits public="1" get="inline" set="null" line="42" static="1"><x path="Int"/></DefineBits>
		<DefineButton public="1" get="inline" set="null" line="43" static="1"><x path="Int"/></DefineButton>
		<JPEGTables public="1" get="inline" set="null" line="44" static="1"><x path="Int"/></JPEGTables>
		<SetBackgroundColor public="1" get="inline" set="null" line="45" static="1"><x path="Int"/></SetBackgroundColor>
		<DefineFont public="1" get="inline" set="null" line="46" static="1"><x path="Int"/></DefineFont>
		<DefineText public="1" get="inline" set="null" line="47" static="1"><x path="Int"/></DefineText>
		<DoAction public="1" get="inline" set="null" line="48" static="1"><x path="Int"/></DoAction>
		<DefineFontInfo public="1" get="inline" set="null" line="49" static="1"><x path="Int"/></DefineFontInfo>
		<DefineSound public="1" get="inline" set="null" line="50" static="1"><x path="Int"/></DefineSound>
		<StartSound public="1" get="inline" set="null" line="51" static="1"><x path="Int"/></StartSound>
		<DefineButtonSound public="1" get="inline" set="null" line="52" static="1"><x path="Int"/></DefineButtonSound>
		<SoundStreamHead public="1" get="inline" set="null" line="53" static="1"><x path="Int"/></SoundStreamHead>
		<SoundStreamBlock public="1" get="inline" set="null" line="54" static="1"><x path="Int"/></SoundStreamBlock>
		<DefineBitsLossless public="1" get="inline" set="null" line="55" static="1"><x path="Int"/></DefineBitsLossless>
		<DefineBitsJPEG2 public="1" get="inline" set="null" line="56" static="1"><x path="Int"/></DefineBitsJPEG2>
		<DefineShape2 public="1" get="inline" set="null" line="57" static="1"><x path="Int"/></DefineShape2>
		<DefineButtonCxform public="1" get="inline" set="null" line="58" static="1"><x path="Int"/></DefineButtonCxform>
		<Protect public="1" get="inline" set="null" line="59" static="1"><x path="Int"/></Protect>
		<PlaceObject2 public="1" get="inline" set="null" line="60" static="1"><x path="Int"/></PlaceObject2>
		<RemoveObject2 public="1" get="inline" set="null" line="61" static="1"><x path="Int"/></RemoveObject2>
		<DefineShape3 public="1" get="inline" set="null" line="62" static="1"><x path="Int"/></DefineShape3>
		<DefineText2 public="1" get="inline" set="null" line="63" static="1"><x path="Int"/></DefineText2>
		<DefineButton2 public="1" get="inline" set="null" line="64" static="1"><x path="Int"/></DefineButton2>
		<DefineBitsJPEG3 public="1" get="inline" set="null" line="65" static="1"><x path="Int"/></DefineBitsJPEG3>
		<DefineBitsLossless2 public="1" get="inline" set="null" line="66" static="1"><x path="Int"/></DefineBitsLossless2>
		<DefineEditText public="1" get="inline" set="null" line="67" static="1"><x path="Int"/></DefineEditText>
		<DefineSprite public="1" get="inline" set="null" line="68" static="1"><x path="Int"/></DefineSprite>
		<FrameLabel public="1" get="inline" set="null" line="69" static="1"><x path="Int"/></FrameLabel>
		<SoundStreamHead2 public="1" get="inline" set="null" line="70" static="1"><x path="Int"/></SoundStreamHead2>
		<DefineMorphShape public="1" get="inline" set="null" line="71" static="1"><x path="Int"/></DefineMorphShape>
		<DefineFont2 public="1" get="inline" set="null" line="72" static="1"><x path="Int"/></DefineFont2>
		<ExportAssets public="1" get="inline" set="null" line="73" static="1"><x path="Int"/></ExportAssets>
		<ImportAssets public="1" get="inline" set="null" line="74" static="1"><x path="Int"/></ImportAssets>
		<EnableDebugger public="1" get="inline" set="null" line="75" static="1"><x path="Int"/></EnableDebugger>
		<DoInitAction public="1" get="inline" set="null" line="76" static="1"><x path="Int"/></DoInitAction>
		<DefineVideoStream public="1" get="inline" set="null" line="77" static="1"><x path="Int"/></DefineVideoStream>
		<VideoFrame public="1" get="inline" set="null" line="78" static="1"><x path="Int"/></VideoFrame>
		<DefineFontInfo2 public="1" get="inline" set="null" line="79" static="1"><x path="Int"/></DefineFontInfo2>
		<EnableDebugger2 public="1" get="inline" set="null" line="80" static="1"><x path="Int"/></EnableDebugger2>
		<ScriptLimits public="1" get="inline" set="null" line="81" static="1"><x path="Int"/></ScriptLimits>
		<SetTabIndex public="1" get="inline" set="null" line="82" static="1"><x path="Int"/></SetTabIndex>
		<FileAttributes public="1" get="inline" set="null" line="83" static="1"><x path="Int"/></FileAttributes>
		<PlaceObject3 public="1" get="inline" set="null" line="84" static="1"><x path="Int"/></PlaceObject3>
		<ImportAssets2 public="1" get="inline" set="null" line="85" static="1"><x path="Int"/></ImportAssets2>
		<RawABC public="1" get="inline" set="null" line="86" static="1"><x path="Int"/></RawABC>
		<DefineFontAlignZones public="1" get="inline" set="null" line="87" static="1"><x path="Int"/></DefineFontAlignZones>
		<CSMTextSettings public="1" get="inline" set="null" line="88" static="1"><x path="Int"/></CSMTextSettings>
		<DefineFont3 public="1" get="inline" set="null" line="89" static="1"><x path="Int"/></DefineFont3>
		<SymbolClass public="1" get="inline" set="null" line="90" static="1"><x path="Int"/></SymbolClass>
		<Metadata public="1" get="inline" set="null" line="91" static="1"><x path="Int"/></Metadata>
		<DefineScalingGrid public="1" get="inline" set="null" line="92" static="1"><x path="Int"/></DefineScalingGrid>
		<DoABC public="1" get="inline" set="null" line="93" static="1"><x path="Int"/></DoABC>
		<DefineShape4 public="1" get="inline" set="null" line="94" static="1"><x path="Int"/></DefineShape4>
		<DefineMorphShape2 public="1" get="inline" set="null" line="95" static="1"><x path="Int"/></DefineMorphShape2>
		<DefineSceneAndFrameLabelData public="1" get="inline" set="null" line="96" static="1"><x path="Int"/></DefineSceneAndFrameLabelData>
		<DefineBinaryData public="1" get="inline" set="null" line="97" static="1"><x path="Int"/></DefineBinaryData>
		<DefineFontName public="1" get="inline" set="null" line="98" static="1"><x path="Int"/></DefineFontName>
		<StartSound2 public="1" get="inline" set="null" line="99" static="1"><x path="Int"/></StartSound2>
		<DefineBitsJPEG4 public="1" get="inline" set="null" line="100" static="1"><x path="Int"/></DefineBitsJPEG4>
		<DefineFont4 public="1" get="inline" set="null" line="101" static="1"><x path="Int"/></DefineFont4>
		<haxe_doc>* Tag id constants
 * not for public usage</haxe_doc>
	</class>
	<class path="format.swf.FillStyleTypeId" params="" file="format/swf/Constants.hx" module="format.swf.Constants">
		<Solid public="1" get="inline" set="null" line="105" static="1"><x path="Int"/></Solid>
		<LinearGradient public="1" get="inline" set="null" line="106" static="1"><x path="Int"/></LinearGradient>
		<RadialGradient public="1" get="inline" set="null" line="107" static="1"><x path="Int"/></RadialGradient>
		<FocalRadialGradient public="1" get="inline" set="null" line="108" static="1"><x path="Int"/></FocalRadialGradient>
		<RepeatingBitmap public="1" get="inline" set="null" line="109" static="1"><x path="Int"/></RepeatingBitmap>
		<ClippedBitmap public="1" get="inline" set="null" line="110" static="1"><x path="Int"/></ClippedBitmap>
		<NonSmoothedRepeatingBitmap public="1" get="inline" set="null" line="111" static="1"><x path="Int"/></NonSmoothedRepeatingBitmap>
		<NonSmoothedClippedBitmap public="1" get="inline" set="null" line="112" static="1"><x path="Int"/></NonSmoothedClippedBitmap>
	</class>
	<typedef path="format.swf.Fixed" params="" file="format/swf/Data.hx" module="format.swf.Data"><x path="Int"/></typedef>
	<typedef path="format.swf.Fixed8" params="" file="format/swf/Data.hx" module="format.swf.Data"><x path="Int"/></typedef>
	<typedef path="format.swf.SWF" params="" file="format/swf/Data.hx" module="format.swf.Data"><a>
	<tags><c path="Array"><e path="format.swf.SWFTag"/></c></tags>
	<header><t path="format.swf.SWFHeader"/></header>
</a></typedef>
	<enum path="format.swf.SWFTag" params="" file="format/swf/Data.hx" module="format.swf.Data">
		<TShowFrame/>
		<TShape a="id:data">
			<x path="Int"/>
			<e path="format.swf.ShapeData"/>
		</TShape>
		<TMorphShape a="id:data">
			<x path="Int"/>
			<e path="format.swf.MorphShapeData"/>
		</TMorphShape>
		<TFont a="id:data">
			<x path="Int"/>
			<e path="format.swf.FontData"/>
		</TFont>
		<TFontInfo a="id:data">
			<x path="Int"/>
			<e path="format.swf.FontInfoData"/>
		</TFontInfo>
		<TBackgroundColor a="color"><x path="Int"/></TBackgroundColor>
		<TDoActions a="data"><c path="haxe.io.Bytes"/></TDoActions>
		<TClip a="id:frames:tags">
			<x path="Int"/>
			<x path="Int"/>
			<c path="Array"><e path="format.swf.SWFTag"/></c>
		</TClip>
		<TPlaceObject2 a="po"><c path="format.swf.PlaceObject"/></TPlaceObject2>
		<TPlaceObject3 a="po"><c path="format.swf.PlaceObject"/></TPlaceObject3>
		<TRemoveObject2 a="depth"><x path="Int"/></TRemoveObject2>
		<TFrameLabel a="label:anchor">
			<c path="String"/>
			<x path="Bool"/>
		</TFrameLabel>
		<TExport a="el"><c path="Array"><a>
	<name><c path="String"/></name>
	<cid><x path="Int"/></cid>
</a></c></TExport>
		<TDoInitActions a="id:data">
			<x path="Int"/>
			<c path="haxe.io.Bytes"/>
		</TDoInitActions>
		<TActionScript3 a="data:?context">
			<c path="haxe.io.Bytes"/>
			<t path="format.swf.AS3Context"/>
		</TActionScript3>
		<TSymbolClass a="symbols"><c path="Array"><t path="format.swf.SymData"/></c></TSymbolClass>
		<TExportAssets a="symbols"><c path="Array"><t path="format.swf.SymData"/></c></TExportAssets>
		<TSandBox a="useDirectBlit:useGpu:hasMeta:useAs3:useNetwork">
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Bool"/>
		</TSandBox>
		<TBitsLossless a="data"><t path="format.swf.Lossless"/></TBitsLossless>
		<TBitsLossless2 a="data"><t path="format.swf.Lossless"/></TBitsLossless2>
		<TBitsJPEG a="id:data">
			<x path="Int"/>
			<e path="format.swf.JPEGData"/>
		</TBitsJPEG>
		<TJPEGTables a="data"><c path="haxe.io.Bytes"/></TJPEGTables>
		<TBinaryData a="id:data">
			<x path="Int"/>
			<c path="haxe.io.Bytes"/>
		</TBinaryData>
		<TSound a="data"><t path="format.swf.Sound"/></TSound>
		<TUnknown a="id:data">
			<x path="Int"/>
			<c path="haxe.io.Bytes"/>
		</TUnknown>
	</enum>
	<typedef path="format.swf.SWFHeader" params="" file="format/swf/Data.hx" module="format.swf.Data"><a>
	<width><x path="Int"/></width>
	<version><x path="Int"/></version>
	<nframes><x path="Int"/></nframes>
	<height><x path="Int"/></height>
	<fps><t path="format.swf.Fixed8"/></fps>
	<compressed><x path="Bool"/></compressed>
</a></typedef>
	<typedef path="format.swf.AS3Context" params="" file="format/swf/Data.hx" module="format.swf.Data"><a>
	<label><c path="String"/></label>
	<id><x path="Int"/></id>
</a></typedef>
	<typedef path="format.swf.SymData" params="" file="format/swf/Data.hx" module="format.swf.Data"><a>
	<className><c path="String"/></className>
	<cid><x path="Int"/></cid>
</a></typedef>
	<class path="format.swf.PlaceObject" params="" file="format/swf/Data.hx" module="format.swf.Data">
		<depth public="1"><x path="Int"/></depth>
		<move public="1"><x path="Bool"/></move>
		<cid public="1"><t path="Null"><x path="Int"/></t></cid>
		<matrix public="1"><t path="Null"><t path="format.swf.Matrix"/></t></matrix>
		<color public="1"><t path="Null"><t path="format.swf.CXA"/></t></color>
		<ratio public="1"><t path="Null"><x path="Int"/></t></ratio>
		<instanceName public="1"><t path="Null"><c path="String"/></t></instanceName>
		<clipDepth public="1"><t path="Null"><x path="Int"/></t></clipDepth>
		<events public="1"><t path="Null"><c path="Array"><t path="format.swf.ClipEvent"/></c></t></events>
		<filters public="1"><t path="Null"><c path="Array"><e path="format.swf.Filter"/></c></t></filters>
		<blendMode public="1"><t path="Null"><e path="format.swf.BlendMode"/></t></blendMode>
		<bitmapCache public="1"><t path="Null"><x path="Int"/></t></bitmapCache>
		<hasImage public="1"><x path="Bool"/></hasImage>
		<className public="1"><t path="Null"><c path="String"/></t></className>
		<new public="1" set="method" line="102"><f a=""><x path="Void"/></f></new>
		<meta><m n=":reallyUsed"/></meta>
	</class>
	<typedef path="format.swf.Rect" params="" file="format/swf/Data.hx" module="format.swf.Data"><a>
	<top><x path="Int"/></top>
	<right><x path="Int"/></right>
	<left><x path="Int"/></left>
	<bottom><x path="Int"/></bottom>
</a></typedef>
	<enum path="format.swf.ShapeData" params="" file="format/swf/Data.hx" module="format.swf.Data">
		<SHDShape1 a="bounds:shapes">
			<t path="format.swf.Rect"/>
			<t path="format.swf.ShapeWithStyleData"/>
		</SHDShape1>
		<SHDShape2 a="bounds:shapes">
			<t path="format.swf.Rect"/>
			<t path="format.swf.ShapeWithStyleData"/>
		</SHDShape2>
		<SHDShape3 a="bounds:shapes">
			<t path="format.swf.Rect"/>
			<t path="format.swf.ShapeWithStyleData"/>
		</SHDShape3>
		<SHDShape4 a="data"><t path="format.swf.Shape4Data"/></SHDShape4>
	</enum>
	<enum path="format.swf.MorphShapeData" params="" file="format/swf/Data.hx" module="format.swf.Data">
		<MSDShape1 a="data"><t path="format.swf.MorphShapeData1"/></MSDShape1>
		<MSDShape2 a="data"><t path="format.swf.MorphShapeData2"/></MSDShape2>
	</enum>
	<typedef path="format.swf.MorphShapeData1" params="" file="format/swf/Data.hx" module="format.swf.Data"><a>
	<startEdges><t path="format.swf.ShapeWithoutStyleData"/></startEdges>
	<startBounds><t path="format.swf.Rect"/></startBounds>
	<lineStyles><c path="Array"><t path="format.swf.Morph1LineStyle"/></c></lineStyles>
	<fillStyles><c path="Array"><e path="format.swf.MorphFillStyle"/></c></fillStyles>
	<endEdges><t path="format.swf.ShapeWithoutStyleData"/></endEdges>
	<endBounds><t path="format.swf.Rect"/></endBounds>
</a></typedef>
	<typedef path="format.swf.MorphShapeData2" params="" file="format/swf/Data.hx" module="format.swf.Data"><a>
	<useScalingStrokes><x path="Bool"/></useScalingStrokes>
	<useNonScalingStrokes><x path="Bool"/></useNonScalingStrokes>
	<startEdges><t path="format.swf.ShapeWithoutStyleData"/></startEdges>
	<startEdgeBounds><t path="format.swf.Rect"/></startEdgeBounds>
	<startBounds><t path="format.swf.Rect"/></startBounds>
	<lineStyles><c path="Array"><e path="format.swf.Morph2LineStyle"/></c></lineStyles>
	<fillStyles><c path="Array"><e path="format.swf.MorphFillStyle"/></c></fillStyles>
	<endEdges><t path="format.swf.ShapeWithoutStyleData"/></endEdges>
	<endEdgeBounds><t path="format.swf.Rect"/></endEdgeBounds>
	<endBounds><t path="format.swf.Rect"/></endBounds>
</a></typedef>
	<enum path="format.swf.MorphFillStyle" params="" file="format/swf/Data.hx" module="format.swf.Data">
		<MFSSolid a="startColor:endColor">
			<t path="format.swf.RGBA"/>
			<t path="format.swf.RGBA"/>
		</MFSSolid>
		<MFSLinearGradient a="startMatrix:endMatrix:gradients">
			<t path="format.swf.Matrix"/>
			<t path="format.swf.Matrix"/>
			<c path="Array"><t path="format.swf.MorphGradient"/></c>
		</MFSLinearGradient>
		<MFSRadialGradient a="startMatrix:endMatrix:gradients">
			<t path="format.swf.Matrix"/>
			<t path="format.swf.Matrix"/>
			<c path="Array"><t path="format.swf.MorphGradient"/></c>
		</MFSRadialGradient>
		<MFSBitmap a="cid:startMatrix:endMatrix:repeat:smooth">
			<x path="Int"/>
			<t path="format.swf.Matrix"/>
			<t path="format.swf.Matrix"/>
			<x path="Bool"/>
			<x path="Bool"/>
		</MFSBitmap>
	</enum>
	<typedef path="format.swf.Morph1LineStyle" params="" file="format/swf/Data.hx" module="format.swf.Data"><a>
	<startWidth><x path="Int"/></startWidth>
	<startColor><t path="format.swf.RGBA"/></startColor>
	<endWidth><x path="Int"/></endWidth>
	<endColor><t path="format.swf.RGBA"/></endColor>
</a></typedef>
	<enum path="format.swf.Morph2LineStyle" params="" file="format/swf/Data.hx" module="format.swf.Data">
		<M2LSNoFill a="startColor:endColor:data">
			<t path="format.swf.RGBA"/>
			<t path="format.swf.RGBA"/>
			<t path="format.swf.Morph2LineStyleData"/>
		</M2LSNoFill>
		<M2LSFill a="fill:data">
			<e path="format.swf.MorphFillStyle"/>
			<t path="format.swf.Morph2LineStyleData"/>
		</M2LSFill>
	</enum>
	<typedef path="format.swf.Morph2LineStyleData" params="" file="format/swf/Data.hx" module="format.swf.Data"><a>
	<startWidth><x path="Int"/></startWidth>
	<startCapStyle><e path="format.swf.LineCapStyle"/></startCapStyle>
	<pixelHinting><x path="Bool"/></pixelHinting>
	<noVScale><x path="Bool"/></noVScale>
	<noHScale><x path="Bool"/></noHScale>
	<noClose><x path="Bool"/></noClose>
	<joinStyle><e path="format.swf.LineJoinStyle"/></joinStyle>
	<endWidth><x path="Int"/></endWidth>
	<endCapStyle><e path="format.swf.LineCapStyle"/></endCapStyle>
</a></typedef>
	<typedef path="format.swf.MorphGradient" params="" file="format/swf/Data.hx" module="format.swf.Data"><a>
	<startRatio><x path="Int"/></startRatio>
	<startColor><t path="format.swf.RGBA"/></startColor>
	<endRatio><x path="Int"/></endRatio>
	<endColor><t path="format.swf.RGBA"/></endColor>
</a></typedef>
	<typedef path="format.swf.Shape4Data" params="" file="format/swf/Data.hx" module="format.swf.Data"><a>
	<useWinding><x path="Bool"/></useWinding>
	<useScalingStroke><x path="Bool"/></useScalingStroke>
	<useNonScalingStroke><x path="Bool"/></useNonScalingStroke>
	<shapes><t path="format.swf.ShapeWithStyleData"/></shapes>
	<shapeBounds><t path="format.swf.Rect"/></shapeBounds>
	<edgeBounds><t path="format.swf.Rect"/></edgeBounds>
</a></typedef>
	<typedef path="format.swf.ShapeWithoutStyleData" params="" file="format/swf/Data.hx" module="format.swf.Data"><a><shapeRecords><c path="Array"><e path="format.swf.ShapeRecord"/></c></shapeRecords></a></typedef>
	<typedef path="format.swf.ShapeWithStyleData" params="" file="format/swf/Data.hx" module="format.swf.Data"><a>
	<shapeRecords><c path="Array"><e path="format.swf.ShapeRecord"/></c></shapeRecords>
	<lineStyles><c path="Array"><t path="format.swf.LineStyle"/></c></lineStyles>
	<fillStyles><c path="Array"><e path="format.swf.FillStyle"/></c></fillStyles>
</a></typedef>
	<enum path="format.swf.ShapeRecord" params="" file="format/swf/Data.hx" module="format.swf.Data">
		<SHREnd/>
		<SHRChange a="data"><t path="format.swf.ShapeChangeRec"/></SHRChange>
		<SHREdge a="dx:dy">
			<x path="Int"/>
			<x path="Int"/>
		</SHREdge>
		<SHRCurvedEdge a="cdx:cdy:adx:ady">
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</SHRCurvedEdge>
	</enum>
	<typedef path="format.swf.ShapeChangeRec" params="" file="format/swf/Data.hx" module="format.swf.Data"><a>
	<newStyles><t path="Null"><t path="format.swf.SCRNewStyles"/></t></newStyles>
	<moveTo><t path="Null"><t path="format.swf.SCRMoveTo"/></t></moveTo>
	<lineStyle><t path="Null"><t path="format.swf.SCRIndex"/></t></lineStyle>
	<fillStyle1><t path="Null"><t path="format.swf.SCRIndex"/></t></fillStyle1>
	<fillStyle0><t path="Null"><t path="format.swf.SCRIndex"/></t></fillStyle0>
</a></typedef>
	<typedef path="format.swf.SCRMoveTo" params="" file="format/swf/Data.hx" module="format.swf.Data"><a>
	<dy><x path="Int"/></dy>
	<dx><x path="Int"/></dx>
</a></typedef>
	<typedef path="format.swf.SCRIndex" params="" file="format/swf/Data.hx" module="format.swf.Data"><a><idx><x path="Int"/></idx></a></typedef>
	<typedef path="format.swf.SCRNewStyles" params="" file="format/swf/Data.hx" module="format.swf.Data"><a>
	<lineStyles><c path="Array"><t path="format.swf.LineStyle"/></c></lineStyles>
	<fillStyles><c path="Array"><e path="format.swf.FillStyle"/></c></fillStyles>
</a></typedef>
	<enum path="format.swf.FillStyle" params="" file="format/swf/Data.hx" module="format.swf.Data">
		<FSSolid a="rgb"><t path="format.swf.RGB"/></FSSolid>
		<FSSolidAlpha a="rgb"><t path="format.swf.RGBA"/></FSSolidAlpha>
		<FSLinearGradient a="mat:grad">
			<t path="format.swf.Matrix"/>
			<t path="format.swf.Gradient"/>
		</FSLinearGradient>
		<FSRadialGradient a="mat:grad">
			<t path="format.swf.Matrix"/>
			<t path="format.swf.Gradient"/>
		</FSRadialGradient>
		<FSFocalGradient a="mat:grad">
			<t path="format.swf.Matrix"/>
			<t path="format.swf.FocalGradient"/>
		</FSFocalGradient>
		<FSBitmap a="cid:mat:repeat:smooth">
			<x path="Int"/>
			<t path="format.swf.Matrix"/>
			<x path="Bool"/>
			<x path="Bool"/>
		</FSBitmap>
	</enum>
	<typedef path="format.swf.LineStyle" params="" file="format/swf/Data.hx" module="format.swf.Data"><a>
	<width><x path="Int"/></width>
	<data><e path="format.swf.LineStyleData"/></data>
</a></typedef>
	<enum path="format.swf.LineStyleData" params="" file="format/swf/Data.hx" module="format.swf.Data">
		<LSRGB a="rgb"><t path="format.swf.RGB"/></LSRGB>
		<LSRGBA a="rgba"><t path="format.swf.RGBA"/></LSRGBA>
		<LS2 a="data"><t path="format.swf.LS2Data"/></LS2>
	</enum>
	<typedef path="format.swf.LS2Data" params="" file="format/swf/Data.hx" module="format.swf.Data"><a>
	<startCap><e path="format.swf.LineCapStyle"/></startCap>
	<pixelHinting><x path="Bool"/></pixelHinting>
	<noVScale><x path="Bool"/></noVScale>
	<noHScale><x path="Bool"/></noHScale>
	<noClose><x path="Bool"/></noClose>
	<join><e path="format.swf.LineJoinStyle"/></join>
	<fill><t path="Null"><e path="format.swf.LS2Fill"/></t></fill>
	<endCap><e path="format.swf.LineCapStyle"/></endCap>
</a></typedef>
	<enum path="format.swf.LineCapStyle" params="" file="format/swf/Data.hx" module="format.swf.Data">
		<LCRound/>
		<LCNone/>
		<LCSquare/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<enum path="format.swf.LineJoinStyle" params="" file="format/swf/Data.hx" module="format.swf.Data">
		<LJRound/>
		<LJBevel/>
		<LJMiter a="limitFactor"><t path="format.swf.Fixed8"/></LJMiter>
	</enum>
	<enum path="format.swf.LS2Fill" params="" file="format/swf/Data.hx" module="format.swf.Data">
		<LS2FColor a="color"><t path="format.swf.RGBA"/></LS2FColor>
		<LS2FStyle a="style"><e path="format.swf.FillStyle"/></LS2FStyle>
	</enum>
	<enum path="format.swf.GradRecord" params="" file="format/swf/Data.hx" module="format.swf.Data">
		<GRRGB a="pos:col">
			<x path="Int"/>
			<t path="format.swf.RGB"/>
		</GRRGB>
		<GRRGBA a="pos:col">
			<x path="Int"/>
			<t path="format.swf.RGBA"/>
		</GRRGBA>
	</enum>
	<typedef path="format.swf.Gradient" params="" file="format/swf/Data.hx" module="format.swf.Data"><a>
	<spread><e path="format.swf.SpreadMode"/></spread>
	<interpolate><e path="format.swf.InterpolationMode"/></interpolate>
	<data><c path="Array"><e path="format.swf.GradRecord"/></c></data>
</a></typedef>
	<typedef path="format.swf.FocalGradient" params="" file="format/swf/Data.hx" module="format.swf.Data"><a>
	<focalPoint><t path="format.swf.Fixed8"/></focalPoint>
	<data><t path="format.swf.Gradient"/></data>
</a></typedef>
	<enum path="format.swf.SpreadMode" params="" file="format/swf/Data.hx" module="format.swf.Data">
		<SMPad/>
		<SMReflect/>
		<SMRepeat/>
		<SMReserved/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<enum path="format.swf.InterpolationMode" params="" file="format/swf/Data.hx" module="format.swf.Data">
		<IMNormalRGB/>
		<IMLinearRGB/>
		<IMReserved1/>
		<IMReserved2/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<typedef path="format.swf.MatrixPart" params="" file="format/swf/Data.hx" module="format.swf.Data"><a>
	<y><x path="Int"/></y>
	<x><x path="Int"/></x>
	<nbits><x path="Int"/></nbits>
</a></typedef>
	<typedef path="format.swf.MatrixPartScale" params="" file="format/swf/Data.hx" module="format.swf.Data"><a>
	<y><x path="Float"/></y>
	<x><x path="Float"/></x>
</a></typedef>
	<typedef path="format.swf.MatrixPartRotateSkew" params="" file="format/swf/Data.hx" module="format.swf.Data"><a>
	<rs1><x path="Float"/></rs1>
	<rs0><x path="Float"/></rs0>
</a></typedef>
	<typedef path="format.swf.MatrixPartTranslate" params="" file="format/swf/Data.hx" module="format.swf.Data"><a>
	<y><x path="Int"/></y>
	<x><x path="Int"/></x>
</a></typedef>
	<typedef path="format.swf.Matrix" params="" file="format/swf/Data.hx" module="format.swf.Data"><a>
	<translate><t path="format.swf.MatrixPartTranslate"/></translate>
	<scale><t path="Null"><t path="format.swf.MatrixPartScale"/></t></scale>
	<rotate><t path="Null"><t path="format.swf.MatrixPartRotateSkew"/></t></rotate>
</a></typedef>
	<typedef path="format.swf.RGBA" params="" file="format/swf/Data.hx" module="format.swf.Data"><a>
	<r><x path="Int"/></r>
	<g><x path="Int"/></g>
	<b><x path="Int"/></b>
	<a><x path="Int"/></a>
</a></typedef>
	<typedef path="format.swf.RGB" params="" file="format/swf/Data.hx" module="format.swf.Data"><a>
	<r><x path="Int"/></r>
	<g><x path="Int"/></g>
	<b><x path="Int"/></b>
</a></typedef>
	<typedef path="format.swf.CXA" params="" file="format/swf/Data.hx" module="format.swf.Data"><a>
	<nbits><x path="Int"/></nbits>
	<mult><t path="Null"><t path="format.swf.RGBA"/></t></mult>
	<add><t path="Null"><t path="format.swf.RGBA"/></t></add>
</a></typedef>
	<typedef path="format.swf.ClipEvent" params="" file="format/swf/Data.hx" module="format.swf.Data"><a>
	<eventsFlags><x path="Int"/></eventsFlags>
	<data><c path="haxe.io.Bytes"/></data>
</a></typedef>
	<enum path="format.swf.BlendMode" params="" file="format/swf/Data.hx" module="format.swf.Data">
		<BNormal/>
		<BLayer/>
		<BMultiply/>
		<BScreen/>
		<BLighten/>
		<BDarken/>
		<BDifference/>
		<BAdd/>
		<BSubtract/>
		<BInvert/>
		<BAlpha/>
		<BErase/>
		<BOverlay/>
		<BHardLight/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<enum path="format.swf.Filter" params="" file="format/swf/Data.hx" module="format.swf.Data">
		<FDropShadow a="data"><t path="format.swf.FilterData"/></FDropShadow>
		<FBlur a="data"><t path="format.swf.BlurFilterData"/></FBlur>
		<FGlow a="data"><t path="format.swf.FilterData"/></FGlow>
		<FBevel a="data"><t path="format.swf.FilterData"/></FBevel>
		<FGradientGlow a="data"><t path="format.swf.GradientFilterData"/></FGradientGlow>
		<FColorMatrix a="data"><c path="Array"><x path="Float"/></c></FColorMatrix>
		<FGradientBevel a="data"><t path="format.swf.GradientFilterData"/></FGradientBevel>
	</enum>
	<typedef path="format.swf.FilterFlags" params="" file="format/swf/Data.hx" module="format.swf.Data"><a>
	<passes><x path="Int"/></passes>
	<ontop><x path="Bool"/></ontop>
	<knockout><x path="Bool"/></knockout>
	<inner><x path="Bool"/></inner>
</a></typedef>
	<typedef path="format.swf.FilterData" params="" file="format/swf/Data.hx" module="format.swf.Data"><a>
	<strength><t path="format.swf.Fixed8"/></strength>
	<flags><t path="format.swf.FilterFlags"/></flags>
	<distance><t path="format.swf.Fixed"/></distance>
	<color2><t path="format.swf.RGBA"/></color2>
	<color><t path="format.swf.RGBA"/></color>
	<blurY><t path="format.swf.Fixed"/></blurY>
	<blurX><t path="format.swf.Fixed"/></blurX>
	<angle><t path="format.swf.Fixed"/></angle>
</a></typedef>
	<typedef path="format.swf.BlurFilterData" params="" file="format/swf/Data.hx" module="format.swf.Data"><a>
	<passes><x path="Int"/></passes>
	<blurY><t path="format.swf.Fixed"/></blurY>
	<blurX><t path="format.swf.Fixed"/></blurX>
</a></typedef>
	<typedef path="format.swf.GradientFilterData" params="" file="format/swf/Data.hx" module="format.swf.Data"><a>
	<data><t path="format.swf.FilterData"/></data>
	<colors><c path="Array"><a>
	<position><x path="Int"/></position>
	<color><t path="format.swf.RGBA"/></color>
</a></c></colors>
</a></typedef>
	<typedef path="format.swf.Lossless" params="" file="format/swf/Data.hx" module="format.swf.Data"><a>
	<width><x path="Int"/></width>
	<height><x path="Int"/></height>
	<data><c path="haxe.io.Bytes"/></data>
	<color><e path="format.swf.ColorModel"/></color>
	<cid><x path="Int"/></cid>
</a></typedef>
	<enum path="format.swf.JPEGData" params="" file="format/swf/Data.hx" module="format.swf.Data">
		<JDJPEG1 a="data"><c path="haxe.io.Bytes"/></JDJPEG1>
		<JDJPEG2 a="data"><c path="haxe.io.Bytes"/></JDJPEG2>
		<JDJPEG3 a="data:mask">
			<c path="haxe.io.Bytes"/>
			<c path="haxe.io.Bytes"/>
		</JDJPEG3>
	</enum>
	<enum path="format.swf.ColorModel" params="" file="format/swf/Data.hx" module="format.swf.Data">
		<CM8Bits a="ncolors"><x path="Int"/></CM8Bits>
		<CM15Bits/>
		<CM24Bits/>
		<CM32Bits/>
	</enum>
	<typedef path="format.swf.Sound" params="" file="format/swf/Data.hx" module="format.swf.Data"><a>
	<sid><x path="Int"/></sid>
	<samples><x path="Int"/></samples>
	<rate><e path="format.swf.SoundRate"/></rate>
	<isStereo><x path="Bool"/></isStereo>
	<is16bit><x path="Bool"/></is16bit>
	<format><e path="format.swf.SoundFormat"/></format>
	<data><e path="format.swf.SoundData"/></data>
</a></typedef>
	<enum path="format.swf.SoundData" params="" file="format/swf/Data.hx" module="format.swf.Data">
		<SDMp3 a="seek:data">
			<x path="Int"/>
			<c path="haxe.io.Bytes"/>
		</SDMp3>
		<SDRaw a="data"><c path="haxe.io.Bytes"/></SDRaw>
		<SDOther a="data"><c path="haxe.io.Bytes"/></SDOther>
	</enum>
	<enum path="format.swf.SoundFormat" params="" file="format/swf/Data.hx" module="format.swf.Data">
		<SFNativeEndianUncompressed/>
		<SFADPCM/>
		<SFMP3/>
		<SFLittleEndianUncompressed/>
		<SFNellymoser16k/>
		<SFNellymoser8k/>
		<SFNellymoser/>
		<SFSpeex/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<enum path="format.swf.SoundRate" params="" file="format/swf/Data.hx" module="format.swf.Data">
		<SR5k/>
		<SR11k/>
		<SR22k/>
		<SR44k/>
		<haxe_doc>* Sound sampling rate.
 *
 * - 5k is not allowed for MP3
 * - Nellymoser and Speex ignore this option</haxe_doc>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<enum path="format.swf.FontData" params="" file="format/swf/Data.hx" module="format.swf.Data">
		<FDFont1 a="data"><t path="format.swf.Font1Data"/></FDFont1>
		<FDFont2 a="hasWideChars:data">
			<x path="Bool"/>
			<t path="format.swf.Font2Data"/>
		</FDFont2>
		<FDFont3 a="data"><t path="format.swf.Font2Data"/></FDFont3>
	</enum>
	<enum path="format.swf.FontInfoData" params="" file="format/swf/Data.hx" module="format.swf.Data">
		<FIDFont1 a="shiftJIS:isANSI:hasWideCodes:data">
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<t path="format.swf.FIData"/>
		</FIDFont1>
		<FIDFont2 a="language:data">
			<e path="format.swf.LangCode"/>
			<t path="format.swf.FIData"/>
		</FIDFont2>
	</enum>
	<typedef path="format.swf.FIData" params="" file="format/swf/Data.hx" module="format.swf.Data"><a>
	<name><c path="String"/></name>
	<isSmall><x path="Bool"/></isSmall>
	<isItalic><x path="Bool"/></isItalic>
	<isBold><x path="Bool"/></isBold>
	<codeTable><c path="Array"><x path="Int"/></c></codeTable>
</a></typedef>
	<enum path="format.swf.LangCode" params="" file="format/swf/Data.hx" module="format.swf.Data">
		<LCNone/>
		<LCLatin/>
		<LCJapanese/>
		<LCKorean/>
		<LCSimplifiedChinese/>
		<LCTraditionalChinese/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<typedef path="format.swf.Font1Data" params="" file="format/swf/Data.hx" module="format.swf.Data"><a><glyphs><c path="Array"><t path="format.swf.ShapeWithoutStyleData"/></c></glyphs></a></typedef>
	<typedef path="format.swf.Font2GlyphData" params="" file="format/swf/Data.hx" module="format.swf.Data"><a>
	<shape><t path="format.swf.ShapeWithoutStyleData"/></shape>
	<charCode><x path="Int"/></charCode>
</a></typedef>
	<typedef path="format.swf.Font2Data" params="" file="format/swf/Data.hx" module="format.swf.Data"><a>
	<shiftJIS><x path="Bool"/></shiftJIS>
	<name><c path="String"/></name>
	<layout><t path="Null"><t path="format.swf.FontLayoutData"/></t></layout>
	<language><e path="format.swf.LangCode"/></language>
	<isSmall><x path="Bool"/></isSmall>
	<isItalic><x path="Bool"/></isItalic>
	<isBold><x path="Bool"/></isBold>
	<isANSI><x path="Bool"/></isANSI>
	<glyphs><c path="Array"><t path="format.swf.Font2GlyphData"/></c></glyphs>
</a></typedef>
	<typedef path="format.swf.FontKerningData" params="" file="format/swf/Data.hx" module="format.swf.Data"><a>
	<charCode2><x path="Int"/></charCode2>
	<charCode1><x path="Int"/></charCode1>
	<adjust><x path="Int"/></adjust>
</a></typedef>
	<typedef path="format.swf.FontLayoutGlyphData" params="" file="format/swf/Data.hx" module="format.swf.Data"><a>
	<bounds><t path="format.swf.Rect"/></bounds>
	<advance><x path="Int"/></advance>
</a></typedef>
	<typedef path="format.swf.FontLayoutData" params="" file="format/swf/Data.hx" module="format.swf.Data"><a>
	<leading><x path="Int"/></leading>
	<kerning><c path="Array"><t path="format.swf.FontKerningData"/></c></kerning>
	<glyphs><c path="Array"><t path="format.swf.FontLayoutGlyphData"/></c></glyphs>
	<descent><x path="Int"/></descent>
	<ascent><x path="Int"/></ascent>
</a></typedef>
	<class path="format.swf.Reader" params="" file="format/swf/Reader.hx">
		<i><c path="haxe.io.Input"/></i>
		<bits><c path="format.tools.BitsInput"/></bits>
		<version><x path="Int"/></version>
		<bitsRead><x path="Int"/></bitsRead>
		<readFixed8 get="inline" set="null" line="46"><f a="?i" v="null">
	<c path="haxe.io.Input"/>
	<x path="Int"/>
</f></readFixed8>
		<readFixed get="inline" set="null" line="51"><f a=""><x path="Int"/></f></readFixed>
		<readUTF8Bytes set="method" line="55"><f a=""><c path="haxe.io.Bytes"/></f></readUTF8Bytes>
		<readRect set="method" line="65"><f a=""><a>
	<top><x path="Int"/></top>
	<right><x path="Int"/></right>
	<left><x path="Int"/></left>
	<bottom><x path="Int"/></bottom>
</a></f></readRect>
		<readMatrixPart set="method" line="76"><f a=""><t path="format.swf.MatrixPart"/></f></readMatrixPart>
		<readMatrix set="method" line="85"><f a=""><t path="format.swf.Matrix"/></f></readMatrix>
		<readRGBA set="method" line="126"><f a="?i" v="null">
	<c path="haxe.io.Input"/>
	<t path="format.swf.RGBA"/>
</f></readRGBA>
		<readRGB set="method" line="136"><f a="?i" v="null">
	<c path="haxe.io.Input"/>
	<t path="format.swf.RGB"/>
</f></readRGB>
		<readCXAColor set="method" line="145"><f a="nbits">
	<x path="Int"/>
	<t path="format.swf.RGBA"/>
</f></readCXAColor>
		<readCXA set="method" line="154"><f a=""><t path="format.swf.CXA"/></f></readCXA>
		<readGradient set="method" line="166"><f a="ver">
	<x path="Int"/>
	<t path="format.swf.Gradient"/>
</f></readGradient>
		<getLineCap set="method" line="202"><f a="t">
	<x path="Int"/>
	<e path="format.swf.LineCapStyle"/>
</f></getLineCap>
		<readLineStyles set="method" line="211"><f a="ver">
	<x path="Int"/>
	<c path="Array"><t path="format.swf.LineStyle"/></c>
</f></readLineStyles>
		<readFillStyle set="method" line="278"><f a="ver">
	<x path="Int"/>
	<e path="format.swf.FillStyle"/>
</f></readFillStyle>
		<readFillStyles set="method" line="320"><f a="ver">
	<x path="Int"/>
	<c path="Array"><e path="format.swf.FillStyle"/></c>
</f></readFillStyles>
		<readShapeWithStyle set="method" line="334"><f a="ver">
	<x path="Int"/>
	<t path="format.swf.ShapeWithStyleData"/>
</f></readShapeWithStyle>
		<readShapeWithoutStyle set="method" line="344"><f a="ver">
	<x path="Int"/>
	<t path="format.swf.ShapeWithoutStyleData"/>
</f></readShapeWithoutStyle>
		<readShapeRecords set="method" line="354"><f a="ver">
	<x path="Int"/>
	<c path="Array"><e path="format.swf.ShapeRecord"/></c>
</f></readShapeRecords>
		<readInt get="inline" set="null" line="452"><f a=""><x path="Int"/></f></readInt>
		<readClipEvents set="method" line="460"><f a=""><c path="Array"><t path="format.swf.ClipEvent"/></c></f></readClipEvents>
		<readFilterFlags set="method" line="473"><f a="top">
	<x path="Bool"/>
	<a>
		<passes><x path="Int"/></passes>
		<ontop><x path="Bool"/></ontop>
		<knockout><x path="Bool"/></knockout>
		<inner><x path="Bool"/></inner>
	</a>
</f></readFilterFlags>
		<readFilterGradient set="method" line="484"><f a=""><t path="format.swf.GradientFilterData"/></f></readFilterGradient>
		<readFilter set="method" line="507"><f a=""><t path="Null"><e path="format.swf.Filter"/></t></f></readFilter>
		<readFilters set="method" line="561"><f a=""><c path="Array"><t path="Null"><e path="format.swf.Filter"/></t></c></f></readFilters>
		<error set="method" line="568"><f a=""><c path="String"/></f></error>
		<readHeader public="1" set="method" line="572"><f a=""><t path="format.swf.SWFHeader"/></f></readHeader>
		<readTagList public="1" set="method" line="604"><f a=""><c path="Array"><e path="format.swf.SWFTag"/></c></f></readTagList>
		<readShape set="method" line="615"><f a="len:ver">
	<x path="Int"/>
	<x path="Int"/>
	<e path="format.swf.SWFTag"/>
</f></readShape>
		<readMorphGradient set="method" line="648"><f a="ver">
	<x path="Int"/>
	<a>
		<startRatio><x path="Int"/></startRatio>
		<startColor><t path="format.swf.RGBA"/></startColor>
		<endRatio><x path="Int"/></endRatio>
		<endColor><t path="format.swf.RGBA"/></endColor>
	</a>
</f></readMorphGradient>
		<readMorphGradients set="method" line="662"><f a="ver">
	<x path="Int"/>
	<c path="Array"><t path="format.swf.MorphGradient"/></c>
</f></readMorphGradients>
		<readMorphFillStyle set="method" line="675"><f a="ver">
	<x path="Int"/>
	<e path="format.swf.MorphFillStyle"/>
</f></readMorphFillStyle>
		<readMorphFillStyles set="method" line="717"><f a="ver">
	<x path="Int"/>
	<c path="Array"><e path="format.swf.MorphFillStyle"/></c>
</f></readMorphFillStyles>
		<readMorph1LineStyle set="method" line="730"><f a=""><a>
	<startWidth><x path="Int"/></startWidth>
	<startColor><t path="format.swf.RGBA"/></startColor>
	<endWidth><x path="Int"/></endWidth>
	<endColor><t path="format.swf.RGBA"/></endColor>
</a></f></readMorph1LineStyle>
		<readMorph2LineStyle set="method" line="744"><f a=""><e path="format.swf.Morph2LineStyle"/></f></readMorph2LineStyle>
		<readMorph1LineStyles set="method" line="794"><f a=""><c path="Array"><t path="format.swf.Morph1LineStyle"/></c></f></readMorph1LineStyles>
		<readMorph2LineStyles set="method" line="808"><f a=""><c path="Array"><e path="format.swf.Morph2LineStyle"/></c></f></readMorph2LineStyles>
		<readMorphShape set="method" line="822"><f a="ver">
	<x path="Int"/>
	<e path="format.swf.SWFTag"/>
</f></readMorphShape>
		<readBlendMode set="method" line="877"><f a=""><e path="format.swf.BlendMode"/></f></readBlendMode>
		<readPlaceObject set="method" line="897"><f a="v3">
	<x path="Bool"/>
	<c path="format.swf.PlaceObject"/>
</f></readPlaceObject>
		<readLossless set="method" line="919"><f a="len:v2">
	<x path="Int"/>
	<x path="Bool"/>
	<a>
		<width><x path="Int"/></width>
		<height><x path="Int"/></height>
		<data><c path="haxe.io.Bytes"/></data>
		<color><e path="format.swf.ColorModel"/></color>
		<cid><x path="Int"/></cid>
	</a>
</f></readLossless>
		<readSymbols set="method" line="936"><f a=""><c path="Array"><t path="format.swf.SymData"/></c></f></readSymbols>
		<readSound set="method" line="946"><f a="len">
	<x path="Int"/>
	<e path="format.swf.SWFTag"/>
</f></readSound>
		<readLanguage set="method" line="990"><f a=""><e path="format.swf.LangCode"/></f></readLanguage>
		<readGlyphs set="method" line="1002"><f a="len:offsets">
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
	<c path="Array"><t path="format.swf.ShapeWithoutStyleData"/></c>
</f></readGlyphs>
		<readKerningRecord set="method" line="1024"><f a="hasWideCodes">
	<x path="Bool"/>
	<a>
		<charCode2><x path="Int"/></charCode2>
		<charCode1><x path="Int"/></charCode1>
		<adjust><x path="Int"/></adjust>
	</a>
</f></readKerningRecord>
		<readFont1Data set="method" line="1032"><f a="len">
	<x path="Int"/>
	<e path="format.swf.FontData"/>
</f></readFont1Data>
		<readFont2Data set="method" line="1047"><f a="ver">
	<x path="Int"/>
	<e path="format.swf.FontData"/>
</f></readFont2Data>
		<readFont set="method" line="1159"><f a="len:ver">
	<x path="Int"/>
	<x path="Int"/>
	<e path="format.swf.SWFTag"/>
</f></readFont>
		<readFontInfo set="method" line="1177"><f a="len:ver">
	<x path="Int"/>
	<x path="Int"/>
	<e path="format.swf.SWFTag"/>
</f></readFontInfo>
		<readTag public="1" set="method" line="1219"><f a=""><e path="format.swf.SWFTag"/></f></readTag>
		<read public="1" set="method" line="1361"><f a=""><t path="format.swf.SWF"/></f></read>
		<new public="1" set="method" line="42"><f a="i">
	<c path="haxe.io.Input"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="format.swf.Tools" params="" file="format/swf/Tools.hx">
		<signExtend public="1" set="method" line="35" static="1"><f a="v:nbits">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></signExtend>
		<floatFixedBits public="1" get="inline" set="null" line="43" static="1"><f a="i:nbits">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
</f></floatFixedBits>
		<floatFixed public="1" get="inline" set="null" line="48" static="1"><f a="i">
	<x path="Int"/>
	<x path="Float"/>
</f></floatFixed>
		<floatFixed8 public="1" get="inline" set="null" line="56" static="1"><f a="i">
	<x path="Int"/>
	<x path="Float"/>
</f></floatFixed8>
		<toFixed8 public="1" get="inline" set="null" line="60" static="1"><f a="f">
	<x path="Float"/>
	<x path="Int"/>
</f></toFixed8>
		<toFixed16 public="1" get="inline" set="null" line="66" static="1"><f a="f">
	<x path="Float"/>
	<x path="Int"/>
</f></toFixed16>
		<minBits public="1" get="inline" set="null" line="73" static="1"><f a="values">
	<c path="Array"><x path="Int"/></c>
	<x path="Int"/>
</f></minBits>
		<hex public="1" set="method" line="100" static="1"><f a="b:?max" v=":null">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<c path="String"/>
</f></hex>
		<bin public="1" set="method" line="114" static="1"><f a="b:?maxBytes" v=":null">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<c path="String"/>
</f></bin>
		<dumpTag public="1" set="method" line="130" static="1"><f a="t:?max" v=":null">
	<e path="format.swf.SWFTag"/>
	<x path="Int"/>
	<c path="String"/>
</f></dumpTag>
		<meta><m n=":reallyUsed"/></meta>
	</class>
	<typedef path="format.swf.ShapeStyleInfo" params="" file="format/swf/Writer.hx" module="format.swf.Writer"><a>
	<numLineStyles><x path="Int"/></numLineStyles>
	<numFillStyles><x path="Int"/></numFillStyles>
	<lineBits><x path="Int"/></lineBits>
	<fillBits><x path="Int"/></fillBits>
</a></typedef>
	<class path="format.swf.Writer" params="" file="format/swf/Writer.hx">
		<output><c path="haxe.io.Output"/></output>
		<o><c path="haxe.io.BytesOutput"/></o>
		<compressed><x path="Bool"/></compressed>
		<bits><c path="format.tools.BitsOutput"/></bits>
		<write public="1" set="method" line="56"><f a="s">
	<t path="format.swf.SWF"/>
	<x path="Void"/>
</f></write>
		<writeRect set="method" line="63"><f a="r">
	<a>
		<top set="null"><x path="Int"/></top>
		<right set="null"><x path="Int"/></right>
		<left set="null"><x path="Int"/></left>
		<bottom set="null"><x path="Int"/></bottom>
	</a>
	<x path="Void"/>
</f></writeRect>
		<writeFixed8 get="inline" set="null" line="74"><f a="v">
	<x path="Int"/>
	<x path="Void"/>
</f></writeFixed8>
		<writeFixed get="inline" set="null" line="78"><f a="v">
	<x path="Int"/>
	<x path="Void"/>
</f></writeFixed>
		<openTMP set="method" line="82"><f a=""><c path="haxe.io.BytesOutput"/></f></openTMP>
		<closeTMP set="method" line="89"><f a="old">
	<c path="haxe.io.BytesOutput"/>
	<c path="haxe.io.Bytes"/>
</f></closeTMP>
		<writeHeader public="1" set="method" line="96"><f a="h">
	<t path="format.swf.SWFHeader"/>
	<x path="Void"/>
</f></writeHeader>
		<writeRGB set="method" line="107"><f a="c">
	<t path="format.swf.RGB"/>
	<x path="Void"/>
</f></writeRGB>
		<writeRGBA set="method" line="113"><f a="c">
	<t path="format.swf.RGBA"/>
	<x path="Void"/>
</f></writeRGBA>
		<writeMatrixPart set="method" line="120"><f a="m">
	<t path="format.swf.MatrixPart"/>
	<x path="Void"/>
</f></writeMatrixPart>
		<writeMatrix set="method" line="126"><f a="m">
	<t path="format.swf.Matrix"/>
	<x path="Void"/>
</f></writeMatrix>
		<writeCXAColor set="method" line="165"><f a="c:nbits">
	<t path="format.swf.RGBA"/>
	<x path="Int"/>
	<x path="Void"/>
</f></writeCXAColor>
		<writeCXA set="method" line="172"><f a="c">
	<t path="format.swf.CXA"/>
	<x path="Void"/>
</f></writeCXA>
		<writeClipEvents set="method" line="181"><f a="events">
	<c path="Array"><t path="format.swf.ClipEvent"/></c>
	<x path="Void"/>
</f></writeClipEvents>
		<writeFilterFlags set="method" line="195"><f a="f:top">
	<t path="format.swf.FilterFlags"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></writeFilterFlags>
		<writeFilterGradient set="method" line="204"><f a="f">
	<t path="format.swf.GradientFilterData"/>
	<x path="Void"/>
</f></writeFilterGradient>
		<writeFilter set="method" line="219"><f a="f">
	<e path="format.swf.Filter"/>
	<x path="Void"/>
</f></writeFilter>
		<writeFilters set="method" line="265"><f a="filters">
	<c path="Array"><e path="format.swf.Filter"/></c>
	<x path="Void"/>
</f></writeFilters>
		<writeBlendMode set="method" line="271"><f a="b">
	<e path="format.swf.BlendMode"/>
	<x path="Void"/>
</f></writeBlendMode>
		<writePlaceObject set="method" line="275"><f a="po:v3">
	<c path="format.swf.PlaceObject"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></writePlaceObject>
		<writeInt get="inline" set="null" line="315"><f a="v">
	<x path="Int"/>
	<x path="Void"/>
</f></writeInt>
		<writeTID set="method" line="323"><f a="id:len">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></writeTID>
		<writeTIDExt set="method" line="333"><f a="id:len">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></writeTIDExt>
		<writeSymbols set="method" line="338"><f a="sl:tagid">
	<c path="Array"><t path="format.swf.SymData"/></c>
	<x path="Int"/>
	<x path="Void"/>
</f></writeSymbols>
		<writeSound set="method" line="351"><f a="s">
	<t path="format.swf.Sound"/>
	<x path="Void"/>
</f></writeSound>
		<writeGradRecord set="method" line="390"><f a="ver:grad_record">
	<x path="Int"/>
	<e path="format.swf.GradRecord"/>
	<x path="Void"/>
</f></writeGradRecord>
		<writeGradient set="method" line="406"><f a="ver:grad">
	<x path="Int"/>
	<t path="format.swf.Gradient"/>
	<x path="Void"/>
</f></writeGradient>
		<writeFocalGradient set="method" line="440"><f a="ver:grad">
	<x path="Int"/>
	<t path="format.swf.FocalGradient"/>
	<x path="Void"/>
</f></writeFocalGradient>
		<writeFillStyle set="method" line="448"><f a="ver:fill_style">
	<x path="Int"/>
	<e path="format.swf.FillStyle"/>
	<x path="Void"/>
</f></writeFillStyle>
		<writeFillStyles set="method" line="497"><f a="ver:fill_styles">
	<x path="Int"/>
	<c path="Array"><e path="format.swf.FillStyle"/></c>
	<x path="Void"/>
</f></writeFillStyles>
		<writeLineStyle set="method" line="518"><f a="ver:line_style">
	<x path="Int"/>
	<t path="format.swf.LineStyle"/>
	<x path="Void"/>
</f></writeLineStyle>
		<writeLineStyles set="method" line="579"><f a="ver:line_styles">
	<x path="Int"/>
	<c path="Array"><t path="format.swf.LineStyle"/></c>
	<x path="Void"/>
</f></writeLineStyles>
		<writeShapeRecord set="method" line="600"><f a="ver:style_info:shape_record">
	<x path="Int"/>
	<t path="format.swf.ShapeStyleInfo"/>
	<e path="format.swf.ShapeRecord"/>
	<x path="Void"/>
</f></writeShapeRecord>
		<writeShapeWithoutStyle set="method" line="693"><f a="ver:data">
	<x path="Int"/>
	<t path="format.swf.ShapeWithoutStyleData"/>
	<x path="Void"/>
</f></writeShapeWithoutStyle>
		<writeShapeWithStyle set="method" line="711"><f a="ver:data">
	<x path="Int"/>
	<t path="format.swf.ShapeWithStyleData"/>
	<x path="Void"/>
</f></writeShapeWithStyle>
		<writeShape public="1" set="method" line="732"><f a="id:data">
	<x path="Int"/>
	<e path="format.swf.ShapeData"/>
	<x path="Void"/>
</f></writeShape>
		<writeMorphGradient set="method" line="781"><f a="ver:g">
	<x path="Int"/>
	<t path="format.swf.MorphGradient"/>
	<x path="Void"/>
</f></writeMorphGradient>
		<writeMorphGradients set="method" line="788"><f a="ver:gradients">
	<x path="Int"/>
	<c path="Array"><t path="format.swf.MorphGradient"/></c>
	<x path="Void"/>
</f></writeMorphGradients>
		<writeMorphFillStyle set="method" line="798"><f a="ver:fill_style">
	<x path="Int"/>
	<e path="format.swf.MorphFillStyle"/>
	<x path="Void"/>
</f></writeMorphFillStyle>
		<writeMorphFillStyles set="method" line="833"><f a="ver:fill_styles">
	<x path="Int"/>
	<c path="Array"><e path="format.swf.MorphFillStyle"/></c>
	<x path="Void"/>
</f></writeMorphFillStyles>
		<writeMorph1LineStyle set="method" line="849"><f a="s">
	<t path="format.swf.Morph1LineStyle"/>
	<x path="Void"/>
</f></writeMorph1LineStyle>
		<writeMorph1LineStyles set="method" line="856"><f a="line_styles">
	<c path="Array"><t path="format.swf.Morph1LineStyle"/></c>
	<x path="Void"/>
</f></writeMorph1LineStyles>
		<writeMorph2LineStyle set="method" line="872"><f a="style">
	<e path="format.swf.Morph2LineStyle"/>
	<x path="Void"/>
</f></writeMorph2LineStyle>
		<writeMorph2LineStyles set="method" line="933"><f a="line_styles">
	<c path="Array"><e path="format.swf.Morph2LineStyle"/></c>
	<x path="Void"/>
</f></writeMorph2LineStyles>
		<writeMorphShape public="1" set="method" line="949"><f a="id:data">
	<x path="Int"/>
	<e path="format.swf.MorphShapeData"/>
	<x path="Void"/>
</f></writeMorphShape>
		<writeFontGlyphs set="method" line="1011"><f a="glyphs">
	<c path="Array"><t path="format.swf.ShapeWithoutStyleData"/></c>
	<c path="Array"><x path="Int"/></c>
</f></writeFontGlyphs>
		<writeFont1 set="method" line="1036"><f a="data">
	<t path="format.swf.Font1Data"/>
	<x path="Void"/>
</f></writeFont1>
		<writeFont2 set="method" line="1055"><f a="hasWideChars:data">
	<x path="Bool"/>
	<t path="format.swf.Font2Data"/>
	<x path="Void"/>
</f></writeFont2>
		<writeFont public="1" set="method" line="1150"><f a="id:data">
	<x path="Int"/>
	<e path="format.swf.FontData"/>
	<x path="Void"/>
</f></writeFont>
		<writeFontInfo public="1" set="method" line="1183"><f a="id:data">
	<x path="Int"/>
	<e path="format.swf.FontInfoData"/>
	<x path="Void"/>
</f></writeFontInfo>
		<writeTag public="1" set="method" line="1239"><f a="t">
	<e path="format.swf.SWFTag"/>
	<x path="Void"/>
</f></writeTag>
		<writeEnd public="1" set="method" line="1421"><f a=""><x path="Void"/></f></writeEnd>
		<new public="1" set="method" line="52"><f a="o">
	<c path="haxe.io.Output"/>
	<x path="Void"/>
</f></new>
	</class>
	<typedef path="format.tar.Entry" params="" file="format/tar/Data.hx" module="format.tar.Data"><a>
	<uname><c path="String"/></uname>
	<uid><x path="Int"/></uid>
	<gname><c path="String"/></gname>
	<gid><x path="Int"/></gid>
	<fmod><x path="Int"/></fmod>
	<fileTime><c path="Date"/></fileTime>
	<fileSize><x path="Int"/></fileSize>
	<fileName><c path="String"/></fileName>
	<data><t path="Null"><c path="haxe.io.Bytes"/></t></data>
</a></typedef>
	<typedef path="format.tar.Data" params="" file="format/tar/Data.hx"><c path="List"><t path="format.tar.Entry"/></c></typedef>
	<class path="format.tar.Reader" params="" file="format/tar/Reader.hx">
		<i><c path="haxe.io.Input"/></i>
		<read public="1" set="method" line="38"><f a=""><c path="List"><t path="format.tar.Entry"/></c></f></read>
		<readEntryHeader public="1" set="method" line="53"><f a=""><a>
	<uname><c path="String"/></uname>
	<uid><x path="Int"/></uid>
	<gname><c path="String"/></gname>
	<gid><x path="Int"/></gid>
	<fmod><x path="Int"/></fmod>
	<fileTime><c path="Date"/></fileTime>
	<fileSize><x path="Int"/></fileSize>
	<fileName><c path="String"/></fileName>
	<data><c path="haxe.io.Bytes"/></data>
</a></f></readEntryHeader>
		<readEntryData public="1" set="method" line="96"><f a="e:buf:out">
	<t path="format.tar.Entry"/>
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Output"/>
	<x path="Void"/>
</f></readEntryData>
		<readPad set="method" line="101"><f a="size">
	<x path="Int"/>
	<x path="Void"/>
</f></readPad>
		<parseOctal set="method" line="107"><f a="n">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
</f></parseOctal>
		<new public="1" set="method" line="34"><f a="i">
	<c path="haxe.io.Input"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":reallyUsed"/></meta>
	</class>
	<class path="format.tar.Writer" params="" file="format/tar/Writer.hx">
		<o><c path="haxe.io.Output"/></o>
		<files><c path="List"><a><name><c path="String"/></name></a></c></files>
		<sumStr set="method" line="40"><f a="s">
	<c path="String"/>
	<x path="Int"/>
</f></sumStr>
		<createStrNum set="method" line="47"><f a="num:?len:?fill" v=":7:'0'">
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
	<c path="String"/>
</f></createStrNum>
		<writeTarDate set="method" line="56"><f a="date">
	<c path="Date"/>
	<c path="String"/>
</f></writeTarDate>
		<writeEntryHeader public="1" set="method" line="63"><f a="f">
	<t path="format.tar.Entry"/>
	<x path="Void"/>
</f></writeEntryHeader>
		<writeEntryData public="1" set="method" line="97"><f a="e:buf:data">
	<t path="format.tar.Entry"/>
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Input"/>
	<x path="Void"/>
</f></writeEntryData>
		<write public="1" set="method" line="101"><f a="files">
	<t path="format.tar.Data"/>
	<x path="Void"/>
</f></write>
		<dec2oct set="method" line="115"><f a="d">
	<x path="Int"/>
	<x path="Int"/>
</f></dec2oct>
		<new public="1" set="method" line="35"><f a="o">
	<c path="haxe.io.Output"/>
	<x path="Void"/>
</f></new>
	</class>
	<typedef path="format.tgz.Data" params="" file="format/tgz/Data.hx"><t path="format.tar.Data"/></typedef>
	<class path="format.tgz.Reader" params="" file="format/tgz/Reader.hx">
		<i><c path="haxe.io.Input"/></i>
		<read public="1" set="method" line="11"><f a=""><t path="format.tgz.Data"/></f></read>
		<new public="1" set="method" line="7"><f a="i">
	<c path="haxe.io.Input"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="format.tools.Adler32" params="" file="format/tools/Adler32.hx">
		<read public="1" set="method" line="54" static="1"><f a="i">
	<c path="haxe.io.Input"/>
	<c path="format.tools.Adler32"/>
</f></read>
		<a1><x path="Int"/></a1>
		<a2><x path="Int"/></a2>
		<update public="1" set="method" line="39"><f a="b:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></update>
		<equals public="1" set="method" line="50"><f a="a">
	<c path="format.tools.Adler32"/>
	<x path="Bool"/>
</f></equals>
		<new public="1" set="method" line="34"><f a=""><x path="Void"/></f></new>
		<meta><m n=":reallyUsed"/></meta>
	</class>
	<class path="format.tools.ArcFour" params="" file="format/tools/ArcFour.hx">
		<s><c path="haxe.io.Bytes"/></s>
		<sbase><c path="haxe.io.Bytes"/></sbase>
		<i><x path="Int"/></i>
		<j><x path="Int"/></j>
		<reset public="1" set="method" line="54"><f a=""><x path="Void"/></f></reset>
		<run public="1" set="method" line="60"><f a="input:ipos:length:output:opos">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Void"/>
</f></run>
		<new public="1" set="method" line="36"><f a="key">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":reallyUsed"/></meta>
	</class>
	<class path="format.tools.BitsInput" params="" file="format/tools/BitsInput.hx">
		<i><c path="haxe.io.Input"/></i>
		<nbits><x path="Int"/></nbits>
		<bits><x path="Int"/></bits>
		<readBits public="1" set="method" line="41"><f a="n">
	<x path="Int"/>
	<x path="Int"/>
</f></readBits>
		<readBit public="1" set="method" line="63"><f a=""><x path="Bool"/></f></readBit>
		<reset public="1" get="inline" set="null" line="72"><f a=""><x path="Void"/></f></reset>
		<new public="1" set="method" line="35"><f a="i">
	<c path="haxe.io.Input"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":reallyUsed"/></meta>
	</class>
	<class path="format.tools.BitsOutput" params="" file="format/tools/BitsOutput.hx">
		<o public="1"><c path="haxe.io.Output"/></o>
		<nbits><x path="Int"/></nbits>
		<bits><x path="Int"/></bits>
		<writeBits public="1" set="method" line="41"><f a="n:v">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></writeBits>
		<writeBit public="1" set="method" line="63"><f a="flag">
	<x path="Bool"/>
	<x path="Void"/>
</f></writeBit>
		<flush public="1" get="inline" set="null" line="73"><f a=""><x path="Void"/></f></flush>
		<new public="1" set="method" line="35"><f a="o">
	<c path="haxe.io.Output"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":reallyUsed"/></meta>
	</class>
	<class path="haxe.io.Input" params="" file="D:\Projects\haxe\std/haxe/io/Input.hx">
		<bigEndian public="1" set="accessor">
			<x path="Bool"/>
			<haxe_doc>Endianness (word byte order) used when reading numbers.

		If `true`, big-endian is used, otherwise `little-endian` is used.</haxe_doc>
		</bigEndian>
		<readByte public="1" set="method" line="46">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read and return one byte.</haxe_doc>
		</readByte>
		<readBytes public="1" set="method" line="61">
			<f a="s:pos:len">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Read `len` bytes and write them into `s` to the position specified by `pos`.

		Returns the actual length of read data that can be smaller than `len`.

		See `readFullBytes` that tries to read the exact amount of specified bytes.</haxe_doc>
		</readBytes>
		<close public="1" set="method" line="87">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Close the input source.

		Behaviour while reading after calling this method is unspecified.</haxe_doc>
		</close>
		<set_bigEndian set="method" line="90"><f a="b">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_bigEndian>
		<readAll public="1" set="method" line="103">
			<f a="?bufsize" v="null">
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Read and return all available data.

		The `bufsize` optional argument specifies the size of chunks by
		which data is read. Its default value is target-specific.</haxe_doc>
		</readAll>
		<readFullBytes public="1" set="method" line="130">
			<f a="s:pos:len">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Read `len` bytes and write them into `s` to the position specified by `pos`.

		Unlike `readBytes`, this method tries to read the exact `len` amount of bytes.</haxe_doc>
		</readFullBytes>
		<read public="1" set="method" line="141">
			<f a="nbytes">
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Read and return `nbytes` bytes.</haxe_doc>
		</read>
		<readUntil public="1" set="method" line="158">
			<f a="end">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Read a string until a character code specified by `end` is occurred.

		The final character is not included in the resulting string.</haxe_doc>
		</readUntil>
		<readLine public="1" set="method" line="171">
			<f a=""><c path="String"/></f>
			<haxe_doc>Read a line of text separated by CR and/or LF bytes.

		The CR/LF characters are not included in the resulting string.</haxe_doc>
		</readLine>
		<readFloat public="1" set="method" line="193">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Read a 32-bit floating point number.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readFloat>
		<readDouble public="1" set="method" line="252">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Read a 64-bit double-precision floating point number.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readDouble>
		<readInt8 public="1" set="method" line="328">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 8-bit signed integer.</haxe_doc>
		</readInt8>
		<readInt16 public="1" set="method" line="340">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 16-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readInt16>
		<readUInt16 public="1" set="method" line="354">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 16-bit unsigned integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readUInt16>
		<readInt24 public="1" set="method" line="365">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 24-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readInt24>
		<readUInt24 public="1" set="method" line="380">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 24-bit unsigned integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readUInt24>
		<readInt32 public="1" set="method" line="392">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 32-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readInt32>
		<readString public="1" set="method" line="411">
			<f a="len">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Read and `len` bytes as a string.</haxe_doc>
		</readString>
		<haxe_doc>An Input is an abstract reader. See other classes in the `haxe.io` package
	for several possible implementations.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="format.tools.BufferInput" params="" file="format/tools/BufferInput.hx">
		<extends path="haxe.io.Input"/>
		<i public="1"><c path="haxe.io.Input"/></i>
		<buf public="1"><c path="haxe.io.Bytes"/></buf>
		<available public="1"><x path="Int"/></available>
		<pos public="1"><x path="Int"/></pos>
		<refill public="1" set="method" line="47"><f a=""><x path="Void"/></f></refill>
		<readByte public="1" set="method" line="55" override="1"><f a=""><x path="Int"/></f></readByte>
		<readBytes public="1" set="method" line="63" override="1"><f a="buf:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readBytes>
		<new public="1" set="method" line="40"><f a="i:buf:?pos:?available" v="::0:0">
	<c path="haxe.io.Input"/>
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="format.tools.Deflate" params="" file="format/tools/Deflate.hx">
		<run public="1" set="method" line="31" static="1"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></run>
		<meta><m n=":reallyUsed"/></meta>
	</class>
	<enum path="format.tools.Huffman" params="" file="format/tools/Huffman.hx">
		<Found a="i"><x path="Int"/></Found>
		<NeedBit a="left:right">
			<e path="format.tools.Huffman"/>
			<e path="format.tools.Huffman"/>
		</NeedBit>
		<NeedBits a="n:table">
			<x path="Int"/>
			<c path="Array"><e path="format.tools.Huffman"/></c>
		</NeedBits>
	</enum>
	<class path="format.tools.HuffTools" params="" file="format/tools/Huffman.hx" module="format.tools.Huffman">
		<treeDepth set="method" line="44"><f a="t">
	<e path="format.tools.Huffman"/>
	<x path="Int"/>
</f></treeDepth>
		<treeCompress set="method" line="55"><f a="t">
	<e path="format.tools.Huffman"/>
	<e path="format.tools.Huffman"/>
</f></treeCompress>
		<treeWalk set="method" line="72"><f a="table:p:cd:d:t">
	<c path="Array"><e path="format.tools.Huffman"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<e path="format.tools.Huffman"/>
	<x path="Void"/>
</f></treeWalk>
		<treeMake set="method" line="85"><f a="bits:maxbits:v:len">
	<x path="Map">
		<x path="Int"/>
		<x path="Int"/>
	</x>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<e path="format.tools.Huffman"/>
</f></treeMake>
		<make public="1" set="method" line="95"><f a="lengths:pos:nlengths:maxbits">
	<c path="Array"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<e path="format.tools.Huffman"/>
</f></make>
		<new public="1" set="method" line="41"><f a=""><x path="Void"/></f></new>
		<meta><m n=":reallyUsed"/></meta>
	</class>
	<class path="format.tools.IO" params="" file="format/tools/IO.hx">
		<copy public="1" set="method" line="31" static="1"><f a="i:o:buf:size">
	<c path="haxe.io.Input"/>
	<c path="haxe.io.Output"/>
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Void"/>
</f></copy>
		<meta><m n=":reallyUsed"/></meta>
	</class>
	<class path="format.tools.Image" params="" file="format/tools/Image.hx"/>
	<class path="format.tools.Inflate" params="" file="format/tools/Inflate.hx">
		<run public="1" set="method" line="31" static="1"><f a="bytes">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></run>
		<meta><m n=":reallyUsed"/></meta>
	</class>
	<class path="format.tools._InflateImpl.Window" params="" file="format/tools/InflateImpl.hx" private="1" module="format.tools.InflateImpl">
		<SIZE public="1" get="inline" set="null" line="36" static="1"><x path="Int"/></SIZE>
		<BUFSIZE public="1" get="inline" set="null" line="37" static="1"><x path="Int"/></BUFSIZE>
		<buffer public="1"><c path="haxe.io.Bytes"/></buffer>
		<pos public="1"><x path="Int"/></pos>
		<crc><c path="format.tools.Adler32"/></crc>
		<slide public="1" set="method" line="49"><f a=""><x path="Void"/></f></slide>
		<addBytes public="1" set="method" line="57"><f a="b:p:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></addBytes>
		<addByte public="1" set="method" line="63"><f a="c">
	<x path="Int"/>
	<x path="Void"/>
</f></addByte>
		<getLastChar public="1" set="method" line="69"><f a=""><x path="Int"/></f></getLastChar>
		<available public="1" set="method" line="73"><f a=""><x path="Int"/></f></available>
		<checksum public="1" set="method" line="77"><f a=""><c path="format.tools.Adler32"/></f></checksum>
		<new public="1" set="method" line="43"><f a="hasCrc">
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":reallyUsed"/></meta>
	</class>
	<enum path="format.tools._InflateImpl.State" params="" file="format/tools/InflateImpl.hx" private="1" module="format.tools.InflateImpl">
		<Head/>
		<Block/>
		<CData/>
		<Flat/>
		<Crc/>
		<Dist/>
		<DistOne/>
		<Done/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<class path="format.tools.InflateImpl" params="" file="format/tools/InflateImpl.hx">
		<LEN_EXTRA_BITS_TBL line="97" static="1"><c path="Array"><x path="Int"/></c></LEN_EXTRA_BITS_TBL>
		<LEN_BASE_VAL_TBL line="98" static="1"><c path="Array"><x path="Int"/></c></LEN_BASE_VAL_TBL>
		<DIST_EXTRA_BITS_TBL line="99" static="1"><c path="Array"><x path="Int"/></c></DIST_EXTRA_BITS_TBL>
		<DIST_BASE_VAL_TBL line="100" static="1"><c path="Array"><x path="Int"/></c></DIST_BASE_VAL_TBL>
		<CODE_LENGTHS_POS line="101" static="1"><c path="Array"><x path="Int"/></c></CODE_LENGTHS_POS>
		<FIXED_HUFFMAN line="119" static="1"><e path="format.tools.Huffman"/></FIXED_HUFFMAN>
		<run public="1" set="method" line="368" static="1"><f a="i:?bufsize" v=":65536">
	<c path="haxe.io.Input"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></run>
		<nbits><x path="Int"/></nbits>
		<bits><x path="Int"/></bits>
		<state><e path="format.tools._InflateImpl.State"/></state>
		<final><x path="Bool"/></final>
		<huffman><e path="format.tools.Huffman"/></huffman>
		<huffdist><t path="Null"><e path="format.tools.Huffman"/></t></huffdist>
		<htools><c path="format.tools.HuffTools"/></htools>
		<len><x path="Int"/></len>
		<dist><x path="Int"/></dist>
		<needed><x path="Int"/></needed>
		<output><c path="haxe.io.Bytes"/></output>
		<outpos><x path="Int"/></outpos>
		<input><c path="haxe.io.Input"/></input>
		<lengths><c path="Array"><x path="Int"/></c></lengths>
		<window><c path="format.tools._InflateImpl.Window"/></window>
		<buildFixedHuffman set="method" line="141"><f a=""><e path="format.tools.Huffman"/></f></buildFixedHuffman>
		<readBytes public="1" set="method" line="151"><f a="b:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readBytes>
		<getBits set="method" line="161"><f a="n">
	<x path="Int"/>
	<x path="Int"/>
</f></getBits>
		<getBit set="method" line="172"><f a=""><x path="Bool"/></f></getBit>
		<getRevBits set="method" line="183"><f a="n">
	<x path="Int"/>
	<x path="Int"/>
</f></getRevBits>
		<resetBits set="method" line="192"><f a=""><x path="Void"/></f></resetBits>
		<addBytes set="method" line="197"><f a="b:p:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></addBytes>
		<addByte set="method" line="204"><f a="b">
	<x path="Int"/>
	<x path="Void"/>
</f></addByte>
		<addDistOne set="method" line="211"><f a="n">
	<x path="Int"/>
	<x path="Void"/>
</f></addDistOne>
		<addDist set="method" line="217"><f a="d:len">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></addDist>
		<applyHuffman set="method" line="221"><f a="h">
	<e path="format.tools.Huffman"/>
	<x path="Int"/>
</f></applyHuffman>
		<inflateLengths set="method" line="229"><f a="a:max">
	<c path="Array"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Void"/>
</f></inflateLengths>
		<inflateLoop set="method" line="258"><f a=""><x path="Bool"/></f></inflateLoop>
		<new public="1" set="method" line="121"><f a="i:?header:?crc" v=":true:true">
	<c path="haxe.io.Input"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":reallyUsed"/></meta>
	</class>
	<class path="format.tools.MD5" params="" file="format/tools/MD5.hx">
		<make public="1" set="method" line="31" static="1"><f a="s">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></make>
		<inst line="45" static="1"><c path="format.tools.MD5"/></inst>
		<bitOR set="method" line="50"><f a="a:b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></bitOR>
		<bitXOR set="method" line="56"><f a="a:b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></bitXOR>
		<bitAND set="method" line="62"><f a="a:b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></bitAND>
		<addme set="method" line="68"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></addme>
		<str2blks set="method" line="74"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="Array"><x path="Int"/></c>
</f></str2blks>
		<rol set="method" line="91"><f a="num:cnt">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></rol>
		<cmn set="method" line="95"><f a="q:a:b:x:s:t">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></cmn>
		<ff set="method" line="99"><f a="a:b:c:d:x:s:t">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></ff>
		<gg set="method" line="103"><f a="a:b:c:d:x:s:t">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></gg>
		<hh set="method" line="107"><f a="a:b:c:d:x:s:t">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></hh>
		<ii set="method" line="111"><f a="a:b:c:d:x:s:t">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></ii>
		<encode set="method" line="115"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></encode>
		<new set="method" line="47"><f a=""><x path="Void"/></f></new>
		<meta><m n=":reallyUsed"/></meta>
	</class>
	<typedef path="format.wav.WAVE" params="" file="format/wav/Data.hx" module="format.wav.Data"><a>
	<header><t path="format.wav.WAVEHeader"/></header>
	<data><c path="haxe.io.Bytes"/></data>
</a></typedef>
	<typedef path="format.wav.WAVEHeader" params="" file="format/wav/Data.hx" module="format.wav.Data"><a>
	<samplingRate><x path="Int"/></samplingRate>
	<format><e path="format.wav.WAVEFormat"/></format>
	<channels><x path="Int"/></channels>
	<byteRate><x path="Int"/></byteRate>
	<blockAlign><x path="Int"/></blockAlign>
	<bitsPerSample><x path="Int"/></bitsPerSample>
</a></typedef>
	<enum path="format.wav.WAVEFormat" params="" file="format/wav/Data.hx" module="format.wav.Data">
		<WF_PCM/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<class path="format.wav.Reader" params="" file="format/wav/Reader.hx">
		<i><c path="haxe.io.Input"/></i>
		<version><x path="Int"/></version>
		<readInt get="inline" set="null" line="43"><f a=""><x path="Int"/></f></readInt>
		<read public="1" set="method" line="51"><f a=""><t path="format.wav.WAVE"/></f></read>
		<new public="1" set="method" line="38"><f a="i">
	<c path="haxe.io.Input"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="format.wav.Writer" params="" file="format/wav/Writer.hx">
		<o><c path="haxe.io.Output"/></o>
		<write public="1" set="method" line="43"><f a="wav">
	<t path="format.wav.WAVE"/>
	<x path="Void"/>
</f></write>
		<writeInt get="inline" set="null" line="64"><f a="v">
	<x path="Int"/>
	<x path="Void"/>
</f></writeInt>
		<new public="1" set="method" line="38"><f a="output">
	<c path="haxe.io.Output"/>
	<x path="Void"/>
</f></new>
	</class>
	<typedef path="format.zip.ExtraField" params="" file="format/zip/Data.hx" module="format.zip.Data"><e path="haxe.zip.ExtraField"/></typedef>
	<typedef path="format.zip.Entry" params="" file="format/zip/Data.hx" module="format.zip.Data"><t path="haxe.zip.Entry"/></typedef>
	<typedef path="format.zip.Data" params="" file="format/zip/Data.hx"><c path="List"><t path="format.zip.Entry"/></c></typedef>
	<typedef path="format.zip.Reader" params="" file="format/zip/Reader.hx"><c path="haxe.zip.Reader"/></typedef>
	<class path="format.zip.Tools" params="" file="format/zip/Tools.hx">
		<uncompress public="1" set="method" line="32" static="1"><f a="f">
	<t path="format.zip.Entry"/>
	<x path="Void"/>
</f></uncompress>
		<compress public="1" set="method" line="50" static="1"><f a="f:level">
	<t path="format.zip.Entry"/>
	<x path="Int"/>
	<x path="Void"/>
</f></compress>
	</class>
	<typedef path="format.zip.Writer" params="" file="format/zip/Writer.hx"><c path="haxe.zip.Writer"/></typedef>
	<abstract path="haxe.Function" params="" file="D:\Projects\haxe\std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with any function type.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<meta><m n=":callable"/></meta>
		<impl><class path="haxe._Constraints.Function_Impl_" params="" file="D:\Projects\haxe\std/haxe/Constraints.hx" private="1" module="haxe.Constraints"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.FlatEnum" params="" file="D:\Projects\haxe\std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with an enum instance if all constructors of the enum
	require no arguments.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<impl><class path="haxe._Constraints.FlatEnum_Impl_" params="" file="D:\Projects\haxe\std/haxe/Constraints.hx" private="1" module="haxe.Constraints"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="haxe.IMap" params="K:V" file="D:\Projects\haxe\std/haxe/Constraints.hx" module="haxe.Constraints" interface="1">
		<get public="1" set="method"><f a="k">
	<c path="haxe.IMap.K"/>
	<t path="Null"><c path="haxe.IMap.V"/></t>
</f></get>
		<keys public="1" set="method"><f a=""><t path="Iterator"><c path="haxe.IMap.K"/></t></f></keys>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="haxe.EnumTools" params="" file="D:\Projects\haxe\std/haxe/EnumTools.hx" extern="1">
		<getName public="1" params="T" get="inline" set="null" line="41" static="1">
			<f a="e">
				<x path="Enum"><c path="getName.T"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of enum `e`, including its path.

		If `e` is inside a package, the package structure is returned dot-
		separated, with another dot separating the enum name:
			pack1.pack2.(...).packN.EnumName
		If `e` is a sub-type of a haxe module, that module is not part of the
		package structure.

		If `e` has no package, the enum name is returned.

		If `e` is null, the result is unspecified.

		The enum name does not include any type parameters.</haxe_doc>
		</getName>
		<createByName public="1" params="T" get="inline" set="null" line="54" static="1">
			<f a="e:constr:?params" v="::null">
				<x path="Enum"><c path="createByName.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createByName.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor `constr` with
		arguments `params`.

		If `e` or `constr` is null, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createByName>
		<createByIndex public="1" params="T" get="inline" set="null" line="70" static="1">
			<f a="e:index:?params" v="::null">
				<x path="Enum"><c path="createByIndex.T"/></x>
				<x path="Int"/>
				<c path="Array"><d/></c>
				<c path="createByIndex.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor number
		`index` with arguments `params`.

		The constructor indices are preserved from haxe syntax, so the first
		declared is index 0, the next index 1 etc.

		If `e` or `index` is null, or if enum `e` has no constructor
		corresponding to index `index`, or if the number of elements in `params`
		does not match the expected number of constructor arguments, or if any
		argument has an invalid type, the result is unspecified.</haxe_doc>
		</createByIndex>
		<createAll public="1" params="T" get="inline" set="null" line="87" static="1">
			<f a="e">
				<x path="Enum"><c path="createAll.T"/></x>
				<c path="Array"><c path="createAll.T"/></c>
			</f>
			<haxe_doc>Returns a list of all constructors of enum `e` that require no
		arguments.

		This may return the empty Array [] if all constructors of `e` require
		arguments.

		Otherwise an instance of `e` constructed through each of its non-
		argument constructors is returned, in the order of the constructor
		declaration.

		If `e` is null, the result is unspecified.</haxe_doc>
		</createAll>
		<getConstructors public="1" params="T" get="inline" set="null" line="99" static="1">
			<f a="e">
				<x path="Enum"><c path="getConstructors.T"/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the names of all constructors of enum `e`.

		The order of the constructor names in the returned Array is preserved
		from the original syntax.

		If `c` is null, the result is unspecified.</haxe_doc>
		</getConstructors>
	</class>
	<class path="haxe.EnumValueTools" params="" file="D:\Projects\haxe\std/haxe/EnumTools.hx" module="haxe.EnumTools" extern="1">
		<equals public="1" params="T" get="inline" set="null" line="114" static="1">
			<f a="a:b">
				<c path="equals.T"/>
				<c path="equals.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Recursively compares two enum instances `a` and `b` by value.

		Unlike `a == b`, this function performs a deep equality check on the
		arguments of the constructors, if exists.

		If `a` or `b` are null, the result is unspecified.</haxe_doc>
		</equals>
		<getName public="1" get="inline" set="null" line="125" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the constructor name of enum instance `e`.

		The result String does not contain any constructor arguments.

		If `e` is null, the result is unspecified.</haxe_doc>
		</getName>
		<getParameters public="1" get="inline" set="null" line="139" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>Returns a list of the constructor arguments of enum instance `e`.

		If `e` has no arguments, the result is [].

		Otherwise the result are the values that were used as arguments to `e`,
		in the order of their declaration.

		If `e` is null, the result is unspecified.</haxe_doc>
		</getParameters>
		<getIndex public="1" get="inline" set="null" line="151" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of enum instance `e`.

		This corresponds to the original syntactic position of `e`. The index of
		the first declared constructor is 0, the next one is 1 etc.

		If `e` is null, the result is unspecified.</haxe_doc>
		</getIndex>
		<match public="1" set="method" static="1">
			<f a="e:pattern">
				<x path="EnumValue"/>
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Matches enum instance `e` against pattern `pattern`, returning true if
		matching succeeded and false otherwise.

		Example usage:

		```
		if (e.match(pattern)) {
			// codeIfTrue
		} else {
			// codeIfFalse
		}
		```

		This is equivalent to the following code:

		```
		switch (e) {
			case pattern:
				// codeIfTrue
			case _:
				// codeIfFalse
		}
		```

		This method is implemented in the compiler. This definition exists only
		for documentation.</haxe_doc>
		</match>
	</class>
	<class path="haxe.Log" params="" file="D:\Projects\haxe\std/haxe/Log.hx">
		<trace public="1" set="dynamic" line="45" static="1">
			<f a="v:?infos" v=":null">
				<d/>
				<t path="haxe.PosInfos"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Outputs `v` in a platform-dependent way.

		The second parameter `infos` is injected by the compiler and contains
		information about the position where the trace() call was made.

		This method can be rebound to a custom function:
			var oldTrace = haxe.Log.trace; // store old function
			haxe.Log.trace = function(v,infos) { // handle trace }
			...
			haxe.Log.trace = oldTrace;

		If it is bound to null, subsequent calls to trace() will cause an
		exception.</haxe_doc>
		</trace>
		<haxe_doc>Log primarily provides the trace() method, which is invoked upon a call to
	trace() in haxe code.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":reallyUsed"/>
		</meta>
	</class>
	<typedef path="haxe.PosInfos" params="" file="D:\Projects\haxe\std/haxe/PosInfos.hx">
		<a>
			<methodName><c path="String"/></methodName>
			<lineNumber><x path="Int"/></lineNumber>
			<fileName><c path="String"/></fileName>
			<customParams>
				<t path="Null"><c path="Array"><d/></c></t>
				<meta><m n=":optional"/></meta>
			</customParams>
			<className><c path="String"/></className>
		</a>
		<haxe_doc>PosInfos is a magic type which can be used to generate position information
	into the output for debugging use.

	If a function has a final optional argument of this type, i.e.
	(..., ?pos:haxe.PosInfos), each call to that function which does not assign
	a value to that argument has its position added as call argument.

	This can be used to track positions of calls in e.g. a unit testing
	framework.</haxe_doc>
	</typedef>
	<class path="haxe.Unserializer" params="" file="D:\Projects\haxe\std/haxe/Unserializer.hx">
		<DEFAULT_RESOLVER public="1" line="60" static="1">
			<t path="haxe.TypeResolver"/>
			<haxe_doc><![CDATA[This value can be set to use custom type resolvers.

		A type resolver finds a Class or Enum instance from a given String. By
		default, the haxe Type Api is used.

		A type resolver must provide two methods:

		1. resolveClass(name:String):Class<Dynamic> is called to determine a
				Class from a class name
		2. resolveEnum(name:String):Enum<Dynamic> is called to determine an
				Enum from an enum name

		This value is applied when a new Unserializer instance is created.
		Changing it afterwards has no effect on previously created instances.]]></haxe_doc>
		</DEFAULT_RESOLVER>
		<BASE64 line="62" static="1"><c path="String"/></BASE64>
		<CODES line="65" static="1"><c path="Array"><x path="Int"/></c></CODES>
		<initCodes set="method" line="67" static="1"><f a=""><c path="Array"><x path="Int"/></c></f></initCodes>
		<run public="1" set="method" line="433" static="1">
			<f a="v">
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Unserializes `v` and returns the according value.

		This is a convenience function for creating a new instance of
		Unserializer with `v` as buffer and calling its unserialize() method
		once.</haxe_doc>
		</run>
		<buf><c path="String"/></buf>
		<pos><x path="Int"/></pos>
		<length><x path="Int"/></length>
		<cache><c path="Array"><d/></c></cache>
		<scache><c path="Array"><c path="String"/></c></scache>
		<resolver><t path="haxe.TypeResolver"/></resolver>
		<setResolver public="1" set="method" line="124">
			<f a="r">
				<t path="haxe.TypeResolver"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the type resolver of `this` Unserializer instance to `r`.

		If `r` is null, a special resolver is used which returns null for all
		input values.

		See DEFAULT_RESOLVER for more information on type resolvers.</haxe_doc>
		</setResolver>
		<readDigits set="method" line="147"><f a=""><x path="Int"/></f></readDigits>
		<unserializeObject set="method" line="172"><f a="o">
	<a/>
	<x path="Void"/>
</f></unserializeObject>
		<unserializeEnum set="method" line="187"><f a="edecl:tag">
	<x path="Enum"><unknown/></x>
	<c path="String"/>
	<unknown/>
</f></unserializeEnum>
		<unserialize public="1" set="method" line="219">
			<f a=""><d/></f>
			<haxe_doc>Unserializes the next part of `this` Unserializer instance and returns
		the according value.

		This function may call `this.resolver.resolveClass` to determine a
		Class from a String, and `this.resolver.resolveEnum` to determine an
		Enum from a String.

		If `this` Unserializer instance contains no more or invalid data, an
		exception is thrown.

		This operation may fail on structurally valid data if a type cannot be
		resolved or if a field cannot be set. This can happen when unserializing
		Strings that were serialized on a different haxe target, in which the
		serialization side has to make sure not to include platform-specific
		data.

		Classes are created from Type.createEmptyInstance, which means their
		constructors are not called.</haxe_doc>
		</unserialize>
		<new public="1" set="method" line="99">
			<f a="buf">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new Unserializer instance, with its internal buffer
		initialized to `buf`.

		This does not parse `buf` immediately. It is parsed only when calls to
		`this.unserialize` are made.

		Each Unserializer instance maintains its own cache.</haxe_doc>
		</new>
		<haxe_doc>The Unserializer class is the complement to the Serializer class. It parses
	a serialization String and creates objects from the contained data.

	This class can be used in two ways:

	- create a new Unserializer() instance with a given serialization
		String, then call its unserialize() method until all values are
		extracted
	- call Unserializer.run() to unserialize a single value from a given
		String</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":reallyUsed"/>
		</meta>
	</class>
	<class path="haxe.Utf8" params="" file="D:\Projects\haxe\std/haxe/Utf8.hx">
		<__b><c path="String"/></__b>
		<new public="1" set="method" line="35">
			<f a="?size" v="null">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Allocate a new Utf8 buffer using an optional bytes size.</haxe_doc>
		</new>
		<haxe_doc>Since all platforms does not guarantee that String always uses UTF-8 encoding, you
	can use this crossplatform API to perform operations on such strings.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":reallyUsed"/>
		</meta>
	</class>
	<class path="haxe.crypto.Crc32" params="" file="D:\Projects\haxe\std/haxe/crypto/Crc32.hx">
		<crc><x path="Int"/></crc>
		<byte public="1" set="method" line="32"><f a="b">
	<x path="Int"/>
	<x path="Void"/>
</f></byte>
		<update public="1" set="method" line="43"><f a="b:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></update>
		<get public="1" set="method" line="57"><f a=""><x path="Int"/></f></get>
		<new public="1" set="method" line="28"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":keep"/>
			<m n=":reallyUsed"/>
		</meta>
	</class>
	<class path="haxe.ds.BalancedTree" params="K:V" file="D:\Projects\haxe\std/haxe/ds/BalancedTree.hx">
		<root><c path="haxe.ds.TreeNode">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.V"/>
</c></root>
		<set public="1" set="method" line="50">
			<f a="key:value">
				<c path="haxe.ds.BalancedTree.K"/>
				<c path="haxe.ds.BalancedTree.V"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Binds `key` to `value`.

		If `key` is already bound to a value, that binding disappears.

		If `key` is null, the result is unspecified.</haxe_doc>
		</set>
		<get public="1" set="method" line="61">
			<f a="key">
				<c path="haxe.ds.BalancedTree.K"/>
				<t path="Null"><c path="haxe.ds.BalancedTree.V"/></t>
			</f>
			<haxe_doc>Returns the value `key` is bound to.

		If `key` is not bound to any value, `null` is returned.

		If `key` is null, the result is unspecified.</haxe_doc>
		</get>
		<iterator public="1" set="method" line="115">
			<f a=""><t path="Iterator"><c path="haxe.ds.BalancedTree.V"/></t></f>
			<haxe_doc>Iterates over the bound values of `this` BalancedTree.

		This operation is performed in-order.</haxe_doc>
		</iterator>
		<keys public="1" set="method" line="126">
			<f a=""><t path="Iterator"><c path="haxe.ds.BalancedTree.K"/></t></f>
			<haxe_doc>Iterates over the keys of `this` BalancedTree.

		This operation is performed in-order.</haxe_doc>
		</keys>
		<setLoop set="method" line="132"><f a="k:v:node">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.V"/>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></setLoop>
		<iteratorLoop set="method" line="153"><f a="node:acc">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="Array"><c path="haxe.ds.BalancedTree.V"/></c>
	<x path="Void"/>
</f></iteratorLoop>
		<keysLoop set="method" line="161"><f a="node:acc">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="Array"><c path="haxe.ds.BalancedTree.K"/></c>
	<x path="Void"/>
</f></keysLoop>
		<balance set="method" line="187"><f a="l:k:v:r">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.V"/>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></balance>
		<compare set="method" line="201"><f a="k1:k2">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.K"/>
	<x path="Int"/>
</f></compare>
		<new public="1" set="method" line="41">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new BalancedTree, which is initially empty.</haxe_doc>
		</new>
		<haxe_doc>BalancedTree allows key-value mapping with arbitrary keys, as long as they
	can be ordered. By default, `Reflect.compare` is used in the `compare`
	method, which can be overridden in subclasses.

	Operations have a logarithmic average and worst-case cost.

	Iteration over keys and values, using `keys` and `iterator` respectively,
	are in-order.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="haxe.ds.TreeNode" params="K:V" file="D:\Projects\haxe\std/haxe/ds/BalancedTree.hx" module="haxe.ds.BalancedTree">
		<left public="1"><c path="haxe.ds.TreeNode">
	<c path="haxe.ds.TreeNode.K"/>
	<c path="haxe.ds.TreeNode.V"/>
</c></left>
		<right public="1"><c path="haxe.ds.TreeNode">
	<c path="haxe.ds.TreeNode.K"/>
	<c path="haxe.ds.TreeNode.V"/>
</c></right>
		<key public="1"><c path="haxe.ds.TreeNode.K"/></key>
		<value public="1"><c path="haxe.ds.TreeNode.V"/></value>
		<_height><x path="Int"/></_height>
		<new public="1" set="method" line="220"><f a="l:k:v:r:?h" v="::::-1">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.TreeNode.K"/>
		<c path="haxe.ds.TreeNode.V"/>
	</c>
	<c path="haxe.ds.TreeNode.K"/>
	<c path="haxe.ds.TreeNode.V"/>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.TreeNode.K"/>
		<c path="haxe.ds.TreeNode.V"/>
	</c>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":keep"/>
			<m n=":reallyUsed"/>
		</meta>
	</class>
	<class path="haxe.ds.EnumValueMap" params="K:V" file="D:\Projects\haxe\std/haxe/ds/EnumValueMap.hx">
		<extends path="haxe.ds.BalancedTree">
			<c path="haxe.ds.EnumValueMap.K"/>
			<c path="haxe.ds.EnumValueMap.V"/>
		</extends>
		<implements path="haxe.IMap">
			<c path="haxe.ds.EnumValueMap.K"/>
			<c path="haxe.ds.EnumValueMap.V"/>
		</implements>
		<compare set="method" line="33" override="1"><f a="k1:k2">
	<x path="EnumValue"/>
	<x path="EnumValue"/>
	<x path="Int"/>
</f></compare>
		<compareArgs set="method" line="42"><f a="a1:a2">
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
	<x path="Int"/>
</f></compareArgs>
		<compareArg set="method" line="52"><f a="v1:v2">
	<d/>
	<d/>
	<x path="Int"/>
</f></compareArg>
		<new public="1" set="method" line="31"><f a=""><x path="Void"/></f></new>
		<haxe_doc>EnumValueMap allows mapping of enum value keys to arbitrary values.

	Keys are compared by value and recursively over their parameters. If any
	parameter is not an enum value, `Reflect.compare` is used to compare them.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":reallyUsed"/>
		</meta>
	</class>
	<class path="haxe.ds.GenericCell" params="T" file="D:\Projects\haxe\std/haxe/ds/GenericStack.hx" module="haxe.ds.GenericStack">
		<elt public="1"><c path="haxe.ds.GenericCell.T"/></elt>
		<next public="1"><c path="haxe.ds.GenericCell"><c path="haxe.ds.GenericCell.T"/></c></next>
		<new public="1" set="method" line="30"><f a="elt:next">
	<c path="haxe.ds.GenericCell.T"/>
	<c path="haxe.ds.GenericCell"><c path="haxe.ds.GenericCell.T"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":keep"/>
			<m n=":reallyUsed"/>
		</meta>
	</class>
	<class path="haxe.ds.GenericStack" params="T" file="D:\Projects\haxe\std/haxe/ds/GenericStack.hx">
		<head public="1"><c path="haxe.ds.GenericCell"><c path="haxe.ds.GenericStack.T"/></c></head>
		<new public="1" set="method" line="67">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new empty GenericStack.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[A stack of elements.

	This class is generic, which means one type is generated for each type
	parameter T on static targets. For example:

	- `new GenericStack<Int>()` generates `GenericStack_Int`
	- `new GenericStack<String>()` generates `GenericStack_String`

	The generated name is an implementation detail and should not be relied
	upon.]]></haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":reallyUsed"/>
		</meta>
	</class>
	<abstract path="haxe.ds.HashMap" params="K:V" file="D:\Projects\haxe\std/haxe/ds/HashMap.hx">
		<this><a>
	<values><c path="haxe.ds.IntMap"><c path="haxe.ds.HashMap.V"/></c></values>
	<keys><c path="haxe.ds.IntMap"><c path="haxe.ds.HashMap.K"/></c></keys>
</a></this>
		<impl><class path="haxe.ds._HashMap.HashMap_Impl_" params="" file="D:\Projects\haxe\std/haxe/ds/HashMap.hx" private="1" module="haxe.ds.HashMap"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="haxe.ds.IntMap" params="T" file="D:\Projects\haxe\std/haxe/ds/IntMap.hx" extern="1">
		<implements path="haxe.IMap">
			<x path="Int"/>
			<c path="haxe.ds.IntMap.T"/>
		</implements>
		<set public="1" set="method">
			<f a="key:value">
				<x path="Int"/>
				<c path="haxe.ds.IntMap.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<get public="1" set="method">
			<f a="key">
				<x path="Int"/>
				<t path="Null"><c path="haxe.ds.IntMap.T"/></t>
			</f>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<exists public="1" set="method">
			<f a="key">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<remove public="1" set="method">
			<f a="key">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<keys public="1" set="method">
			<f a=""><t path="Iterator"><x path="Int"/></t></f>
			<haxe_doc>See `Map.keys`</haxe_doc>
		</keys>
		<iterator public="1" set="method">
			<f a=""><t path="Iterator"><c path="haxe.ds.IntMap.T"/></t></f>
			<haxe_doc>See `Map.iterator`</haxe_doc>
		</iterator>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>See `Map.toString`</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new IntMap.</haxe_doc>
		</new>
		<haxe_doc>IntMap allows mapping of Int keys to arbitrary values.

	See `Map` for documentation details.</haxe_doc>
		<meta><m n=":reallyUsed"/></meta>
	</class>
	<class path="haxe.ds.ObjectMap" params="K:V" file="D:\Projects\haxe\std/haxe/ds/ObjectMap.hx" extern="1">
		<implements path="haxe.IMap">
			<c path="haxe.ds.ObjectMap.K"/>
			<c path="haxe.ds.ObjectMap.V"/>
		</implements>
		<set public="1" set="method">
			<f a="key:value">
				<c path="haxe.ds.ObjectMap.K"/>
				<c path="haxe.ds.ObjectMap.V"/>
				<x path="Void"/>
			</f>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<get public="1" set="method">
			<f a="key">
				<c path="haxe.ds.ObjectMap.K"/>
				<t path="Null"><c path="haxe.ds.ObjectMap.V"/></t>
			</f>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<exists public="1" set="method">
			<f a="key">
				<c path="haxe.ds.ObjectMap.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<remove public="1" set="method">
			<f a="key">
				<c path="haxe.ds.ObjectMap.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<keys public="1" set="method">
			<f a=""><t path="Iterator"><c path="haxe.ds.ObjectMap.K"/></t></f>
			<haxe_doc>See `Map.keys`</haxe_doc>
		</keys>
		<iterator public="1" set="method">
			<f a=""><t path="Iterator"><c path="haxe.ds.ObjectMap.V"/></t></f>
			<haxe_doc>See `Map.iterator`</haxe_doc>
		</iterator>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>See `Map.toString`</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new ObjectMap.</haxe_doc>
		</new>
		<haxe_doc>ObjectMap allows mapping of object keys to arbitrary values.

	On static targets, the keys are considered to be strong references. Refer
	to `haxe.ds.WeakMap` for a weak reference version.

	See `Map` for documentation details.</haxe_doc>
		<meta><m n=":reallyUsed"/></meta>
	</class>
	<class path="haxe.ds.StringMap" params="T" file="D:\Projects\haxe\std/haxe/ds/StringMap.hx" extern="1">
		<implements path="haxe.IMap">
			<c path="String"/>
			<c path="haxe.ds.StringMap.T"/>
		</implements>
		<set public="1" set="method">
			<f a="key:value">
				<c path="String"/>
				<c path="haxe.ds.StringMap.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<get public="1" set="method">
			<f a="key">
				<c path="String"/>
				<t path="Null"><c path="haxe.ds.StringMap.T"/></t>
			</f>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<exists public="1" set="method">
			<f a="key">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<remove public="1" set="method">
			<f a="key">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<keys public="1" set="method">
			<f a=""><t path="Iterator"><c path="String"/></t></f>
			<haxe_doc>See `Map.keys`</haxe_doc>
		</keys>
		<iterator public="1" set="method">
			<f a=""><t path="Iterator"><c path="haxe.ds.StringMap.T"/></t></f>
			<haxe_doc>See `Map.iterator`</haxe_doc>
		</iterator>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>See `Map.toString`</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new StringMap.</haxe_doc>
		</new>
		<haxe_doc>StringMap allows mapping of String keys to arbitrary values.

	See `Map` for documentation details.</haxe_doc>
		<meta><m n=":reallyUsed"/></meta>
	</class>
	<class path="haxe.io.BytesBuffer" params="" file="D:\Projects\haxe\std/haxe/io/BytesBuffer.hx">
		<b><c path="Array"><x path="Int"/></c></b>
		<length public="1" get="null" set="null">
			<x path="Int"/>
			<haxe_doc>The length of the buffer in bytes.</haxe_doc>
		</length>
		<getBytes public="1" set="method" line="173">
			<f a=""><c path="haxe.io.Bytes"/></f>
			<haxe_doc>Returns either a copy or a reference of the current bytes.
		Once called, the buffer can no longer be used.</haxe_doc>
		</getBytes>
		<new public="1" set="method" line="45"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":keep"/>
			<m n=":reallyUsed"/>
		</meta>
	</class>
	<typedef path="haxe.io.BytesData" params="" file="D:\Projects\haxe\std/haxe/io/BytesData.hx"><c path="Array"><x path="Int"/></c></typedef>
	<class path="haxe.io.BytesInput" params="" file="D:\Projects\haxe\std/haxe/io/BytesInput.hx">
		<extends path="haxe.io.Input"/>
		<b><t path="haxe.io.BytesData"/></b>
		<pos><x path="Int"/></pos>
		<len><x path="Int"/></len>
		<totlen><x path="Int"/></totlen>
		<position public="1" get="null" set="null">
			<x path="Int"/>
			<haxe_doc>The current position in the stream in bytes.</haxe_doc>
		</position>
		<length public="1" get="null" set="null">
			<x path="Int"/>
			<haxe_doc>The length of the stream in bytes.</haxe_doc>
		</length>
		<readByte public="1" set="method" line="90" override="1"><f a=""><x path="Int"/></f></readByte>
		<readBytes public="1" set="method" line="111" override="1"><f a="buf:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readBytes>
		<new public="1" set="method" line="38"><f a="b:?pos:?len" v=":null:null">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":keep"/>
			<m n=":reallyUsed"/>
		</meta>
	</class>
	<class path="haxe.io.BytesOutput" params="" file="D:\Projects\haxe\std/haxe/io/BytesOutput.hx">
		<extends path="haxe.io.Output"/>
		<b><c path="haxe.io.BytesBuffer"/></b>
		<length public="1" get="null" set="null">
			<x path="Int"/>
			<haxe_doc>The length of the stream in bytes.</haxe_doc>
		</length>
		<writeByte public="1" set="method" line="51" override="1"><f a="c">
	<x path="Int"/>
	<x path="Void"/>
</f></writeByte>
		<writeBytes public="1" set="method" line="59" override="1"><f a="buf:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></writeBytes>
		<getBytes public="1" set="method" line="116"><f a=""><c path="haxe.io.Bytes"/></f></getBytes>
		<new public="1" set="method" line="35"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":keep"/>
			<m n=":reallyUsed"/>
		</meta>
	</class>
	<class path="haxe.io.Eof" params="" file="D:\Projects\haxe\std/haxe/io/Eof.hx">
		<toString set="method" line="30">
			<f a=""><c path="String"/></f>
			<meta><m n=":keep"/></meta>
		</toString>
		<new public="1" set="method" line="28"><f a=""><x path="Void"/></f></new>
		<haxe_doc>This exception is raised when reading while data is no longer available in the [Input].</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":reallyUsed"/>
		</meta>
	</class>
	<enum path="haxe.io.Error" params="" file="D:\Projects\haxe\std/haxe/io/Error.hx">
		<Blocked><haxe_doc>The IO is set into nonblocking mode and some data cannot be read or written</haxe_doc></Blocked>
		<Overflow><haxe_doc>An integer value is outside its allowed range</haxe_doc></Overflow>
		<OutsideBounds><haxe_doc>An operation on Bytes is outside of its valid range</haxe_doc></OutsideBounds>
		<Custom a="e">
			<d/>
			<haxe_doc>Other errors</haxe_doc>
		</Custom>
		<haxe_doc>The possible IO errors that can occur</haxe_doc>
	</enum>
	<typedef path="haxe.zip.Entry" params="" file="D:\Projects\haxe\std/haxe/zip/Entry.hx"><a>
	<fileTime><c path="Date"/></fileTime>
	<fileSize><x path="Int"/></fileSize>
	<fileName><c path="String"/></fileName>
	<extraFields>
		<t path="Null"><t path="Null"><c path="List"><e path="haxe.zip.ExtraField"/></c></t></t>
		<meta><m n=":optional"/></meta>
	</extraFields>
	<dataSize><x path="Int"/></dataSize>
	<data><t path="Null"><c path="haxe.io.Bytes"/></t></data>
	<crc32><t path="Null"><x path="Int"/></t></crc32>
	<compressed><x path="Bool"/></compressed>
</a></typedef>
</haxe>