//
// Copyright (C) 2006-2016, 1st Playable Productions, LLC. All rights reserved.
//
// UNPUBLISHED -- Rights reserved under the copyright laws of the United
// States. Use of a copyright notice is precautionary only and does not
// imply publication or disclosure.
//
// THIS DOCUMENTATION CONTAINS CONFIDENTIAL AND PROPRIETARY INFORMATION
// OF 1ST PLAYABLE PRODUCTIONS, LLC. ANY DUPLICATION, MODIFICATION,
// DISTRIBUTION, OR DISCLOSURE IS STRICTLY PROHIBITED WITHOUT THE PRIOR
// EXPRESS WRITTEN PERMISSION OF 1ST PLAYABLE PRODUCTIONS, LLC.
///////////////////////////////////////////////////////////////////////////
package com.firstplayable.hxlib.utils;
import haxe.macro.ExprTools;
import haxe.PosInfos;
import haxe.macro.Context;
import haxe.macro.Expr;
import haxe.macro.Printer;

/**
 * A collection of utility macros.
 */
class MacroUtils
{
    #if macro
        public static var exprPrinter: Printer = new Printer("    ");
    #end
    
    /*   Returns the date this macro was compiled.
     *   This useful macro has been copied from the site haxe.org.
     */
    macro public static function getBuildDate()
    {
        var date = Date.now().toString();
        return Context.makeExpr(date, Context.currentPos());
    }
    
    macro public static function compileTrace( exp: Expr ): Expr
    {
        trace( exprPrinter.printExpr( exp ) );
        return exp;
    }
	
	/**
	 * For classes that implement the singleton pattern, auto-generate the instance property and its getter.
	 * 
	 * @usage add "@:build( com.firstplayable.hxlib.utils.MacroUtils.makeSingleton() )" before your class declaration
	 */
	macro public static function makeSingleton():Array<Field>
	{
		// Describes the class; this is needed for creating the variable / function return type in the code generated by this macro
		var typePath = 
			{ 
				pack: Context.getLocalClass().get().pack, 
				name: Context.getLocalClass().get().name 
			};
		var type = TPath( typePath );
		
		
		var position:Position = Context.currentPos();
		var fields:Array<Field> = Context.getBuildFields(); //< Array of the caller Class's fields
		
		
		// Create the instance property
		fields.push
		(
			{
				name: "instance",
				meta: [],
				access: [ APublic, AStatic ],
				kind: FProp( "get", "null", type ),
				pos: position
			}
		);
		
		// Create the getter 
		fields.push
		(
			{
				name: "get_instance",
				pos: position,
				access: [ APrivate, AStatic ],
				meta: [ { name: ":noCompletion", pos: position } ],
				kind: FFun( 
					{
						args: [],
						ret: type,
						expr: macro return instance == null ? instance = new $typePath() : instance
					} )
			}
		);
		
		// TODO: we could also generate the ctor (if it doesn't exist) and force private ctor
		
		return fields;
	}
}